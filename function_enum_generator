#!/bin/bash

project_root="../.."
srcpath_svr="${project_root}"
srcpath_cli="${project_root}"
dstpath="${project_root}"

filename="${dstpath}/function_enumerants.hpp"


rm -f $filename
rm -f ${filename}.server
rm -f ${filename}.client


function writeln() {

    local ln=$1
    if [ -z "$#" ]; then
        echo '\n' >> $filename
    else
        echo "${ln}" >> $filename
    fi
}



function write_func_enum() {

    local srcpath=$1

    ARRAY=()
    SARRAY=()
    spc2='  '
    spc4='    '
    spc8='        '
    spc12='            '
    spc16='                '


    if [[ "${srcpath}" == *Server ]]; then
        ARRAY=(`./sc_parser --server --path=${srcpath} | grep FuncName | sort | uniq | cut -d':' -f2 | sed -e 's/ \+//g'`)
    elif [[ "${srcpath}" == *Client ]]; then
        ARRAY=(`./sc_parser --client --path=${srcpath} | grep FuncName | sort | uniq | cut -d':' -f2 | sed -e 's/ \+//g'`)
    fi

    writeln "/* This is a generated file.  DO NOT EDIT! */"
    writeln
    writeln
    writeln "#pragma once"
    writeln
    writeln "#include <common/mpl/hash.hpp>"
    writeln
    writeln
    writeln "#include <cstdint>"
    writeln "#include <string>"


    writeln
    writeln
    writeln "namespace xc {"
    writeln "namespace messages {"
    writeln
    writeln "${spc4}enum struct FunctionName : std::uint32_t"
    writeln "${spc4}{"
    writeln "${spc8}noval_t_ = xc::mpl::hash(\"noval_t\") , "
    writeln
    for Item in ${ARRAY[*]}; do
        writeln "${spc8}$Item = xc::mpl::hash(\"${Item}\") ,"
    done
    writeln "${spc4}};"

    writeln
    writeln "} }${spc2}// namespace xc::messages"
}


function write_func_strings() {

    SARRAY=(`cat ${filename} | grep '=' | cut -d'=' -f1 | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//'`)

    sed -i '$ d' ${filename}

    writeln
    writeln
    writeln "${spc4}inline"
    writeln "${spc4}std::string"
    writeln "${spc4}funcname_hash_to_string(xc::messages::FunctionName hash)"
    writeln "${spc4}{"
    writeln "${spc8}switch (hash)"
    writeln "${spc8}{"

    for Item in ${SARRAY[*]}; do
        if [[ "${Item}" == "noval_t_" ]]; then
            continue
        fi
        writeln "${spc12}case xc::messages::FunctionName::${Item} :"
        writeln "${spc12}{"
        writeln "${spc16}return \"${Item}\";"
        writeln "${spc12}}"
        writeln
    done

    writeln
    writeln "${spc12}default :"
    writeln "${spc12}{"
    writeln "${spc16}return \"FunctionName unknown\";"
    writeln "${spc12}}"

    writeln "${spc8}}"
    writeln "${spc4}}"

    writeln
    writeln "} }${spc2}// namespace xc::messages"
}


# generate enums from server.hpp ..
write_func_enum ${srcpath_svr}
mv ${filename} ${filename}.server

# generate enums from client.hpp ..
write_func_enum ${srcpath_cli}
mv ${filename} ${filename}.client


if [[ "$#" == 1 ]] && [[ "$1" == "--split" ]]; then
    :
else
    # merge generated enums into ${filename} and clean-up ..
    diff -DVERSION1 ${filename}.server ${filename}.client | sed -e '/\(^#ifndef\|^#ifdef\|^#else\|^#endif\)/d' > ${filename}
    rm -f ${filename}.server ${filename}.client

    write_func_strings
fi
