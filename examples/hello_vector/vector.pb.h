// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vector_2eproto;
namespace Messages {
class Elements;
class ElementsDefaultTypeInternal;
extern ElementsDefaultTypeInternal _Elements_default_instance_;
class Extrema;
class ExtremaDefaultTypeInternal;
extern ExtremaDefaultTypeInternal _Extrema_default_instance_;
class Indices;
class IndicesDefaultTypeInternal;
extern IndicesDefaultTypeInternal _Indices_default_instance_;
class Revision;
class RevisionDefaultTypeInternal;
extern RevisionDefaultTypeInternal _Revision_default_instance_;
class Vector32;
class Vector32DefaultTypeInternal;
extern Vector32DefaultTypeInternal _Vector32_default_instance_;
class Vector64;
class Vector64DefaultTypeInternal;
extern Vector64DefaultTypeInternal _Vector64_default_instance_;
}  // namespace Messages
PROTOBUF_NAMESPACE_OPEN
template<> ::Messages::Elements* Arena::CreateMaybeMessage<::Messages::Elements>(Arena*);
template<> ::Messages::Extrema* Arena::CreateMaybeMessage<::Messages::Extrema>(Arena*);
template<> ::Messages::Indices* Arena::CreateMaybeMessage<::Messages::Indices>(Arena*);
template<> ::Messages::Revision* Arena::CreateMaybeMessage<::Messages::Revision>(Arena*);
template<> ::Messages::Vector32* Arena::CreateMaybeMessage<::Messages::Vector32>(Arena*);
template<> ::Messages::Vector64* Arena::CreateMaybeMessage<::Messages::Vector64>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Messages {

// ===================================================================

class Revision :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Revision) */ {
 public:
  Revision();
  virtual ~Revision();

  Revision(const Revision& from);
  Revision(Revision&& from) noexcept
    : Revision() {
    *this = ::std::move(from);
  }

  inline Revision& operator=(const Revision& from) {
    CopyFrom(from);
    return *this;
  }
  inline Revision& operator=(Revision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Revision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Revision* internal_default_instance() {
    return reinterpret_cast<const Revision*>(
               &_Revision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Revision* other);
  void Swap(Revision* other);
  friend void swap(Revision& a, Revision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Revision* New() const final {
    return CreateMaybeMessage<Revision>(nullptr);
  }

  Revision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Revision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Revision& from);
  void MergeFrom(const Revision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Revision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Revision";
  }
  protected:
  explicit Revision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 major_rev = 1;
  void clear_major_rev();
  static const int kMajorRevFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 major_rev() const;
  void set_major_rev(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 minor_rev = 2;
  void clear_minor_rev();
  static const int kMinorRevFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 minor_rev() const;
  void set_minor_rev(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Messages.Revision)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 major_rev_;
  ::PROTOBUF_NAMESPACE_ID::int64 minor_rev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// -------------------------------------------------------------------

class Extrema :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Extrema) */ {
 public:
  Extrema();
  virtual ~Extrema();

  Extrema(const Extrema& from);
  Extrema(Extrema&& from) noexcept
    : Extrema() {
    *this = ::std::move(from);
  }

  inline Extrema& operator=(const Extrema& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extrema& operator=(Extrema&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extrema& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extrema* internal_default_instance() {
    return reinterpret_cast<const Extrema*>(
               &_Extrema_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Extrema* other);
  void Swap(Extrema* other);
  friend void swap(Extrema& a, Extrema& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Extrema* New() const final {
    return CreateMaybeMessage<Extrema>(nullptr);
  }

  Extrema* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extrema>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extrema& from);
  void MergeFrom(const Extrema& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extrema* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Extrema";
  }
  protected:
  explicit Extrema(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double min = 2 [packed = true];
  int min_size() const;
  void clear_min();
  static const int kMinFieldNumber = 2;
  double min(int index) const;
  void set_min(int index, double value);
  void add_min(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      min() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_min();

  // repeated double max = 3 [packed = true];
  int max_size() const;
  void clear_max();
  static const int kMaxFieldNumber = 3;
  double max(int index) const;
  void set_max(int index, double value);
  void add_max(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      max() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_max();

  // int32 dims = 1;
  void clear_dims();
  static const int kDimsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 dims() const;
  void set_dims(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_set = 4;
  void clear_is_set();
  static const int kIsSetFieldNumber = 4;
  bool is_set() const;
  void set_is_set(bool value);

  // @@protoc_insertion_point(class_scope:Messages.Extrema)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > min_;
  mutable std::atomic<int> _min_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > max_;
  mutable std::atomic<int> _max_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 dims_;
  bool is_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// -------------------------------------------------------------------

class Vector32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Vector32) */ {
 public:
  Vector32();
  virtual ~Vector32();

  Vector32(const Vector32& from);
  Vector32(Vector32&& from) noexcept
    : Vector32() {
    *this = ::std::move(from);
  }

  inline Vector32& operator=(const Vector32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector32& operator=(Vector32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector32* internal_default_instance() {
    return reinterpret_cast<const Vector32*>(
               &_Vector32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Vector32* other);
  void Swap(Vector32* other);
  friend void swap(Vector32& a, Vector32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector32* New() const final {
    return CreateMaybeMessage<Vector32>(nullptr);
  }

  Vector32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector32& from);
  void MergeFrom(const Vector32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Vector32";
  }
  protected:
  explicit Vector32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float values = 10 [packed = true];
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 10;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);

  // string units = 5;
  void clear_units();
  static const int kUnitsFieldNumber = 5;
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_units();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_units(
      std::string* units);

  // .Messages.Revision revision = 4;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 4;
  const ::Messages::Revision& revision() const;
  ::Messages::Revision* release_revision();
  ::Messages::Revision* mutable_revision();
  void set_allocated_revision(::Messages::Revision* revision);
  void unsafe_arena_set_allocated_revision(
      ::Messages::Revision* revision);
  ::Messages::Revision* unsafe_arena_release_revision();

  // int32 components = 2;
  void clear_components();
  static const int kComponentsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 components() const;
  void set_components(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool interleaved = 3;
  void clear_interleaved();
  static const int kInterleavedFieldNumber = 3;
  bool interleaved() const;
  void set_interleaved(bool value);

  // @@protoc_insertion_point(class_scope:Messages.Vector32)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::Messages::Revision* revision_;
  ::PROTOBUF_NAMESPACE_ID::int32 components_;
  bool interleaved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// -------------------------------------------------------------------

class Vector64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Vector64) */ {
 public:
  Vector64();
  virtual ~Vector64();

  Vector64(const Vector64& from);
  Vector64(Vector64&& from) noexcept
    : Vector64() {
    *this = ::std::move(from);
  }

  inline Vector64& operator=(const Vector64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector64& operator=(Vector64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector64* internal_default_instance() {
    return reinterpret_cast<const Vector64*>(
               &_Vector64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Vector64* other);
  void Swap(Vector64* other);
  friend void swap(Vector64& a, Vector64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector64* New() const final {
    return CreateMaybeMessage<Vector64>(nullptr);
  }

  Vector64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector64& from);
  void MergeFrom(const Vector64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Vector64";
  }
  protected:
  explicit Vector64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double values = 10 [packed = true];
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 10;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);

  // string units = 5;
  void clear_units();
  static const int kUnitsFieldNumber = 5;
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_units();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_units(
      std::string* units);

  // .Messages.Revision revision = 4;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 4;
  const ::Messages::Revision& revision() const;
  ::Messages::Revision* release_revision();
  ::Messages::Revision* mutable_revision();
  void set_allocated_revision(::Messages::Revision* revision);
  void unsafe_arena_set_allocated_revision(
      ::Messages::Revision* revision);
  ::Messages::Revision* unsafe_arena_release_revision();

  // int32 components = 2;
  void clear_components();
  static const int kComponentsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 components() const;
  void set_components(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool interleaved = 3;
  void clear_interleaved();
  static const int kInterleavedFieldNumber = 3;
  bool interleaved() const;
  void set_interleaved(bool value);

  // @@protoc_insertion_point(class_scope:Messages.Vector64)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::Messages::Revision* revision_;
  ::PROTOBUF_NAMESPACE_ID::int32 components_;
  bool interleaved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// -------------------------------------------------------------------

class Indices :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Indices) */ {
 public:
  Indices();
  virtual ~Indices();

  Indices(const Indices& from);
  Indices(Indices&& from) noexcept
    : Indices() {
    *this = ::std::move(from);
  }

  inline Indices& operator=(const Indices& from) {
    CopyFrom(from);
    return *this;
  }
  inline Indices& operator=(Indices&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Indices& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Indices* internal_default_instance() {
    return reinterpret_cast<const Indices*>(
               &_Indices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Indices* other);
  void Swap(Indices* other);
  friend void swap(Indices& a, Indices& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Indices* New() const final {
    return CreateMaybeMessage<Indices>(nullptr);
  }

  Indices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Indices>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Indices& from);
  void MergeFrom(const Indices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Indices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Indices";
  }
  protected:
  explicit Indices(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 values = 2 [packed = true];
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_values();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);

  // @@protoc_insertion_point(class_scope:Messages.Indices)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// -------------------------------------------------------------------

class Elements :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Elements) */ {
 public:
  Elements();
  virtual ~Elements();

  Elements(const Elements& from);
  Elements(Elements&& from) noexcept
    : Elements() {
    *this = ::std::move(from);
  }

  inline Elements& operator=(const Elements& from) {
    CopyFrom(from);
    return *this;
  }
  inline Elements& operator=(Elements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Elements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Elements* internal_default_instance() {
    return reinterpret_cast<const Elements*>(
               &_Elements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(Elements* other);
  void Swap(Elements* other);
  friend void swap(Elements& a, Elements& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Elements* New() const final {
    return CreateMaybeMessage<Elements>(nullptr);
  }

  Elements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Elements>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Elements& from);
  void MergeFrom(const Elements& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Elements* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Elements";
  }
  protected:
  explicit Elements(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vector_2eproto);
    return ::descriptor_table_vector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 indices = 1 [packed = true];
  int indices_size() const;
  void clear_indices();
  static const int kIndicesFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // repeated int32 strides = 2 [packed = true];
  int strides_size() const;
  void clear_strides();
  static const int kStridesFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 strides(int index) const;
  void set_strides(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_strides(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      strides() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_strides();

  // repeated int32 offsets = 3 [packed = true];
  int offsets_size() const;
  void clear_offsets();
  static const int kOffsetsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 offsets(int index) const;
  void set_offsets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_offsets(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_offsets();

  // repeated int32 types = 4 [packed = true];
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 types(int index) const;
  void set_types(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_types(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_types();

  // repeated int32 ids = 5 [packed = true];
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ids();

  // repeated int32 id_offsets = 6 [packed = true];
  int id_offsets_size() const;
  void clear_id_offsets();
  static const int kIdOffsetsFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 id_offsets(int index) const;
  void set_id_offsets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_id_offsets(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      id_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_id_offsets();

  // repeated int32 num_elements_with_id = 7 [packed = true];
  int num_elements_with_id_size() const;
  void clear_num_elements_with_id();
  static const int kNumElementsWithIdFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 num_elements_with_id(int index) const;
  void set_num_elements_with_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_num_elements_with_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      num_elements_with_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_num_elements_with_id();

  // repeated int32 id_to_index = 8 [packed = true];
  int id_to_index_size() const;
  void clear_id_to_index();
  static const int kIdToIndexFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 id_to_index(int index) const;
  void set_id_to_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_id_to_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      id_to_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_id_to_index();

  // repeated double centers = 10 [packed = true];
  int centers_size() const;
  void clear_centers();
  static const int kCentersFieldNumber = 10;
  double centers(int index) const;
  void set_centers(int index, double value);
  void add_centers(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      centers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_centers();

  // repeated double lengths = 11 [packed = true];
  int lengths_size() const;
  void clear_lengths();
  static const int kLengthsFieldNumber = 11;
  double lengths(int index) const;
  void set_lengths(int index, double value);
  void add_lengths(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      lengths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_lengths();

  // repeated double areas = 12 [packed = true];
  int areas_size() const;
  void clear_areas();
  static const int kAreasFieldNumber = 12;
  double areas(int index) const;
  void set_areas(int index, double value);
  void add_areas(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      areas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_areas();

  // repeated double volumes = 13 [packed = true];
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 13;
  double volumes(int index) const;
  void set_volumes(int index, double value);
  void add_volumes(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_volumes();

  // @@protoc_insertion_point(class_scope:Messages.Elements)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > strides_;
  mutable std::atomic<int> _strides_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > offsets_;
  mutable std::atomic<int> _offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > types_;
  mutable std::atomic<int> _types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > id_offsets_;
  mutable std::atomic<int> _id_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > num_elements_with_id_;
  mutable std::atomic<int> _num_elements_with_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > id_to_index_;
  mutable std::atomic<int> _id_to_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > centers_;
  mutable std::atomic<int> _centers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > lengths_;
  mutable std::atomic<int> _lengths_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > areas_;
  mutable std::atomic<int> _areas_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > volumes_;
  mutable std::atomic<int> _volumes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Revision

// int64 major_rev = 1;
inline void Revision::clear_major_rev() {
  major_rev_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Revision::major_rev() const {
  // @@protoc_insertion_point(field_get:Messages.Revision.major_rev)
  return major_rev_;
}
inline void Revision::set_major_rev(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  major_rev_ = value;
  // @@protoc_insertion_point(field_set:Messages.Revision.major_rev)
}

// int64 minor_rev = 2;
inline void Revision::clear_minor_rev() {
  minor_rev_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Revision::minor_rev() const {
  // @@protoc_insertion_point(field_get:Messages.Revision.minor_rev)
  return minor_rev_;
}
inline void Revision::set_minor_rev(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  minor_rev_ = value;
  // @@protoc_insertion_point(field_set:Messages.Revision.minor_rev)
}

// -------------------------------------------------------------------

// Extrema

// int32 dims = 1;
inline void Extrema::clear_dims() {
  dims_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Extrema::dims() const {
  // @@protoc_insertion_point(field_get:Messages.Extrema.dims)
  return dims_;
}
inline void Extrema::set_dims(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dims_ = value;
  // @@protoc_insertion_point(field_set:Messages.Extrema.dims)
}

// repeated double min = 2 [packed = true];
inline int Extrema::min_size() const {
  return min_.size();
}
inline void Extrema::clear_min() {
  min_.Clear();
}
inline double Extrema::min(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Extrema.min)
  return min_.Get(index);
}
inline void Extrema::set_min(int index, double value) {
  min_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Extrema.min)
}
inline void Extrema::add_min(double value) {
  min_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Extrema.min)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Extrema::min() const {
  // @@protoc_insertion_point(field_list:Messages.Extrema.min)
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Extrema::mutable_min() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Extrema.min)
  return &min_;
}

// repeated double max = 3 [packed = true];
inline int Extrema::max_size() const {
  return max_.size();
}
inline void Extrema::clear_max() {
  max_.Clear();
}
inline double Extrema::max(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Extrema.max)
  return max_.Get(index);
}
inline void Extrema::set_max(int index, double value) {
  max_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Extrema.max)
}
inline void Extrema::add_max(double value) {
  max_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Extrema.max)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Extrema::max() const {
  // @@protoc_insertion_point(field_list:Messages.Extrema.max)
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Extrema::mutable_max() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Extrema.max)
  return &max_;
}

// bool is_set = 4;
inline void Extrema::clear_is_set() {
  is_set_ = false;
}
inline bool Extrema::is_set() const {
  // @@protoc_insertion_point(field_get:Messages.Extrema.is_set)
  return is_set_;
}
inline void Extrema::set_is_set(bool value) {
  
  is_set_ = value;
  // @@protoc_insertion_point(field_set:Messages.Extrema.is_set)
}

// -------------------------------------------------------------------

// Vector32

// string name = 1;
inline void Vector32::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Vector32::name() const {
  // @@protoc_insertion_point(field_get:Messages.Vector32.name)
  return name_.Get();
}
inline void Vector32::set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:Messages.Vector32.name)
}
inline void Vector32::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Vector32.name)
}
inline void Vector32::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:Messages.Vector32.name)
}
inline void Vector32::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:Messages.Vector32.name)
}
inline std::string* Vector32::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Vector32.name)
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Vector32::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Vector32.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Vector32::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:Messages.Vector32.name)
}
inline std::string* Vector32::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Vector32.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Vector32::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Vector32.name)
}

// int32 components = 2;
inline void Vector32::clear_components() {
  components_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector32::components() const {
  // @@protoc_insertion_point(field_get:Messages.Vector32.components)
  return components_;
}
inline void Vector32::set_components(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  components_ = value;
  // @@protoc_insertion_point(field_set:Messages.Vector32.components)
}

// bool interleaved = 3;
inline void Vector32::clear_interleaved() {
  interleaved_ = false;
}
inline bool Vector32::interleaved() const {
  // @@protoc_insertion_point(field_get:Messages.Vector32.interleaved)
  return interleaved_;
}
inline void Vector32::set_interleaved(bool value) {
  
  interleaved_ = value;
  // @@protoc_insertion_point(field_set:Messages.Vector32.interleaved)
}

// .Messages.Revision revision = 4;
inline bool Vector32::has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline void Vector32::clear_revision() {
  if (GetArenaNoVirtual() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
inline const ::Messages::Revision& Vector32::revision() const {
  const ::Messages::Revision* p = revision_;
  // @@protoc_insertion_point(field_get:Messages.Vector32.revision)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Revision*>(
      &::Messages::_Revision_default_instance_);
}
inline ::Messages::Revision* Vector32::release_revision() {
  // @@protoc_insertion_point(field_release:Messages.Vector32.revision)
  
  ::Messages::Revision* temp = revision_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  revision_ = nullptr;
  return temp;
}
inline ::Messages::Revision* Vector32::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Vector32.revision)
  
  ::Messages::Revision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::Messages::Revision* Vector32::mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Revision>(GetArenaNoVirtual());
    revision_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Vector32.revision)
  return revision_;
}
inline void Vector32::set_allocated_revision(::Messages::Revision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete revision_;
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(revision);
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:Messages.Vector32.revision)
}

// string units = 5;
inline void Vector32::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Vector32::units() const {
  // @@protoc_insertion_point(field_get:Messages.Vector32.units)
  return units_.Get();
}
inline void Vector32::set_units(const std::string& value) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:Messages.Vector32.units)
}
inline void Vector32::set_units(std::string&& value) {
  
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Vector32.units)
}
inline void Vector32::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:Messages.Vector32.units)
}
inline void Vector32::set_units(const char* value,
    size_t size) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:Messages.Vector32.units)
}
inline std::string* Vector32::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Vector32.units)
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Vector32::release_units() {
  // @@protoc_insertion_point(field_release:Messages.Vector32.units)
  
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Vector32::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:Messages.Vector32.units)
}
inline std::string* Vector32::unsafe_arena_release_units() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Vector32.units)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return units_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Vector32::unsafe_arena_set_allocated_units(
    std::string* units) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (units != nullptr) {
    
  } else {
    
  }
  units_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      units, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Vector32.units)
}

// repeated float values = 10 [packed = true];
inline int Vector32::values_size() const {
  return values_.size();
}
inline void Vector32::clear_values() {
  values_.Clear();
}
inline float Vector32::values(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Vector32.values)
  return values_.Get(index);
}
inline void Vector32::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Vector32.values)
}
inline void Vector32::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Vector32.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Vector32::values() const {
  // @@protoc_insertion_point(field_list:Messages.Vector32.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Vector32::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Vector32.values)
  return &values_;
}

// -------------------------------------------------------------------

// Vector64

// string name = 1;
inline void Vector64::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Vector64::name() const {
  // @@protoc_insertion_point(field_get:Messages.Vector64.name)
  return name_.Get();
}
inline void Vector64::set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:Messages.Vector64.name)
}
inline void Vector64::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Vector64.name)
}
inline void Vector64::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:Messages.Vector64.name)
}
inline void Vector64::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:Messages.Vector64.name)
}
inline std::string* Vector64::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Vector64.name)
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Vector64::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Vector64.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Vector64::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:Messages.Vector64.name)
}
inline std::string* Vector64::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Vector64.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Vector64::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Vector64.name)
}

// int32 components = 2;
inline void Vector64::clear_components() {
  components_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vector64::components() const {
  // @@protoc_insertion_point(field_get:Messages.Vector64.components)
  return components_;
}
inline void Vector64::set_components(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  components_ = value;
  // @@protoc_insertion_point(field_set:Messages.Vector64.components)
}

// bool interleaved = 3;
inline void Vector64::clear_interleaved() {
  interleaved_ = false;
}
inline bool Vector64::interleaved() const {
  // @@protoc_insertion_point(field_get:Messages.Vector64.interleaved)
  return interleaved_;
}
inline void Vector64::set_interleaved(bool value) {
  
  interleaved_ = value;
  // @@protoc_insertion_point(field_set:Messages.Vector64.interleaved)
}

// .Messages.Revision revision = 4;
inline bool Vector64::has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline void Vector64::clear_revision() {
  if (GetArenaNoVirtual() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
inline const ::Messages::Revision& Vector64::revision() const {
  const ::Messages::Revision* p = revision_;
  // @@protoc_insertion_point(field_get:Messages.Vector64.revision)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Revision*>(
      &::Messages::_Revision_default_instance_);
}
inline ::Messages::Revision* Vector64::release_revision() {
  // @@protoc_insertion_point(field_release:Messages.Vector64.revision)
  
  ::Messages::Revision* temp = revision_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  revision_ = nullptr;
  return temp;
}
inline ::Messages::Revision* Vector64::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Vector64.revision)
  
  ::Messages::Revision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::Messages::Revision* Vector64::mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Revision>(GetArenaNoVirtual());
    revision_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Vector64.revision)
  return revision_;
}
inline void Vector64::set_allocated_revision(::Messages::Revision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete revision_;
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(revision);
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:Messages.Vector64.revision)
}

// string units = 5;
inline void Vector64::clear_units() {
  units_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Vector64::units() const {
  // @@protoc_insertion_point(field_get:Messages.Vector64.units)
  return units_.Get();
}
inline void Vector64::set_units(const std::string& value) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:Messages.Vector64.units)
}
inline void Vector64::set_units(std::string&& value) {
  
  units_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Vector64.units)
}
inline void Vector64::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:Messages.Vector64.units)
}
inline void Vector64::set_units(const char* value,
    size_t size) {
  
  units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:Messages.Vector64.units)
}
inline std::string* Vector64::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Vector64.units)
  return units_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Vector64::release_units() {
  // @@protoc_insertion_point(field_release:Messages.Vector64.units)
  
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Vector64::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:Messages.Vector64.units)
}
inline std::string* Vector64::unsafe_arena_release_units() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Vector64.units)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return units_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Vector64::unsafe_arena_set_allocated_units(
    std::string* units) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (units != nullptr) {
    
  } else {
    
  }
  units_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      units, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Vector64.units)
}

// repeated double values = 10 [packed = true];
inline int Vector64::values_size() const {
  return values_.size();
}
inline void Vector64::clear_values() {
  values_.Clear();
}
inline double Vector64::values(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Vector64.values)
  return values_.Get(index);
}
inline void Vector64::set_values(int index, double value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Vector64.values)
}
inline void Vector64::add_values(double value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Vector64.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vector64::values() const {
  // @@protoc_insertion_point(field_list:Messages.Vector64.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vector64::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Vector64.values)
  return &values_;
}

// -------------------------------------------------------------------

// Indices

// string name = 1;
inline void Indices::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Indices::name() const {
  // @@protoc_insertion_point(field_get:Messages.Indices.name)
  return name_.Get();
}
inline void Indices::set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:Messages.Indices.name)
}
inline void Indices::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Indices.name)
}
inline void Indices::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:Messages.Indices.name)
}
inline void Indices::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:Messages.Indices.name)
}
inline std::string* Indices::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Indices.name)
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Indices::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Indices.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Indices::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:Messages.Indices.name)
}
inline std::string* Indices::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Indices.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Indices::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Indices.name)
}

// repeated int32 values = 2 [packed = true];
inline int Indices::values_size() const {
  return values_.size();
}
inline void Indices::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Indices::values(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Indices.values)
  return values_.Get(index);
}
inline void Indices::set_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Indices.values)
}
inline void Indices::add_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Indices.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Indices::values() const {
  // @@protoc_insertion_point(field_list:Messages.Indices.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Indices::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Indices.values)
  return &values_;
}

// -------------------------------------------------------------------

// Elements

// repeated int32 indices = 1 [packed = true];
inline int Elements::indices_size() const {
  return indices_.size();
}
inline void Elements::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Elements::indices(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.indices)
  return indices_.Get(index);
}
inline void Elements::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.indices)
}
inline void Elements::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Elements::indices() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.indices)
  return indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Elements::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.indices)
  return &indices_;
}

// repeated int32 strides = 2 [packed = true];
inline int Elements::strides_size() const {
  return strides_.size();
}
inline void Elements::clear_strides() {
  strides_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Elements::strides(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.strides)
  return strides_.Get(index);
}
inline void Elements::set_strides(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  strides_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.strides)
}
inline void Elements::add_strides(::PROTOBUF_NAMESPACE_ID::int32 value) {
  strides_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.strides)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Elements::strides() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.strides)
  return strides_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Elements::mutable_strides() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.strides)
  return &strides_;
}

// repeated int32 offsets = 3 [packed = true];
inline int Elements::offsets_size() const {
  return offsets_.size();
}
inline void Elements::clear_offsets() {
  offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Elements::offsets(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.offsets)
  return offsets_.Get(index);
}
inline void Elements::set_offsets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.offsets)
}
inline void Elements::add_offsets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  offsets_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Elements::offsets() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.offsets)
  return offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Elements::mutable_offsets() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.offsets)
  return &offsets_;
}

// repeated int32 types = 4 [packed = true];
inline int Elements::types_size() const {
  return types_.size();
}
inline void Elements::clear_types() {
  types_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Elements::types(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.types)
  return types_.Get(index);
}
inline void Elements::set_types(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.types)
}
inline void Elements::add_types(::PROTOBUF_NAMESPACE_ID::int32 value) {
  types_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Elements::types() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Elements::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.types)
  return &types_;
}

// repeated int32 ids = 5 [packed = true];
inline int Elements::ids_size() const {
  return ids_.size();
}
inline void Elements::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Elements::ids(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.ids)
  return ids_.Get(index);
}
inline void Elements::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.ids)
}
inline void Elements::add_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Elements::ids() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Elements::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.ids)
  return &ids_;
}

// repeated int32 id_offsets = 6 [packed = true];
inline int Elements::id_offsets_size() const {
  return id_offsets_.size();
}
inline void Elements::clear_id_offsets() {
  id_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Elements::id_offsets(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.id_offsets)
  return id_offsets_.Get(index);
}
inline void Elements::set_id_offsets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  id_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.id_offsets)
}
inline void Elements::add_id_offsets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  id_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.id_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Elements::id_offsets() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.id_offsets)
  return id_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Elements::mutable_id_offsets() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.id_offsets)
  return &id_offsets_;
}

// repeated int32 num_elements_with_id = 7 [packed = true];
inline int Elements::num_elements_with_id_size() const {
  return num_elements_with_id_.size();
}
inline void Elements::clear_num_elements_with_id() {
  num_elements_with_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Elements::num_elements_with_id(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.num_elements_with_id)
  return num_elements_with_id_.Get(index);
}
inline void Elements::set_num_elements_with_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  num_elements_with_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.num_elements_with_id)
}
inline void Elements::add_num_elements_with_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  num_elements_with_id_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.num_elements_with_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Elements::num_elements_with_id() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.num_elements_with_id)
  return num_elements_with_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Elements::mutable_num_elements_with_id() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.num_elements_with_id)
  return &num_elements_with_id_;
}

// repeated int32 id_to_index = 8 [packed = true];
inline int Elements::id_to_index_size() const {
  return id_to_index_.size();
}
inline void Elements::clear_id_to_index() {
  id_to_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Elements::id_to_index(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.id_to_index)
  return id_to_index_.Get(index);
}
inline void Elements::set_id_to_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  id_to_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.id_to_index)
}
inline void Elements::add_id_to_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  id_to_index_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.id_to_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Elements::id_to_index() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.id_to_index)
  return id_to_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Elements::mutable_id_to_index() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.id_to_index)
  return &id_to_index_;
}

// repeated double centers = 10 [packed = true];
inline int Elements::centers_size() const {
  return centers_.size();
}
inline void Elements::clear_centers() {
  centers_.Clear();
}
inline double Elements::centers(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.centers)
  return centers_.Get(index);
}
inline void Elements::set_centers(int index, double value) {
  centers_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.centers)
}
inline void Elements::add_centers(double value) {
  centers_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.centers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Elements::centers() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.centers)
  return centers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Elements::mutable_centers() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.centers)
  return &centers_;
}

// repeated double lengths = 11 [packed = true];
inline int Elements::lengths_size() const {
  return lengths_.size();
}
inline void Elements::clear_lengths() {
  lengths_.Clear();
}
inline double Elements::lengths(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.lengths)
  return lengths_.Get(index);
}
inline void Elements::set_lengths(int index, double value) {
  lengths_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.lengths)
}
inline void Elements::add_lengths(double value) {
  lengths_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.lengths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Elements::lengths() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.lengths)
  return lengths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Elements::mutable_lengths() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.lengths)
  return &lengths_;
}

// repeated double areas = 12 [packed = true];
inline int Elements::areas_size() const {
  return areas_.size();
}
inline void Elements::clear_areas() {
  areas_.Clear();
}
inline double Elements::areas(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.areas)
  return areas_.Get(index);
}
inline void Elements::set_areas(int index, double value) {
  areas_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.areas)
}
inline void Elements::add_areas(double value) {
  areas_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.areas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Elements::areas() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.areas)
  return areas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Elements::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.areas)
  return &areas_;
}

// repeated double volumes = 13 [packed = true];
inline int Elements::volumes_size() const {
  return volumes_.size();
}
inline void Elements::clear_volumes() {
  volumes_.Clear();
}
inline double Elements::volumes(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Elements.volumes)
  return volumes_.Get(index);
}
inline void Elements::set_volumes(int index, double value) {
  volumes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Elements.volumes)
}
inline void Elements::add_volumes(double value) {
  volumes_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Elements.volumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Elements::volumes() const {
  // @@protoc_insertion_point(field_list:Messages.Elements.volumes)
  return volumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Elements::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Elements.volumes)
  return &volumes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vector_2eproto
