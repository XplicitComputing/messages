// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
#include "spatial.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_meta_2eproto;
namespace Messages {
class GraphicsControl;
class GraphicsControlDefaultTypeInternal;
extern GraphicsControlDefaultTypeInternal _GraphicsControl_default_instance_;
class Meta;
class MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
class Representation;
class RepresentationDefaultTypeInternal;
extern RepresentationDefaultTypeInternal _Representation_default_instance_;
class SliceControl;
class SliceControlDefaultTypeInternal;
extern SliceControlDefaultTypeInternal _SliceControl_default_instance_;
class TracersControl;
class TracersControlDefaultTypeInternal;
extern TracersControlDefaultTypeInternal _TracersControl_default_instance_;
class Visual;
class VisualDefaultTypeInternal;
extern VisualDefaultTypeInternal _Visual_default_instance_;
}  // namespace Messages
PROTOBUF_NAMESPACE_OPEN
template<> ::Messages::GraphicsControl* Arena::CreateMaybeMessage<::Messages::GraphicsControl>(Arena*);
template<> ::Messages::Meta* Arena::CreateMaybeMessage<::Messages::Meta>(Arena*);
template<> ::Messages::Representation* Arena::CreateMaybeMessage<::Messages::Representation>(Arena*);
template<> ::Messages::SliceControl* Arena::CreateMaybeMessage<::Messages::SliceControl>(Arena*);
template<> ::Messages::TracersControl* Arena::CreateMaybeMessage<::Messages::TracersControl>(Arena*);
template<> ::Messages::Visual* Arena::CreateMaybeMessage<::Messages::Visual>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Messages {

// ===================================================================

class Representation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Representation) */ {
 public:
  Representation();
  virtual ~Representation();

  Representation(const Representation& from);
  Representation(Representation&& from) noexcept
    : Representation() {
    *this = ::std::move(from);
  }

  inline Representation& operator=(const Representation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Representation& operator=(Representation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Representation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Representation* internal_default_instance() {
    return reinterpret_cast<const Representation*>(
               &_Representation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Representation* other);
  friend void swap(Representation& a, Representation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Representation* New() const final {
    return CreateMaybeMessage<Representation>(nullptr);
  }

  Representation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Representation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Representation& from);
  void MergeFrom(const Representation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Representation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Representation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_2eproto);
    return ::descriptor_table_meta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float range = 10;
  int range_size() const;
  void clear_range();
  static const int kRangeFieldNumber = 10;
  float range(int index) const;
  void set_range(int index, float value);
  void add_range(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_range();

  // repeated float displacement_scale = 11;
  int displacement_scale_size() const;
  void clear_displacement_scale();
  static const int kDisplacementScaleFieldNumber = 11;
  float displacement_scale(int index) const;
  void set_displacement_scale(int index, float value);
  void add_displacement_scale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      displacement_scale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_displacement_scale();

  // string property_key = 1;
  void clear_property_key();
  static const int kPropertyKeyFieldNumber = 1;
  const std::string& property_key() const;
  void set_property_key(const std::string& value);
  void set_property_key(std::string&& value);
  void set_property_key(const char* value);
  void set_property_key(const char* value, size_t size);
  std::string* mutable_property_key();
  std::string* release_property_key();
  void set_allocated_property_key(std::string* property_key);

  // int32 color_map = 2;
  void clear_color_map();
  static const int kColorMapFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 color_map() const;
  void set_color_map(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 component = 3;
  void clear_component();
  static const int kComponentFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 component() const;
  void set_component(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool auto_range = 4;
  void clear_auto_range();
  static const int kAutoRangeFieldNumber = 4;
  bool auto_range() const;
  void set_auto_range(bool value);

  // bool use_default_key = 5;
  void clear_use_default_key();
  static const int kUseDefaultKeyFieldNumber = 5;
  bool use_default_key() const;
  void set_use_default_key(bool value);

  // bool color_out_of_range = 6;
  void clear_color_out_of_range();
  static const int kColorOutOfRangeFieldNumber = 6;
  bool color_out_of_range() const;
  void set_color_out_of_range(bool value);

  // bool use_magnitude = 7;
  void clear_use_magnitude();
  static const int kUseMagnitudeFieldNumber = 7;
  bool use_magnitude() const;
  void set_use_magnitude(bool value);

  // bool show_displacement = 8;
  void clear_show_displacement();
  static const int kShowDisplacementFieldNumber = 8;
  bool show_displacement() const;
  void set_show_displacement(bool value);

  // @@protoc_insertion_point(class_scope:Messages.Representation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > range_;
  mutable std::atomic<int> _range_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > displacement_scale_;
  mutable std::atomic<int> _displacement_scale_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_map_;
  ::PROTOBUF_NAMESPACE_ID::int32 component_;
  bool auto_range_;
  bool use_default_key_;
  bool color_out_of_range_;
  bool use_magnitude_;
  bool show_displacement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_2eproto;
};
// -------------------------------------------------------------------

class Visual :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Visual) */ {
 public:
  Visual();
  virtual ~Visual();

  Visual(const Visual& from);
  Visual(Visual&& from) noexcept
    : Visual() {
    *this = ::std::move(from);
  }

  inline Visual& operator=(const Visual& from) {
    CopyFrom(from);
    return *this;
  }
  inline Visual& operator=(Visual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Visual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visual* internal_default_instance() {
    return reinterpret_cast<const Visual*>(
               &_Visual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Visual* other);
  friend void swap(Visual& a, Visual& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Visual* New() const final {
    return CreateMaybeMessage<Visual>(nullptr);
  }

  Visual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Visual>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Visual& from);
  void MergeFrom(const Visual& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visual* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Visual";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_2eproto);
    return ::descriptor_table_meta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 points = 4;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 points(int index) const;
  void set_points(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_points();

  // repeated int32 lines = 5;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 lines(int index) const;
  void set_lines(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_lines(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      lines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_lines();

  // repeated int32 triangles = 6;
  int triangles_size() const;
  void clear_triangles();
  static const int kTrianglesFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 triangles(int index) const;
  void set_triangles(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_triangles(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      triangles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_triangles();

  // repeated int32 indices_per_element = 8;
  int indices_per_element_size() const;
  void clear_indices_per_element();
  static const int kIndicesPerElementFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 indices_per_element(int index) const;
  void set_indices_per_element(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices_per_element(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices_per_element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices_per_element();

  // repeated int32 elements_to_indices = 9;
  int elements_to_indices_size() const;
  void clear_elements_to_indices();
  static const int kElementsToIndicesFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 elements_to_indices(int index) const;
  void set_elements_to_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_elements_to_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      elements_to_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_elements_to_indices();

  // repeated int32 indices_to_elements = 10;
  int indices_to_elements_size() const;
  void clear_indices_to_elements();
  static const int kIndicesToElementsFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 indices_to_elements(int index) const;
  void set_indices_to_elements(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices_to_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices_to_elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices_to_elements();

  // .Messages.Zone region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::Messages::Zone& region() const;
  ::Messages::Zone* release_region();
  ::Messages::Zone* mutable_region();
  void set_allocated_region(::Messages::Zone* region);

  // .Messages.Representation representation = 2;
  bool has_representation() const;
  void clear_representation();
  static const int kRepresentationFieldNumber = 2;
  const ::Messages::Representation& representation() const;
  ::Messages::Representation* release_representation();
  ::Messages::Representation* mutable_representation();
  void set_allocated_representation(::Messages::Representation* representation);

  // int32 style = 3;
  void clear_style();
  static const int kStyleFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 style() const;
  void set_style(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Messages.Visual)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > points_;
  mutable std::atomic<int> _points_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > lines_;
  mutable std::atomic<int> _lines_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > triangles_;
  mutable std::atomic<int> _triangles_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_per_element_;
  mutable std::atomic<int> _indices_per_element_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > elements_to_indices_;
  mutable std::atomic<int> _elements_to_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_to_elements_;
  mutable std::atomic<int> _indices_to_elements_cached_byte_size_;
  ::Messages::Zone* region_;
  ::Messages::Representation* representation_;
  ::PROTOBUF_NAMESPACE_ID::int32 style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_2eproto;
};
// -------------------------------------------------------------------

class GraphicsControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.GraphicsControl) */ {
 public:
  GraphicsControl();
  virtual ~GraphicsControl();

  GraphicsControl(const GraphicsControl& from);
  GraphicsControl(GraphicsControl&& from) noexcept
    : GraphicsControl() {
    *this = ::std::move(from);
  }

  inline GraphicsControl& operator=(const GraphicsControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphicsControl& operator=(GraphicsControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphicsControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphicsControl* internal_default_instance() {
    return reinterpret_cast<const GraphicsControl*>(
               &_GraphicsControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GraphicsControl* other);
  friend void swap(GraphicsControl& a, GraphicsControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphicsControl* New() const final {
    return CreateMaybeMessage<GraphicsControl>(nullptr);
  }

  GraphicsControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphicsControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphicsControl& from);
  void MergeFrom(const GraphicsControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphicsControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.GraphicsControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_2eproto);
    return ::descriptor_table_meta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float color = 4;
  int color_size() const;
  void clear_color();
  static const int kColorFieldNumber = 4;
  float color(int index) const;
  void set_color(int index, float value);
  void add_color(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      color() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_color();

  // int32 style = 1;
  void clear_style();
  static const int kStyleFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 style() const;
  void set_style(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 encoding = 2;
  void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 encoding() const;
  void set_encoding(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float alpha = 5;
  void clear_alpha();
  static const int kAlphaFieldNumber = 5;
  float alpha() const;
  void set_alpha(float value);

  // float point_width = 6;
  void clear_point_width();
  static const int kPointWidthFieldNumber = 6;
  float point_width() const;
  void set_point_width(float value);

  // float line_width = 7;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 7;
  float line_width() const;
  void set_line_width(float value);

  // bool visible = 10;
  void clear_visible();
  static const int kVisibleFieldNumber = 10;
  bool visible() const;
  void set_visible(bool value);

  // bool overlay = 11;
  void clear_overlay();
  static const int kOverlayFieldNumber = 11;
  bool overlay() const;
  void set_overlay(bool value);

  // @@protoc_insertion_point(class_scope:Messages.GraphicsControl)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > color_;
  mutable std::atomic<int> _color_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 style_;
  ::PROTOBUF_NAMESPACE_ID::int32 encoding_;
  float alpha_;
  float point_width_;
  float line_width_;
  bool visible_;
  bool overlay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_2eproto;
};
// -------------------------------------------------------------------

class SliceControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.SliceControl) */ {
 public:
  SliceControl();
  virtual ~SliceControl();

  SliceControl(const SliceControl& from);
  SliceControl(SliceControl&& from) noexcept
    : SliceControl() {
    *this = ::std::move(from);
  }

  inline SliceControl& operator=(const SliceControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceControl& operator=(SliceControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SliceControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SliceControl* internal_default_instance() {
    return reinterpret_cast<const SliceControl*>(
               &_SliceControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SliceControl* other);
  friend void swap(SliceControl& a, SliceControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SliceControl* New() const final {
    return CreateMaybeMessage<SliceControl>(nullptr);
  }

  SliceControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SliceControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SliceControl& from);
  void MergeFrom(const SliceControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.SliceControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_2eproto);
    return ::descriptor_table_meta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double center = 8;
  int center_size() const;
  void clear_center();
  static const int kCenterFieldNumber = 8;
  double center(int index) const;
  void set_center(int index, double value);
  void add_center(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      center() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_center();

  // repeated double normal = 9;
  int normal_size() const;
  void clear_normal();
  static const int kNormalFieldNumber = 9;
  double normal(int index) const;
  void set_normal(int index, double value);
  void add_normal(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      normal() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_normal();

  // .Messages.Visual visual = 1;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 1;
  const ::Messages::Visual& visual() const;
  ::Messages::Visual* release_visual();
  ::Messages::Visual* mutable_visual();
  void set_allocated_visual(::Messages::Visual* visual);

  // bool intersect = 3;
  void clear_intersect();
  static const int kIntersectFieldNumber = 3;
  bool intersect() const;
  void set_intersect(bool value);

  // bool negative = 4;
  void clear_negative();
  static const int kNegativeFieldNumber = 4;
  bool negative() const;
  void set_negative(bool value);

  // bool positive = 5;
  void clear_positive();
  static const int kPositiveFieldNumber = 5;
  bool positive() const;
  void set_positive(bool value);

  // @@protoc_insertion_point(class_scope:Messages.SliceControl)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > center_;
  mutable std::atomic<int> _center_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > normal_;
  mutable std::atomic<int> _normal_cached_byte_size_;
  ::Messages::Visual* visual_;
  bool intersect_;
  bool negative_;
  bool positive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_2eproto;
};
// -------------------------------------------------------------------

class TracersControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.TracersControl) */ {
 public:
  TracersControl();
  virtual ~TracersControl();

  TracersControl(const TracersControl& from);
  TracersControl(TracersControl&& from) noexcept
    : TracersControl() {
    *this = ::std::move(from);
  }

  inline TracersControl& operator=(const TracersControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracersControl& operator=(TracersControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TracersControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracersControl* internal_default_instance() {
    return reinterpret_cast<const TracersControl*>(
               &_TracersControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TracersControl* other);
  friend void swap(TracersControl& a, TracersControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TracersControl* New() const final {
    return CreateMaybeMessage<TracersControl>(nullptr);
  }

  TracersControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracersControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TracersControl& from);
  void MergeFrom(const TracersControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracersControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.TracersControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_2eproto);
    return ::descriptor_table_meta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 spawn_region = 5;
  int spawn_region_size() const;
  void clear_spawn_region();
  static const int kSpawnRegionFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 spawn_region(int index) const;
  void set_spawn_region(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_spawn_region(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      spawn_region() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_spawn_region();

  // repeated int32 regen_region = 6;
  int regen_region_size() const;
  void clear_regen_region();
  static const int kRegenRegionFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 regen_region(int index) const;
  void set_regen_region(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_regen_region(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      regen_region() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_regen_region();

  // repeated float user_defined_positions = 8;
  int user_defined_positions_size() const;
  void clear_user_defined_positions();
  static const int kUserDefinedPositionsFieldNumber = 8;
  float user_defined_positions(int index) const;
  void set_user_defined_positions(int index, float value);
  void add_user_defined_positions(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      user_defined_positions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_user_defined_positions();

  // .Messages.Visual visual = 1;
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 1;
  const ::Messages::Visual& visual() const;
  ::Messages::Visual* release_visual();
  ::Messages::Visual* mutable_visual();
  void set_allocated_visual(::Messages::Visual* visual);

  // int64 particle_count = 3;
  void clear_particle_count();
  static const int kParticleCountFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 particle_count() const;
  void set_particle_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 seed = 4;
  void clear_seed();
  static const int kSeedFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 seed() const;
  void set_seed(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Messages.TracersControl)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > spawn_region_;
  mutable std::atomic<int> _spawn_region_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > regen_region_;
  mutable std::atomic<int> _regen_region_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > user_defined_positions_;
  mutable std::atomic<int> _user_defined_positions_cached_byte_size_;
  ::Messages::Visual* visual_;
  ::PROTOBUF_NAMESPACE_ID::int64 particle_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_2eproto;
};
// -------------------------------------------------------------------

class Meta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Meta) */ {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meta& operator=(Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Meta* other);
  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Meta* New() const final {
    return CreateMaybeMessage<Meta>(nullptr);
  }

  Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Meta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_meta_2eproto);
    return ::descriptor_table_meta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 children = 25;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::int64 children(int index) const;
  void set_children(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_children(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_children();

  // repeated int32 groups = 26;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::int32 groups(int index) const;
  void set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_groups(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_groups();

  // repeated int32 loops = 27;
  int loops_size() const;
  void clear_loops();
  static const int kLoopsFieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::int32 loops(int index) const;
  void set_loops(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_loops(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      loops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_loops();

  // repeated int32 surfaces = 28;
  int surfaces_size() const;
  void clear_surfaces();
  static const int kSurfacesFieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::int32 surfaces(int index) const;
  void set_surfaces(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_surfaces(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      surfaces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_surfaces();

  // repeated int32 volumes = 29;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::int32 volumes(int index) const;
  void set_volumes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_volumes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_volumes();

  // repeated double model_transform = 30;
  int model_transform_size() const;
  void clear_model_transform();
  static const int kModelTransformFieldNumber = 30;
  double model_transform(int index) const;
  void set_model_transform(int index, double value);
  void add_model_transform(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      model_transform() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_model_transform();

  // repeated string properties = 31;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 31;
  const std::string& properties(int index) const;
  std::string* mutable_properties(int index);
  void set_properties(int index, const std::string& value);
  void set_properties(int index, std::string&& value);
  void set_properties(int index, const char* value);
  void set_properties(int index, const char* value, size_t size);
  std::string* add_properties();
  void add_properties(const std::string& value);
  void add_properties(std::string&& value);
  void add_properties(const char* value);
  void add_properties(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& properties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_properties();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string icon = 2;
  void clear_icon();
  static const int kIconFieldNumber = 2;
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);

  // string owner = 3;
  void clear_owner();
  static const int kOwnerFieldNumber = 3;
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);

  // string comments = 4;
  void clear_comments();
  static const int kCommentsFieldNumber = 4;
  const std::string& comments() const;
  void set_comments(const std::string& value);
  void set_comments(std::string&& value);
  void set_comments(const char* value);
  void set_comments(const char* value, size_t size);
  std::string* mutable_comments();
  std::string* release_comments();
  void set_allocated_comments(std::string* comments);

  // string series = 5;
  void clear_series();
  static const int kSeriesFieldNumber = 5;
  const std::string& series() const;
  void set_series(const std::string& value);
  void set_series(std::string&& value);
  void set_series(const char* value);
  void set_series(const char* value, size_t size);
  std::string* mutable_series();
  std::string* release_series();
  void set_allocated_series(std::string* series);

  // string sys_info = 6;
  void clear_sys_info();
  static const int kSysInfoFieldNumber = 6;
  const std::string& sys_info() const;
  void set_sys_info(const std::string& value);
  void set_sys_info(std::string&& value);
  void set_sys_info(const char* value);
  void set_sys_info(const char* value, size_t size);
  std::string* mutable_sys_info();
  std::string* release_sys_info();
  void set_allocated_sys_info(std::string* sys_info);

  // string geom_info = 7;
  void clear_geom_info();
  static const int kGeomInfoFieldNumber = 7;
  const std::string& geom_info() const;
  void set_geom_info(const std::string& value);
  void set_geom_info(std::string&& value);
  void set_geom_info(const char* value);
  void set_geom_info(const char* value, size_t size);
  std::string* mutable_geom_info();
  std::string* release_geom_info();
  void set_allocated_geom_info(std::string* geom_info);

  // string directory = 8;
  void clear_directory();
  static const int kDirectoryFieldNumber = 8;
  const std::string& directory() const;
  void set_directory(const std::string& value);
  void set_directory(std::string&& value);
  void set_directory(const char* value);
  void set_directory(const char* value, size_t size);
  std::string* mutable_directory();
  std::string* release_directory();
  void set_allocated_directory(std::string* directory);

  // .Messages.Revision revision = 20;
  bool has_revision() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 20;
  const ::Messages::Revision& revision() const;
  ::Messages::Revision* release_revision();
  ::Messages::Revision* mutable_revision();
  void set_allocated_revision(::Messages::Revision* revision);

  // .Messages.Revision version = 21;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 21;
  const ::Messages::Revision& version() const;
  ::Messages::Revision* release_version();
  ::Messages::Revision* mutable_version();
  void set_allocated_version(::Messages::Revision* version);

  // .Messages.Extrema bounds = 22;
  bool has_bounds() const;
  void clear_bounds();
  static const int kBoundsFieldNumber = 22;
  const ::Messages::Extrema& bounds() const;
  ::Messages::Extrema* release_bounds();
  ::Messages::Extrema* mutable_bounds();
  void set_allocated_bounds(::Messages::Extrema* bounds);

  // .Messages.GraphicsControl appearance = 24;
  bool has_appearance() const;
  void clear_appearance();
  static const int kAppearanceFieldNumber = 24;
  const ::Messages::GraphicsControl& appearance() const;
  ::Messages::GraphicsControl* release_appearance();
  ::Messages::GraphicsControl* mutable_appearance();
  void set_allocated_appearance(::Messages::GraphicsControl* appearance);

  // int64 uid = 9;
  void clear_uid();
  static const int kUidFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 parent = 10;
  void clear_parent();
  static const int kParentFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int64 parent() const;
  void set_parent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 created = 11;
  void clear_created();
  static const int kCreatedFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::int64 created() const;
  void set_created(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 saved = 12;
  void clear_saved();
  static const int kSavedFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int64 saved() const;
  void set_saved(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 modified = 13;
  void clear_modified();
  static const int kModifiedFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int64 modified() const;
  void set_modified(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 iteration = 14;
  void clear_iteration();
  static const int kIterationFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int64 iteration() const;
  void set_iteration(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 save_interval = 15;
  void clear_save_interval();
  static const int kSaveIntervalFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int64 save_interval() const;
  void set_save_interval(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool enabled = 16;
  void clear_enabled();
  static const int kEnabledFieldNumber = 16;
  bool enabled() const;
  void set_enabled(bool value);

  // bool locked = 17;
  void clear_locked();
  static const int kLockedFieldNumber = 17;
  bool locked() const;
  void set_locked(bool value);

  // bool auto_save = 18;
  void clear_auto_save();
  static const int kAutoSaveFieldNumber = 18;
  bool auto_save() const;
  void set_auto_save(bool value);

  // @@protoc_insertion_point(class_scope:Messages.Meta)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > children_;
  mutable std::atomic<int> _children_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > groups_;
  mutable std::atomic<int> _groups_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > loops_;
  mutable std::atomic<int> _loops_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > surfaces_;
  mutable std::atomic<int> _surfaces_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > volumes_;
  mutable std::atomic<int> _volumes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > model_transform_;
  mutable std::atomic<int> _model_transform_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr series_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sys_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geom_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
  ::Messages::Revision* revision_;
  ::Messages::Revision* version_;
  ::Messages::Extrema* bounds_;
  ::Messages::GraphicsControl* appearance_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 parent_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_;
  ::PROTOBUF_NAMESPACE_ID::int64 saved_;
  ::PROTOBUF_NAMESPACE_ID::int64 modified_;
  ::PROTOBUF_NAMESPACE_ID::int64 iteration_;
  ::PROTOBUF_NAMESPACE_ID::int64 save_interval_;
  bool enabled_;
  bool locked_;
  bool auto_save_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Representation

// string property_key = 1;
inline void Representation::clear_property_key() {
  property_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Representation::property_key() const {
  // @@protoc_insertion_point(field_get:Messages.Representation.property_key)
  return property_key_.GetNoArena();
}
inline void Representation::set_property_key(const std::string& value) {
  
  property_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Representation.property_key)
}
inline void Representation::set_property_key(std::string&& value) {
  
  property_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Representation.property_key)
}
inline void Representation::set_property_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  property_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Representation.property_key)
}
inline void Representation::set_property_key(const char* value, size_t size) {
  
  property_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Representation.property_key)
}
inline std::string* Representation::mutable_property_key() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Representation.property_key)
  return property_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Representation::release_property_key() {
  // @@protoc_insertion_point(field_release:Messages.Representation.property_key)
  
  return property_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Representation::set_allocated_property_key(std::string* property_key) {
  if (property_key != nullptr) {
    
  } else {
    
  }
  property_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_key);
  // @@protoc_insertion_point(field_set_allocated:Messages.Representation.property_key)
}

// int32 color_map = 2;
inline void Representation::clear_color_map() {
  color_map_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Representation::color_map() const {
  // @@protoc_insertion_point(field_get:Messages.Representation.color_map)
  return color_map_;
}
inline void Representation::set_color_map(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_map_ = value;
  // @@protoc_insertion_point(field_set:Messages.Representation.color_map)
}

// int32 component = 3;
inline void Representation::clear_component() {
  component_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Representation::component() const {
  // @@protoc_insertion_point(field_get:Messages.Representation.component)
  return component_;
}
inline void Representation::set_component(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  component_ = value;
  // @@protoc_insertion_point(field_set:Messages.Representation.component)
}

// bool auto_range = 4;
inline void Representation::clear_auto_range() {
  auto_range_ = false;
}
inline bool Representation::auto_range() const {
  // @@protoc_insertion_point(field_get:Messages.Representation.auto_range)
  return auto_range_;
}
inline void Representation::set_auto_range(bool value) {
  
  auto_range_ = value;
  // @@protoc_insertion_point(field_set:Messages.Representation.auto_range)
}

// bool use_default_key = 5;
inline void Representation::clear_use_default_key() {
  use_default_key_ = false;
}
inline bool Representation::use_default_key() const {
  // @@protoc_insertion_point(field_get:Messages.Representation.use_default_key)
  return use_default_key_;
}
inline void Representation::set_use_default_key(bool value) {
  
  use_default_key_ = value;
  // @@protoc_insertion_point(field_set:Messages.Representation.use_default_key)
}

// bool color_out_of_range = 6;
inline void Representation::clear_color_out_of_range() {
  color_out_of_range_ = false;
}
inline bool Representation::color_out_of_range() const {
  // @@protoc_insertion_point(field_get:Messages.Representation.color_out_of_range)
  return color_out_of_range_;
}
inline void Representation::set_color_out_of_range(bool value) {
  
  color_out_of_range_ = value;
  // @@protoc_insertion_point(field_set:Messages.Representation.color_out_of_range)
}

// bool use_magnitude = 7;
inline void Representation::clear_use_magnitude() {
  use_magnitude_ = false;
}
inline bool Representation::use_magnitude() const {
  // @@protoc_insertion_point(field_get:Messages.Representation.use_magnitude)
  return use_magnitude_;
}
inline void Representation::set_use_magnitude(bool value) {
  
  use_magnitude_ = value;
  // @@protoc_insertion_point(field_set:Messages.Representation.use_magnitude)
}

// bool show_displacement = 8;
inline void Representation::clear_show_displacement() {
  show_displacement_ = false;
}
inline bool Representation::show_displacement() const {
  // @@protoc_insertion_point(field_get:Messages.Representation.show_displacement)
  return show_displacement_;
}
inline void Representation::set_show_displacement(bool value) {
  
  show_displacement_ = value;
  // @@protoc_insertion_point(field_set:Messages.Representation.show_displacement)
}

// repeated float range = 10;
inline int Representation::range_size() const {
  return range_.size();
}
inline void Representation::clear_range() {
  range_.Clear();
}
inline float Representation::range(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Representation.range)
  return range_.Get(index);
}
inline void Representation::set_range(int index, float value) {
  range_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Representation.range)
}
inline void Representation::add_range(float value) {
  range_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Representation.range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Representation::range() const {
  // @@protoc_insertion_point(field_list:Messages.Representation.range)
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Representation::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Representation.range)
  return &range_;
}

// repeated float displacement_scale = 11;
inline int Representation::displacement_scale_size() const {
  return displacement_scale_.size();
}
inline void Representation::clear_displacement_scale() {
  displacement_scale_.Clear();
}
inline float Representation::displacement_scale(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Representation.displacement_scale)
  return displacement_scale_.Get(index);
}
inline void Representation::set_displacement_scale(int index, float value) {
  displacement_scale_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Representation.displacement_scale)
}
inline void Representation::add_displacement_scale(float value) {
  displacement_scale_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Representation.displacement_scale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Representation::displacement_scale() const {
  // @@protoc_insertion_point(field_list:Messages.Representation.displacement_scale)
  return displacement_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Representation::mutable_displacement_scale() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Representation.displacement_scale)
  return &displacement_scale_;
}

// -------------------------------------------------------------------

// Visual

// .Messages.Zone region = 1;
inline bool Visual::has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline const ::Messages::Zone& Visual::region() const {
  const ::Messages::Zone* p = region_;
  // @@protoc_insertion_point(field_get:Messages.Visual.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Zone*>(
      &::Messages::_Zone_default_instance_);
}
inline ::Messages::Zone* Visual::release_region() {
  // @@protoc_insertion_point(field_release:Messages.Visual.region)
  
  ::Messages::Zone* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::Messages::Zone* Visual::mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Zone>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Visual.region)
  return region_;
}
inline void Visual::set_allocated_region(::Messages::Zone* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:Messages.Visual.region)
}

// .Messages.Representation representation = 2;
inline bool Visual::has_representation() const {
  return this != internal_default_instance() && representation_ != nullptr;
}
inline void Visual::clear_representation() {
  if (GetArenaNoVirtual() == nullptr && representation_ != nullptr) {
    delete representation_;
  }
  representation_ = nullptr;
}
inline const ::Messages::Representation& Visual::representation() const {
  const ::Messages::Representation* p = representation_;
  // @@protoc_insertion_point(field_get:Messages.Visual.representation)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Representation*>(
      &::Messages::_Representation_default_instance_);
}
inline ::Messages::Representation* Visual::release_representation() {
  // @@protoc_insertion_point(field_release:Messages.Visual.representation)
  
  ::Messages::Representation* temp = representation_;
  representation_ = nullptr;
  return temp;
}
inline ::Messages::Representation* Visual::mutable_representation() {
  
  if (representation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Representation>(GetArenaNoVirtual());
    representation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Visual.representation)
  return representation_;
}
inline void Visual::set_allocated_representation(::Messages::Representation* representation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete representation_;
  }
  if (representation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      representation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, representation, submessage_arena);
    }
    
  } else {
    
  }
  representation_ = representation;
  // @@protoc_insertion_point(field_set_allocated:Messages.Visual.representation)
}

// int32 style = 3;
inline void Visual::clear_style() {
  style_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Visual::style() const {
  // @@protoc_insertion_point(field_get:Messages.Visual.style)
  return style_;
}
inline void Visual::set_style(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:Messages.Visual.style)
}

// repeated int32 points = 4;
inline int Visual::points_size() const {
  return points_.size();
}
inline void Visual::clear_points() {
  points_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Visual::points(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Visual.points)
  return points_.Get(index);
}
inline void Visual::set_points(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Visual.points)
}
inline void Visual::add_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  points_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Visual.points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Visual::points() const {
  // @@protoc_insertion_point(field_list:Messages.Visual.points)
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Visual::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Visual.points)
  return &points_;
}

// repeated int32 lines = 5;
inline int Visual::lines_size() const {
  return lines_.size();
}
inline void Visual::clear_lines() {
  lines_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Visual::lines(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Visual.lines)
  return lines_.Get(index);
}
inline void Visual::set_lines(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  lines_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Visual.lines)
}
inline void Visual::add_lines(::PROTOBUF_NAMESPACE_ID::int32 value) {
  lines_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Visual.lines)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Visual::lines() const {
  // @@protoc_insertion_point(field_list:Messages.Visual.lines)
  return lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Visual::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Visual.lines)
  return &lines_;
}

// repeated int32 triangles = 6;
inline int Visual::triangles_size() const {
  return triangles_.size();
}
inline void Visual::clear_triangles() {
  triangles_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Visual::triangles(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Visual.triangles)
  return triangles_.Get(index);
}
inline void Visual::set_triangles(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  triangles_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Visual.triangles)
}
inline void Visual::add_triangles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  triangles_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Visual.triangles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Visual::triangles() const {
  // @@protoc_insertion_point(field_list:Messages.Visual.triangles)
  return triangles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Visual::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Visual.triangles)
  return &triangles_;
}

// repeated int32 indices_per_element = 8;
inline int Visual::indices_per_element_size() const {
  return indices_per_element_.size();
}
inline void Visual::clear_indices_per_element() {
  indices_per_element_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Visual::indices_per_element(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Visual.indices_per_element)
  return indices_per_element_.Get(index);
}
inline void Visual::set_indices_per_element(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_per_element_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Visual.indices_per_element)
}
inline void Visual::add_indices_per_element(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_per_element_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Visual.indices_per_element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Visual::indices_per_element() const {
  // @@protoc_insertion_point(field_list:Messages.Visual.indices_per_element)
  return indices_per_element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Visual::mutable_indices_per_element() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Visual.indices_per_element)
  return &indices_per_element_;
}

// repeated int32 elements_to_indices = 9;
inline int Visual::elements_to_indices_size() const {
  return elements_to_indices_.size();
}
inline void Visual::clear_elements_to_indices() {
  elements_to_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Visual::elements_to_indices(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Visual.elements_to_indices)
  return elements_to_indices_.Get(index);
}
inline void Visual::set_elements_to_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  elements_to_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Visual.elements_to_indices)
}
inline void Visual::add_elements_to_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  elements_to_indices_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Visual.elements_to_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Visual::elements_to_indices() const {
  // @@protoc_insertion_point(field_list:Messages.Visual.elements_to_indices)
  return elements_to_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Visual::mutable_elements_to_indices() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Visual.elements_to_indices)
  return &elements_to_indices_;
}

// repeated int32 indices_to_elements = 10;
inline int Visual::indices_to_elements_size() const {
  return indices_to_elements_.size();
}
inline void Visual::clear_indices_to_elements() {
  indices_to_elements_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Visual::indices_to_elements(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Visual.indices_to_elements)
  return indices_to_elements_.Get(index);
}
inline void Visual::set_indices_to_elements(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_to_elements_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Visual.indices_to_elements)
}
inline void Visual::add_indices_to_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_to_elements_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Visual.indices_to_elements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Visual::indices_to_elements() const {
  // @@protoc_insertion_point(field_list:Messages.Visual.indices_to_elements)
  return indices_to_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Visual::mutable_indices_to_elements() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Visual.indices_to_elements)
  return &indices_to_elements_;
}

// -------------------------------------------------------------------

// GraphicsControl

// int32 style = 1;
inline void GraphicsControl::clear_style() {
  style_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphicsControl::style() const {
  // @@protoc_insertion_point(field_get:Messages.GraphicsControl.style)
  return style_;
}
inline void GraphicsControl::set_style(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  style_ = value;
  // @@protoc_insertion_point(field_set:Messages.GraphicsControl.style)
}

// int32 encoding = 2;
inline void GraphicsControl::clear_encoding() {
  encoding_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GraphicsControl::encoding() const {
  // @@protoc_insertion_point(field_get:Messages.GraphicsControl.encoding)
  return encoding_;
}
inline void GraphicsControl::set_encoding(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:Messages.GraphicsControl.encoding)
}

// repeated float color = 4;
inline int GraphicsControl::color_size() const {
  return color_.size();
}
inline void GraphicsControl::clear_color() {
  color_.Clear();
}
inline float GraphicsControl::color(int index) const {
  // @@protoc_insertion_point(field_get:Messages.GraphicsControl.color)
  return color_.Get(index);
}
inline void GraphicsControl::set_color(int index, float value) {
  color_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.GraphicsControl.color)
}
inline void GraphicsControl::add_color(float value) {
  color_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.GraphicsControl.color)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GraphicsControl::color() const {
  // @@protoc_insertion_point(field_list:Messages.GraphicsControl.color)
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GraphicsControl::mutable_color() {
  // @@protoc_insertion_point(field_mutable_list:Messages.GraphicsControl.color)
  return &color_;
}

// float alpha = 5;
inline void GraphicsControl::clear_alpha() {
  alpha_ = 0;
}
inline float GraphicsControl::alpha() const {
  // @@protoc_insertion_point(field_get:Messages.GraphicsControl.alpha)
  return alpha_;
}
inline void GraphicsControl::set_alpha(float value) {
  
  alpha_ = value;
  // @@protoc_insertion_point(field_set:Messages.GraphicsControl.alpha)
}

// float point_width = 6;
inline void GraphicsControl::clear_point_width() {
  point_width_ = 0;
}
inline float GraphicsControl::point_width() const {
  // @@protoc_insertion_point(field_get:Messages.GraphicsControl.point_width)
  return point_width_;
}
inline void GraphicsControl::set_point_width(float value) {
  
  point_width_ = value;
  // @@protoc_insertion_point(field_set:Messages.GraphicsControl.point_width)
}

// float line_width = 7;
inline void GraphicsControl::clear_line_width() {
  line_width_ = 0;
}
inline float GraphicsControl::line_width() const {
  // @@protoc_insertion_point(field_get:Messages.GraphicsControl.line_width)
  return line_width_;
}
inline void GraphicsControl::set_line_width(float value) {
  
  line_width_ = value;
  // @@protoc_insertion_point(field_set:Messages.GraphicsControl.line_width)
}

// bool visible = 10;
inline void GraphicsControl::clear_visible() {
  visible_ = false;
}
inline bool GraphicsControl::visible() const {
  // @@protoc_insertion_point(field_get:Messages.GraphicsControl.visible)
  return visible_;
}
inline void GraphicsControl::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:Messages.GraphicsControl.visible)
}

// bool overlay = 11;
inline void GraphicsControl::clear_overlay() {
  overlay_ = false;
}
inline bool GraphicsControl::overlay() const {
  // @@protoc_insertion_point(field_get:Messages.GraphicsControl.overlay)
  return overlay_;
}
inline void GraphicsControl::set_overlay(bool value) {
  
  overlay_ = value;
  // @@protoc_insertion_point(field_set:Messages.GraphicsControl.overlay)
}

// -------------------------------------------------------------------

// SliceControl

// .Messages.Visual visual = 1;
inline bool SliceControl::has_visual() const {
  return this != internal_default_instance() && visual_ != nullptr;
}
inline void SliceControl::clear_visual() {
  if (GetArenaNoVirtual() == nullptr && visual_ != nullptr) {
    delete visual_;
  }
  visual_ = nullptr;
}
inline const ::Messages::Visual& SliceControl::visual() const {
  const ::Messages::Visual* p = visual_;
  // @@protoc_insertion_point(field_get:Messages.SliceControl.visual)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Visual*>(
      &::Messages::_Visual_default_instance_);
}
inline ::Messages::Visual* SliceControl::release_visual() {
  // @@protoc_insertion_point(field_release:Messages.SliceControl.visual)
  
  ::Messages::Visual* temp = visual_;
  visual_ = nullptr;
  return temp;
}
inline ::Messages::Visual* SliceControl::mutable_visual() {
  
  if (visual_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Visual>(GetArenaNoVirtual());
    visual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.SliceControl.visual)
  return visual_;
}
inline void SliceControl::set_allocated_visual(::Messages::Visual* visual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visual_;
  }
  if (visual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visual, submessage_arena);
    }
    
  } else {
    
  }
  visual_ = visual;
  // @@protoc_insertion_point(field_set_allocated:Messages.SliceControl.visual)
}

// bool intersect = 3;
inline void SliceControl::clear_intersect() {
  intersect_ = false;
}
inline bool SliceControl::intersect() const {
  // @@protoc_insertion_point(field_get:Messages.SliceControl.intersect)
  return intersect_;
}
inline void SliceControl::set_intersect(bool value) {
  
  intersect_ = value;
  // @@protoc_insertion_point(field_set:Messages.SliceControl.intersect)
}

// bool negative = 4;
inline void SliceControl::clear_negative() {
  negative_ = false;
}
inline bool SliceControl::negative() const {
  // @@protoc_insertion_point(field_get:Messages.SliceControl.negative)
  return negative_;
}
inline void SliceControl::set_negative(bool value) {
  
  negative_ = value;
  // @@protoc_insertion_point(field_set:Messages.SliceControl.negative)
}

// bool positive = 5;
inline void SliceControl::clear_positive() {
  positive_ = false;
}
inline bool SliceControl::positive() const {
  // @@protoc_insertion_point(field_get:Messages.SliceControl.positive)
  return positive_;
}
inline void SliceControl::set_positive(bool value) {
  
  positive_ = value;
  // @@protoc_insertion_point(field_set:Messages.SliceControl.positive)
}

// repeated double center = 8;
inline int SliceControl::center_size() const {
  return center_.size();
}
inline void SliceControl::clear_center() {
  center_.Clear();
}
inline double SliceControl::center(int index) const {
  // @@protoc_insertion_point(field_get:Messages.SliceControl.center)
  return center_.Get(index);
}
inline void SliceControl::set_center(int index, double value) {
  center_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.SliceControl.center)
}
inline void SliceControl::add_center(double value) {
  center_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.SliceControl.center)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SliceControl::center() const {
  // @@protoc_insertion_point(field_list:Messages.SliceControl.center)
  return center_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SliceControl::mutable_center() {
  // @@protoc_insertion_point(field_mutable_list:Messages.SliceControl.center)
  return &center_;
}

// repeated double normal = 9;
inline int SliceControl::normal_size() const {
  return normal_.size();
}
inline void SliceControl::clear_normal() {
  normal_.Clear();
}
inline double SliceControl::normal(int index) const {
  // @@protoc_insertion_point(field_get:Messages.SliceControl.normal)
  return normal_.Get(index);
}
inline void SliceControl::set_normal(int index, double value) {
  normal_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.SliceControl.normal)
}
inline void SliceControl::add_normal(double value) {
  normal_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.SliceControl.normal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SliceControl::normal() const {
  // @@protoc_insertion_point(field_list:Messages.SliceControl.normal)
  return normal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SliceControl::mutable_normal() {
  // @@protoc_insertion_point(field_mutable_list:Messages.SliceControl.normal)
  return &normal_;
}

// -------------------------------------------------------------------

// TracersControl

// .Messages.Visual visual = 1;
inline bool TracersControl::has_visual() const {
  return this != internal_default_instance() && visual_ != nullptr;
}
inline void TracersControl::clear_visual() {
  if (GetArenaNoVirtual() == nullptr && visual_ != nullptr) {
    delete visual_;
  }
  visual_ = nullptr;
}
inline const ::Messages::Visual& TracersControl::visual() const {
  const ::Messages::Visual* p = visual_;
  // @@protoc_insertion_point(field_get:Messages.TracersControl.visual)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Visual*>(
      &::Messages::_Visual_default_instance_);
}
inline ::Messages::Visual* TracersControl::release_visual() {
  // @@protoc_insertion_point(field_release:Messages.TracersControl.visual)
  
  ::Messages::Visual* temp = visual_;
  visual_ = nullptr;
  return temp;
}
inline ::Messages::Visual* TracersControl::mutable_visual() {
  
  if (visual_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Visual>(GetArenaNoVirtual());
    visual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.TracersControl.visual)
  return visual_;
}
inline void TracersControl::set_allocated_visual(::Messages::Visual* visual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete visual_;
  }
  if (visual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      visual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visual, submessage_arena);
    }
    
  } else {
    
  }
  visual_ = visual;
  // @@protoc_insertion_point(field_set_allocated:Messages.TracersControl.visual)
}

// int64 particle_count = 3;
inline void TracersControl::clear_particle_count() {
  particle_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TracersControl::particle_count() const {
  // @@protoc_insertion_point(field_get:Messages.TracersControl.particle_count)
  return particle_count_;
}
inline void TracersControl::set_particle_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  particle_count_ = value;
  // @@protoc_insertion_point(field_set:Messages.TracersControl.particle_count)
}

// int64 seed = 4;
inline void TracersControl::clear_seed() {
  seed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TracersControl::seed() const {
  // @@protoc_insertion_point(field_get:Messages.TracersControl.seed)
  return seed_;
}
inline void TracersControl::set_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:Messages.TracersControl.seed)
}

// repeated int32 spawn_region = 5;
inline int TracersControl::spawn_region_size() const {
  return spawn_region_.size();
}
inline void TracersControl::clear_spawn_region() {
  spawn_region_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracersControl::spawn_region(int index) const {
  // @@protoc_insertion_point(field_get:Messages.TracersControl.spawn_region)
  return spawn_region_.Get(index);
}
inline void TracersControl::set_spawn_region(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  spawn_region_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.TracersControl.spawn_region)
}
inline void TracersControl::add_spawn_region(::PROTOBUF_NAMESPACE_ID::int32 value) {
  spawn_region_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.TracersControl.spawn_region)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TracersControl::spawn_region() const {
  // @@protoc_insertion_point(field_list:Messages.TracersControl.spawn_region)
  return spawn_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TracersControl::mutable_spawn_region() {
  // @@protoc_insertion_point(field_mutable_list:Messages.TracersControl.spawn_region)
  return &spawn_region_;
}

// repeated int32 regen_region = 6;
inline int TracersControl::regen_region_size() const {
  return regen_region_.size();
}
inline void TracersControl::clear_regen_region() {
  regen_region_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracersControl::regen_region(int index) const {
  // @@protoc_insertion_point(field_get:Messages.TracersControl.regen_region)
  return regen_region_.Get(index);
}
inline void TracersControl::set_regen_region(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  regen_region_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.TracersControl.regen_region)
}
inline void TracersControl::add_regen_region(::PROTOBUF_NAMESPACE_ID::int32 value) {
  regen_region_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.TracersControl.regen_region)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TracersControl::regen_region() const {
  // @@protoc_insertion_point(field_list:Messages.TracersControl.regen_region)
  return regen_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TracersControl::mutable_regen_region() {
  // @@protoc_insertion_point(field_mutable_list:Messages.TracersControl.regen_region)
  return &regen_region_;
}

// repeated float user_defined_positions = 8;
inline int TracersControl::user_defined_positions_size() const {
  return user_defined_positions_.size();
}
inline void TracersControl::clear_user_defined_positions() {
  user_defined_positions_.Clear();
}
inline float TracersControl::user_defined_positions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.TracersControl.user_defined_positions)
  return user_defined_positions_.Get(index);
}
inline void TracersControl::set_user_defined_positions(int index, float value) {
  user_defined_positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.TracersControl.user_defined_positions)
}
inline void TracersControl::add_user_defined_positions(float value) {
  user_defined_positions_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.TracersControl.user_defined_positions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TracersControl::user_defined_positions() const {
  // @@protoc_insertion_point(field_list:Messages.TracersControl.user_defined_positions)
  return user_defined_positions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TracersControl::mutable_user_defined_positions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.TracersControl.user_defined_positions)
  return &user_defined_positions_;
}

// -------------------------------------------------------------------

// Meta

// string name = 1;
inline void Meta::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Meta::name() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.name)
  return name_.GetNoArena();
}
inline void Meta::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Meta.name)
}
inline void Meta::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Meta.name)
}
inline void Meta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Meta.name)
}
inline void Meta::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.name)
}
inline std::string* Meta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Meta.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Meta::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Meta.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.name)
}

// string icon = 2;
inline void Meta::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Meta::icon() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.icon)
  return icon_.GetNoArena();
}
inline void Meta::set_icon(const std::string& value) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Meta.icon)
}
inline void Meta::set_icon(std::string&& value) {
  
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Meta.icon)
}
inline void Meta::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Meta.icon)
}
inline void Meta::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.icon)
}
inline std::string* Meta::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Meta.icon)
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Meta::release_icon() {
  // @@protoc_insertion_point(field_release:Messages.Meta.icon)
  
  return icon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.icon)
}

// string owner = 3;
inline void Meta::clear_owner() {
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Meta::owner() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.owner)
  return owner_.GetNoArena();
}
inline void Meta::set_owner(const std::string& value) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Meta.owner)
}
inline void Meta::set_owner(std::string&& value) {
  
  owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Meta.owner)
}
inline void Meta::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Meta.owner)
}
inline void Meta::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.owner)
}
inline std::string* Meta::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Meta.owner)
  return owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Meta::release_owner() {
  // @@protoc_insertion_point(field_release:Messages.Meta.owner)
  
  return owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.owner)
}

// string comments = 4;
inline void Meta::clear_comments() {
  comments_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Meta::comments() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.comments)
  return comments_.GetNoArena();
}
inline void Meta::set_comments(const std::string& value) {
  
  comments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Meta.comments)
}
inline void Meta::set_comments(std::string&& value) {
  
  comments_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Meta.comments)
}
inline void Meta::set_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Meta.comments)
}
inline void Meta::set_comments(const char* value, size_t size) {
  
  comments_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.comments)
}
inline std::string* Meta::mutable_comments() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Meta.comments)
  return comments_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Meta::release_comments() {
  // @@protoc_insertion_point(field_release:Messages.Meta.comments)
  
  return comments_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_comments(std::string* comments) {
  if (comments != nullptr) {
    
  } else {
    
  }
  comments_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comments);
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.comments)
}

// string series = 5;
inline void Meta::clear_series() {
  series_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Meta::series() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.series)
  return series_.GetNoArena();
}
inline void Meta::set_series(const std::string& value) {
  
  series_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Meta.series)
}
inline void Meta::set_series(std::string&& value) {
  
  series_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Meta.series)
}
inline void Meta::set_series(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  series_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Meta.series)
}
inline void Meta::set_series(const char* value, size_t size) {
  
  series_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.series)
}
inline std::string* Meta::mutable_series() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Meta.series)
  return series_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Meta::release_series() {
  // @@protoc_insertion_point(field_release:Messages.Meta.series)
  
  return series_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_series(std::string* series) {
  if (series != nullptr) {
    
  } else {
    
  }
  series_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), series);
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.series)
}

// string sys_info = 6;
inline void Meta::clear_sys_info() {
  sys_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Meta::sys_info() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.sys_info)
  return sys_info_.GetNoArena();
}
inline void Meta::set_sys_info(const std::string& value) {
  
  sys_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Meta.sys_info)
}
inline void Meta::set_sys_info(std::string&& value) {
  
  sys_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Meta.sys_info)
}
inline void Meta::set_sys_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sys_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Meta.sys_info)
}
inline void Meta::set_sys_info(const char* value, size_t size) {
  
  sys_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.sys_info)
}
inline std::string* Meta::mutable_sys_info() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Meta.sys_info)
  return sys_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Meta::release_sys_info() {
  // @@protoc_insertion_point(field_release:Messages.Meta.sys_info)
  
  return sys_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_sys_info(std::string* sys_info) {
  if (sys_info != nullptr) {
    
  } else {
    
  }
  sys_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sys_info);
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.sys_info)
}

// string geom_info = 7;
inline void Meta::clear_geom_info() {
  geom_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Meta::geom_info() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.geom_info)
  return geom_info_.GetNoArena();
}
inline void Meta::set_geom_info(const std::string& value) {
  
  geom_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Meta.geom_info)
}
inline void Meta::set_geom_info(std::string&& value) {
  
  geom_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Meta.geom_info)
}
inline void Meta::set_geom_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geom_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Meta.geom_info)
}
inline void Meta::set_geom_info(const char* value, size_t size) {
  
  geom_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.geom_info)
}
inline std::string* Meta::mutable_geom_info() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Meta.geom_info)
  return geom_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Meta::release_geom_info() {
  // @@protoc_insertion_point(field_release:Messages.Meta.geom_info)
  
  return geom_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_geom_info(std::string* geom_info) {
  if (geom_info != nullptr) {
    
  } else {
    
  }
  geom_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geom_info);
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.geom_info)
}

// string directory = 8;
inline void Meta::clear_directory() {
  directory_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Meta::directory() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.directory)
  return directory_.GetNoArena();
}
inline void Meta::set_directory(const std::string& value) {
  
  directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Meta.directory)
}
inline void Meta::set_directory(std::string&& value) {
  
  directory_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Meta.directory)
}
inline void Meta::set_directory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Meta.directory)
}
inline void Meta::set_directory(const char* value, size_t size) {
  
  directory_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.directory)
}
inline std::string* Meta::mutable_directory() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Meta.directory)
  return directory_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Meta::release_directory() {
  // @@protoc_insertion_point(field_release:Messages.Meta.directory)
  
  return directory_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Meta::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    
  } else {
    
  }
  directory_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), directory);
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.directory)
}

// int64 uid = 9;
inline void Meta::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::uid() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.uid)
  return uid_;
}
inline void Meta::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.uid)
}

// int64 parent = 10;
inline void Meta::clear_parent() {
  parent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::parent() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.parent)
  return parent_;
}
inline void Meta::set_parent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.parent)
}

// int64 created = 11;
inline void Meta::clear_created() {
  created_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::created() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.created)
  return created_;
}
inline void Meta::set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.created)
}

// int64 saved = 12;
inline void Meta::clear_saved() {
  saved_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::saved() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.saved)
  return saved_;
}
inline void Meta::set_saved(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  saved_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.saved)
}

// int64 modified = 13;
inline void Meta::clear_modified() {
  modified_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::modified() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.modified)
  return modified_;
}
inline void Meta::set_modified(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.modified)
}

// int64 iteration = 14;
inline void Meta::clear_iteration() {
  iteration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::iteration() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.iteration)
  return iteration_;
}
inline void Meta::set_iteration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  iteration_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.iteration)
}

// int64 save_interval = 15;
inline void Meta::clear_save_interval() {
  save_interval_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::save_interval() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.save_interval)
  return save_interval_;
}
inline void Meta::set_save_interval(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  save_interval_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.save_interval)
}

// bool enabled = 16;
inline void Meta::clear_enabled() {
  enabled_ = false;
}
inline bool Meta::enabled() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.enabled)
  return enabled_;
}
inline void Meta::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.enabled)
}

// bool locked = 17;
inline void Meta::clear_locked() {
  locked_ = false;
}
inline bool Meta::locked() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.locked)
  return locked_;
}
inline void Meta::set_locked(bool value) {
  
  locked_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.locked)
}

// bool auto_save = 18;
inline void Meta::clear_auto_save() {
  auto_save_ = false;
}
inline bool Meta::auto_save() const {
  // @@protoc_insertion_point(field_get:Messages.Meta.auto_save)
  return auto_save_;
}
inline void Meta::set_auto_save(bool value) {
  
  auto_save_ = value;
  // @@protoc_insertion_point(field_set:Messages.Meta.auto_save)
}

// .Messages.Revision revision = 20;
inline bool Meta::has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline const ::Messages::Revision& Meta::revision() const {
  const ::Messages::Revision* p = revision_;
  // @@protoc_insertion_point(field_get:Messages.Meta.revision)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Revision*>(
      &::Messages::_Revision_default_instance_);
}
inline ::Messages::Revision* Meta::release_revision() {
  // @@protoc_insertion_point(field_release:Messages.Meta.revision)
  
  ::Messages::Revision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::Messages::Revision* Meta::mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Revision>(GetArenaNoVirtual());
    revision_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Meta.revision)
  return revision_;
}
inline void Meta::set_allocated_revision(::Messages::Revision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision)->GetArena();
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.revision)
}

// .Messages.Revision version = 21;
inline bool Meta::has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline const ::Messages::Revision& Meta::version() const {
  const ::Messages::Revision* p = version_;
  // @@protoc_insertion_point(field_get:Messages.Meta.version)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Revision*>(
      &::Messages::_Revision_default_instance_);
}
inline ::Messages::Revision* Meta::release_version() {
  // @@protoc_insertion_point(field_release:Messages.Meta.version)
  
  ::Messages::Revision* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::Messages::Revision* Meta::mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Revision>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Meta.version)
  return version_;
}
inline void Meta::set_allocated_version(::Messages::Revision* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version)->GetArena();
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.version)
}

// .Messages.Extrema bounds = 22;
inline bool Meta::has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline const ::Messages::Extrema& Meta::bounds() const {
  const ::Messages::Extrema* p = bounds_;
  // @@protoc_insertion_point(field_get:Messages.Meta.bounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Extrema*>(
      &::Messages::_Extrema_default_instance_);
}
inline ::Messages::Extrema* Meta::release_bounds() {
  // @@protoc_insertion_point(field_release:Messages.Meta.bounds)
  
  ::Messages::Extrema* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::Messages::Extrema* Meta::mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Extrema>(GetArenaNoVirtual());
    bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Meta.bounds)
  return bounds_;
}
inline void Meta::set_allocated_bounds(::Messages::Extrema* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds)->GetArena();
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.bounds)
}

// .Messages.GraphicsControl appearance = 24;
inline bool Meta::has_appearance() const {
  return this != internal_default_instance() && appearance_ != nullptr;
}
inline void Meta::clear_appearance() {
  if (GetArenaNoVirtual() == nullptr && appearance_ != nullptr) {
    delete appearance_;
  }
  appearance_ = nullptr;
}
inline const ::Messages::GraphicsControl& Meta::appearance() const {
  const ::Messages::GraphicsControl* p = appearance_;
  // @@protoc_insertion_point(field_get:Messages.Meta.appearance)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::GraphicsControl*>(
      &::Messages::_GraphicsControl_default_instance_);
}
inline ::Messages::GraphicsControl* Meta::release_appearance() {
  // @@protoc_insertion_point(field_release:Messages.Meta.appearance)
  
  ::Messages::GraphicsControl* temp = appearance_;
  appearance_ = nullptr;
  return temp;
}
inline ::Messages::GraphicsControl* Meta::mutable_appearance() {
  
  if (appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::GraphicsControl>(GetArenaNoVirtual());
    appearance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Meta.appearance)
  return appearance_;
}
inline void Meta::set_allocated_appearance(::Messages::GraphicsControl* appearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete appearance_;
  }
  if (appearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      appearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appearance, submessage_arena);
    }
    
  } else {
    
  }
  appearance_ = appearance;
  // @@protoc_insertion_point(field_set_allocated:Messages.Meta.appearance)
}

// repeated int64 children = 25;
inline int Meta::children_size() const {
  return children_.size();
}
inline void Meta::clear_children() {
  children_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::children(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Meta.children)
  return children_.Get(index);
}
inline void Meta::set_children(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Meta.children)
}
inline void Meta::add_children(::PROTOBUF_NAMESPACE_ID::int64 value) {
  children_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Meta.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Meta::children() const {
  // @@protoc_insertion_point(field_list:Messages.Meta.children)
  return children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Meta::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Meta.children)
  return &children_;
}

// repeated int32 groups = 26;
inline int Meta::groups_size() const {
  return groups_.size();
}
inline void Meta::clear_groups() {
  groups_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meta::groups(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Meta.groups)
  return groups_.Get(index);
}
inline void Meta::set_groups(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Meta.groups)
}
inline void Meta::add_groups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  groups_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Meta.groups)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Meta::groups() const {
  // @@protoc_insertion_point(field_list:Messages.Meta.groups)
  return groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Meta::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Meta.groups)
  return &groups_;
}

// repeated int32 loops = 27;
inline int Meta::loops_size() const {
  return loops_.size();
}
inline void Meta::clear_loops() {
  loops_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meta::loops(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Meta.loops)
  return loops_.Get(index);
}
inline void Meta::set_loops(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  loops_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Meta.loops)
}
inline void Meta::add_loops(::PROTOBUF_NAMESPACE_ID::int32 value) {
  loops_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Meta.loops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Meta::loops() const {
  // @@protoc_insertion_point(field_list:Messages.Meta.loops)
  return loops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Meta::mutable_loops() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Meta.loops)
  return &loops_;
}

// repeated int32 surfaces = 28;
inline int Meta::surfaces_size() const {
  return surfaces_.size();
}
inline void Meta::clear_surfaces() {
  surfaces_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meta::surfaces(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Meta.surfaces)
  return surfaces_.Get(index);
}
inline void Meta::set_surfaces(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  surfaces_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Meta.surfaces)
}
inline void Meta::add_surfaces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  surfaces_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Meta.surfaces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Meta::surfaces() const {
  // @@protoc_insertion_point(field_list:Messages.Meta.surfaces)
  return surfaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Meta::mutable_surfaces() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Meta.surfaces)
  return &surfaces_;
}

// repeated int32 volumes = 29;
inline int Meta::volumes_size() const {
  return volumes_.size();
}
inline void Meta::clear_volumes() {
  volumes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meta::volumes(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Meta.volumes)
  return volumes_.Get(index);
}
inline void Meta::set_volumes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  volumes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Meta.volumes)
}
inline void Meta::add_volumes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  volumes_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Meta.volumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Meta::volumes() const {
  // @@protoc_insertion_point(field_list:Messages.Meta.volumes)
  return volumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Meta::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Meta.volumes)
  return &volumes_;
}

// repeated double model_transform = 30;
inline int Meta::model_transform_size() const {
  return model_transform_.size();
}
inline void Meta::clear_model_transform() {
  model_transform_.Clear();
}
inline double Meta::model_transform(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Meta.model_transform)
  return model_transform_.Get(index);
}
inline void Meta::set_model_transform(int index, double value) {
  model_transform_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Meta.model_transform)
}
inline void Meta::add_model_transform(double value) {
  model_transform_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Meta.model_transform)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Meta::model_transform() const {
  // @@protoc_insertion_point(field_list:Messages.Meta.model_transform)
  return model_transform_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Meta::mutable_model_transform() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Meta.model_transform)
  return &model_transform_;
}

// repeated string properties = 31;
inline int Meta::properties_size() const {
  return properties_.size();
}
inline void Meta::clear_properties() {
  properties_.Clear();
}
inline const std::string& Meta::properties(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Meta.properties)
  return properties_.Get(index);
}
inline std::string* Meta::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Meta.properties)
  return properties_.Mutable(index);
}
inline void Meta::set_properties(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Meta.properties)
  properties_.Mutable(index)->assign(value);
}
inline void Meta::set_properties(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Meta.properties)
  properties_.Mutable(index)->assign(std::move(value));
}
inline void Meta::set_properties(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Meta.properties)
}
inline void Meta::set_properties(int index, const char* value, size_t size) {
  properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Meta.properties)
}
inline std::string* Meta::add_properties() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Meta.properties)
  return properties_.Add();
}
inline void Meta::add_properties(const std::string& value) {
  properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Meta.properties)
}
inline void Meta::add_properties(std::string&& value) {
  properties_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Meta.properties)
}
inline void Meta::add_properties(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Meta.properties)
}
inline void Meta::add_properties(const char* value, size_t size) {
  properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Meta.properties)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Meta::properties() const {
  // @@protoc_insertion_point(field_list:Messages.Meta.properties)
  return properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Meta::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Meta.properties)
  return &properties_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meta_2eproto
