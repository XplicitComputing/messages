// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spatial.proto

#include "spatial.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Elements_vector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Extrema_vector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Revision_vector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vector64_vector_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_spatial_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Zone_spatial_2eproto;
namespace Messages {
class ZoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Zone> _instance;
} _Zone_default_instance_;
class TopologyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Topology> _instance;
} _Topology_default_instance_;
class GridControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GridControl> _instance;
} _GridControl_default_instance_;
class MeshControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshControl> _instance;
} _MeshControl_default_instance_;
class TreeControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreeControl> _instance;
} _TreeControl_default_instance_;
class NetworkControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkControl> _instance;
} _NetworkControl_default_instance_;
}  // namespace Messages
static void InitDefaultsscc_info_GridControl_spatial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_GridControl_default_instance_;
    new (ptr) ::Messages::GridControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::GridControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridControl_spatial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GridControl_spatial_2eproto}, {
      &scc_info_Extrema_vector_2eproto.base,}};

static void InitDefaultsscc_info_MeshControl_spatial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MeshControl_default_instance_;
    new (ptr) ::Messages::MeshControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MeshControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshControl_spatial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MeshControl_spatial_2eproto}, {
      &scc_info_Extrema_vector_2eproto.base,}};

static void InitDefaultsscc_info_NetworkControl_spatial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_NetworkControl_default_instance_;
    new (ptr) ::Messages::NetworkControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::NetworkControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkControl_spatial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkControl_spatial_2eproto}, {}};

static void InitDefaultsscc_info_Topology_spatial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_Topology_default_instance_;
    new (ptr) ::Messages::Topology();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::Topology::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Topology_spatial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Topology_spatial_2eproto}, {
      &scc_info_Vector64_vector_2eproto.base,
      &scc_info_Elements_vector_2eproto.base,
      &scc_info_Zone_spatial_2eproto.base,
      &scc_info_Revision_vector_2eproto.base,}};

static void InitDefaultsscc_info_TreeControl_spatial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_TreeControl_default_instance_;
    new (ptr) ::Messages::TreeControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::TreeControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TreeControl_spatial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TreeControl_spatial_2eproto}, {
      &scc_info_Extrema_vector_2eproto.base,}};

static void InitDefaultsscc_info_Zone_spatial_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_Zone_default_instance_;
    new (ptr) ::Messages::Zone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::Zone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Zone_spatial_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Zone_spatial_2eproto}, {
      &scc_info_Extrema_vector_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_spatial_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_spatial_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_spatial_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_spatial_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, name_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, id_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, dimensionality_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, num_elements_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, offset_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, comments_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, info_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, bounds_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, terminal_position_),
  PROTOBUF_FIELD_OFFSET(::Messages::Zone, specific_elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, name_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, ndim_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, basis_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, resolution_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, data_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, nodes_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, edges_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, interior_edges_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, faces_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, interior_faces_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, cells_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, groups_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, loops_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, surfaces_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, volumes_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, locations_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, filename_),
  PROTOBUF_FIELD_OFFSET(::Messages::Topology, revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Messages::GridControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::GridControl, basis_),
  PROTOBUF_FIELD_OFFSET(::Messages::GridControl, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::GridControl, spacing_),
  PROTOBUF_FIELD_OFFSET(::Messages::GridControl, grading_),
  PROTOBUF_FIELD_OFFSET(::Messages::GridControl, bounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, target_n_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, max_iterations_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, size_ratio_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, size_decay_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, size_exponent_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, curv_ratio_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, curv_decay_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, curv_exponent_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, node_radius_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, bounds_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, interior_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, exterior_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, shell_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, equalize_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, smooth_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, include_background_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, keep_existing_points_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, x_symmetry_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, y_symmetry_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, z_symmetry_),
  PROTOBUF_FIELD_OFFSET(::Messages::MeshControl, background_n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Messages::TreeControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::TreeControl, min_depth_),
  PROTOBUF_FIELD_OFFSET(::Messages::TreeControl, max_depth_),
  PROTOBUF_FIELD_OFFSET(::Messages::TreeControl, max_size_),
  PROTOBUF_FIELD_OFFSET(::Messages::TreeControl, bounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Messages::NetworkControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Messages::Zone)},
  { 15, -1, sizeof(::Messages::Topology)},
  { 39, -1, sizeof(::Messages::GridControl)},
  { 49, -1, sizeof(::Messages::MeshControl)},
  { 75, -1, sizeof(::Messages::TreeControl)},
  { 84, -1, sizeof(::Messages::NetworkControl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_Zone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_Topology_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_GridControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MeshControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_TreeControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_NetworkControl_default_instance_),
};

const char descriptor_table_protodef_spatial_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rspatial.proto\022\010Messages\032\014vector.proto\""
  "\327\001\n\004Zone\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\026\n\016di"
  "mensionality\030\003 \001(\005\022\024\n\014num_elements\030\005 \001(\003"
  "\022\016\n\006offset\030\006 \001(\003\022\020\n\010comments\030\007 \001(\t\022\014\n\004in"
  "fo\030\010 \001(\t\022!\n\006bounds\030\n \001(\0132\021.Messages.Extr"
  "ema\022\031\n\021terminal_position\030\013 \003(\002\022\031\n\021specif"
  "ic_elements\030\014 \003(\005\"\252\004\n\010Topology\022\014\n\004name\030\001"
  " \001(\t\022\014\n\004type\030\002 \001(\005\022\014\n\004ndim\030\003 \001(\005\022\r\n\005basi"
  "s\030\004 \001(\005\022\022\n\nresolution\030\010 \003(\001\022 \n\004data\030\t \003("
  "\0132\022.Messages.Vector64\022!\n\005nodes\030\n \001(\0132\022.M"
  "essages.Elements\022!\n\005edges\030\013 \001(\0132\022.Messag"
  "es.Elements\022*\n\016interior_edges\030\014 \001(\0132\022.Me"
  "ssages.Elements\022!\n\005faces\030\r \001(\0132\022.Message"
  "s.Elements\022*\n\016interior_faces\030\016 \001(\0132\022.Mes"
  "sages.Elements\022!\n\005cells\030\017 \001(\0132\022.Messages"
  ".Elements\022\036\n\006groups\030\024 \003(\0132\016.Messages.Zon"
  "e\022\035\n\005loops\030\025 \003(\0132\016.Messages.Zone\022 \n\010surf"
  "aces\030\026 \003(\0132\016.Messages.Zone\022\037\n\007volumes\030\027 "
  "\003(\0132\016.Messages.Zone\022\021\n\tlocations\030\032 \003(\005\022\020"
  "\n\010filename\030\036 \001(\t\022$\n\010revision\030\037 \001(\0132\022.Mes"
  "sages.Revision\"o\n\013GridControl\022\r\n\005basis\030\001"
  " \001(\005\022\014\n\004size\030\002 \003(\005\022\017\n\007spacing\030\003 \003(\001\022\017\n\007g"
  "rading\030\004 \003(\001\022!\n\006bounds\030\n \001(\0132\021.Messages."
  "Extrema\"\316\003\n\013MeshControl\022\020\n\010target_n\030\001 \001("
  "\003\022\026\n\016max_iterations\030\002 \001(\005\022\022\n\nsize_ratio\030"
  "\003 \001(\001\022\022\n\nsize_decay\030\004 \001(\001\022\025\n\rsize_expone"
  "nt\030\005 \001(\001\022\022\n\ncurv_ratio\030\006 \001(\001\022\022\n\ncurv_dec"
  "ay\030\007 \001(\001\022\025\n\rcurv_exponent\030\010 \001(\001\022\023\n\013node_"
  "radius\030\t \001(\001\022!\n\006bounds\030\n \001(\0132\021.Messages."
  "Extrema\022\020\n\010interior\030\014 \001(\010\022\020\n\010exterior\030\r "
  "\001(\010\022\r\n\005shell\030\016 \001(\010\022\020\n\010equalize\030\017 \001(\010\022\016\n\006"
  "smooth\030\020 \001(\010\022\032\n\022include_background\030\022 \001(\010"
  "\022\034\n\024keep_existing_points\030\023 \001(\010\022\022\n\nx_symm"
  "etry\030\030 \001(\010\022\022\n\ny_symmetry\030\031 \001(\010\022\022\n\nz_symm"
  "etry\030\032 \001(\010\022\024\n\014background_n\030\036 \001(\003\"h\n\013Tree"
  "Control\022\021\n\tmin_depth\030\001 \001(\005\022\021\n\tmax_depth\030"
  "\002 \001(\005\022\020\n\010max_size\030\003 \001(\003\022!\n\006bounds\030\n \001(\0132"
  "\021.Messages.Extrema\"\020\n\016NetworkControlb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_spatial_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_spatial_2eproto_sccs[6] = {
  &scc_info_GridControl_spatial_2eproto.base,
  &scc_info_MeshControl_spatial_2eproto.base,
  &scc_info_NetworkControl_spatial_2eproto.base,
  &scc_info_Topology_spatial_2eproto.base,
  &scc_info_TreeControl_spatial_2eproto.base,
  &scc_info_Zone_spatial_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_spatial_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spatial_2eproto = {
  false, false, descriptor_table_protodef_spatial_2eproto, "spatial.proto", 1524,
  &descriptor_table_spatial_2eproto_once, descriptor_table_spatial_2eproto_sccs, descriptor_table_spatial_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_spatial_2eproto::offsets,
  file_level_metadata_spatial_2eproto, 6, file_level_enum_descriptors_spatial_2eproto, file_level_service_descriptors_spatial_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_spatial_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_spatial_2eproto)), true);
namespace Messages {

// ===================================================================

void Zone::InitAsDefaultInstance() {
  ::Messages::_Zone_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::Messages::Extrema*>(
      ::Messages::Extrema::internal_default_instance());
}
class Zone::_Internal {
 public:
  static const ::Messages::Extrema& bounds(const Zone* msg);
};

const ::Messages::Extrema&
Zone::_Internal::bounds(const Zone* msg) {
  return *msg->bounds_;
}
void Zone::clear_bounds() {
  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
Zone::Zone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  terminal_position_(arena),
  specific_elements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Messages.Zone)
}
Zone::Zone(const Zone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      terminal_position_(from.terminal_position_),
      specific_elements_(from.specific_elements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  comments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comments().empty()) {
    comments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comments(),
      GetArena());
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_info().empty()) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_info(),
      GetArena());
  }
  if (from._internal_has_bounds()) {
    bounds_ = new ::Messages::Extrema(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&id_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:Messages.Zone)
}

void Zone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Zone_spatial_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comments_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&bounds_)) + sizeof(offset_));
}

Zone::~Zone() {
  // @@protoc_insertion_point(destructor:Messages.Zone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Zone::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comments_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bounds_;
}

void Zone::ArenaDtor(void* object) {
  Zone* _this = reinterpret_cast< Zone* >(object);
  (void)_this;
}
void Zone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Zone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Zone& Zone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Zone_spatial_2eproto.base);
  return *internal_default_instance();
}


void Zone::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.Zone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terminal_position_.Clear();
  specific_elements_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comments_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&id_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Zone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Messages.Zone.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dimensionality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dimensionality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_elements = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_elements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string comments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_comments();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Messages.Zone.comments"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Messages.Zone.info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Messages.Extrema bounds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float terminal_position = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_terminal_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          _internal_add_terminal_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 specific_elements = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_specific_elements(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_specific_elements(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Zone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.Zone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Messages.Zone.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 dimensionality = 3;
  if (this->dimensionality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dimensionality(), target);
  }

  // int64 num_elements = 5;
  if (this->num_elements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_elements(), target);
  }

  // int64 offset = 6;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_offset(), target);
  }

  // string comments = 7;
  if (this->comments().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comments().data(), static_cast<int>(this->_internal_comments().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Messages.Zone.comments");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_comments(), target);
  }

  // string info = 8;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Messages.Zone.info");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_info(), target);
  }

  // .Messages.Extrema bounds = 10;
  if (this->has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bounds(this), target, stream);
  }

  // repeated float terminal_position = 11;
  if (this->_internal_terminal_position_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_terminal_position(), target);
  }

  // repeated int32 specific_elements = 12;
  {
    int byte_size = _specific_elements_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          12, _internal_specific_elements(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.Zone)
  return target;
}

size_t Zone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.Zone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float terminal_position = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_terminal_position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _terminal_position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 specific_elements = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->specific_elements_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _specific_elements_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string comments = 7;
  if (this->comments().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comments());
  }

  // string info = 8;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_info());
  }

  // .Messages.Extrema bounds = 10;
  if (this->has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 dimensionality = 3;
  if (this->dimensionality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dimensionality());
  }

  // int64 num_elements = 5;
  if (this->num_elements() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_elements());
  }

  // int64 offset = 6;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Zone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.Zone)
  GOOGLE_DCHECK_NE(&from, this);
  const Zone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Zone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.Zone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.Zone)
    MergeFrom(*source);
  }
}

void Zone::MergeFrom(const Zone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.Zone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  terminal_position_.MergeFrom(from.terminal_position_);
  specific_elements_.MergeFrom(from.specific_elements_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.comments().size() > 0) {
    _internal_set_comments(from._internal_comments());
  }
  if (from.info().size() > 0) {
    _internal_set_info(from._internal_info());
  }
  if (from.has_bounds()) {
    _internal_mutable_bounds()->::Messages::Extrema::MergeFrom(from._internal_bounds());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.dimensionality() != 0) {
    _internal_set_dimensionality(from._internal_dimensionality());
  }
  if (from.num_elements() != 0) {
    _internal_set_num_elements(from._internal_num_elements());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void Zone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.Zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone::CopyFrom(const Zone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.Zone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone::IsInitialized() const {
  return true;
}

void Zone::InternalSwap(Zone* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  terminal_position_.InternalSwap(&other->terminal_position_);
  specific_elements_.InternalSwap(&other->specific_elements_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comments_.Swap(&other->comments_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Zone, offset_)
      + sizeof(Zone::offset_)
      - PROTOBUF_FIELD_OFFSET(Zone, bounds_)>(
          reinterpret_cast<char*>(&bounds_),
          reinterpret_cast<char*>(&other->bounds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Zone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Topology::InitAsDefaultInstance() {
  ::Messages::_Topology_default_instance_._instance.get_mutable()->nodes_ = const_cast< ::Messages::Elements*>(
      ::Messages::Elements::internal_default_instance());
  ::Messages::_Topology_default_instance_._instance.get_mutable()->edges_ = const_cast< ::Messages::Elements*>(
      ::Messages::Elements::internal_default_instance());
  ::Messages::_Topology_default_instance_._instance.get_mutable()->interior_edges_ = const_cast< ::Messages::Elements*>(
      ::Messages::Elements::internal_default_instance());
  ::Messages::_Topology_default_instance_._instance.get_mutable()->faces_ = const_cast< ::Messages::Elements*>(
      ::Messages::Elements::internal_default_instance());
  ::Messages::_Topology_default_instance_._instance.get_mutable()->interior_faces_ = const_cast< ::Messages::Elements*>(
      ::Messages::Elements::internal_default_instance());
  ::Messages::_Topology_default_instance_._instance.get_mutable()->cells_ = const_cast< ::Messages::Elements*>(
      ::Messages::Elements::internal_default_instance());
  ::Messages::_Topology_default_instance_._instance.get_mutable()->revision_ = const_cast< ::Messages::Revision*>(
      ::Messages::Revision::internal_default_instance());
}
class Topology::_Internal {
 public:
  static const ::Messages::Elements& nodes(const Topology* msg);
  static const ::Messages::Elements& edges(const Topology* msg);
  static const ::Messages::Elements& interior_edges(const Topology* msg);
  static const ::Messages::Elements& faces(const Topology* msg);
  static const ::Messages::Elements& interior_faces(const Topology* msg);
  static const ::Messages::Elements& cells(const Topology* msg);
  static const ::Messages::Revision& revision(const Topology* msg);
};

const ::Messages::Elements&
Topology::_Internal::nodes(const Topology* msg) {
  return *msg->nodes_;
}
const ::Messages::Elements&
Topology::_Internal::edges(const Topology* msg) {
  return *msg->edges_;
}
const ::Messages::Elements&
Topology::_Internal::interior_edges(const Topology* msg) {
  return *msg->interior_edges_;
}
const ::Messages::Elements&
Topology::_Internal::faces(const Topology* msg) {
  return *msg->faces_;
}
const ::Messages::Elements&
Topology::_Internal::interior_faces(const Topology* msg) {
  return *msg->interior_faces_;
}
const ::Messages::Elements&
Topology::_Internal::cells(const Topology* msg) {
  return *msg->cells_;
}
const ::Messages::Revision&
Topology::_Internal::revision(const Topology* msg) {
  return *msg->revision_;
}
void Topology::clear_data() {
  data_.Clear();
}
void Topology::clear_nodes() {
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
}
void Topology::clear_edges() {
  if (GetArena() == nullptr && edges_ != nullptr) {
    delete edges_;
  }
  edges_ = nullptr;
}
void Topology::clear_interior_edges() {
  if (GetArena() == nullptr && interior_edges_ != nullptr) {
    delete interior_edges_;
  }
  interior_edges_ = nullptr;
}
void Topology::clear_faces() {
  if (GetArena() == nullptr && faces_ != nullptr) {
    delete faces_;
  }
  faces_ = nullptr;
}
void Topology::clear_interior_faces() {
  if (GetArena() == nullptr && interior_faces_ != nullptr) {
    delete interior_faces_;
  }
  interior_faces_ = nullptr;
}
void Topology::clear_cells() {
  if (GetArena() == nullptr && cells_ != nullptr) {
    delete cells_;
  }
  cells_ = nullptr;
}
void Topology::clear_revision() {
  if (GetArena() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
Topology::Topology(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resolution_(arena),
  data_(arena),
  groups_(arena),
  loops_(arena),
  surfaces_(arena),
  volumes_(arena),
  locations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Messages.Topology)
}
Topology::Topology(const Topology& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resolution_(from.resolution_),
      data_(from.data_),
      groups_(from.groups_),
      loops_(from.loops_),
      surfaces_(from.surfaces_),
      volumes_(from.volumes_),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_nodes()) {
    nodes_ = new ::Messages::Elements(*from.nodes_);
  } else {
    nodes_ = nullptr;
  }
  if (from._internal_has_edges()) {
    edges_ = new ::Messages::Elements(*from.edges_);
  } else {
    edges_ = nullptr;
  }
  if (from._internal_has_interior_edges()) {
    interior_edges_ = new ::Messages::Elements(*from.interior_edges_);
  } else {
    interior_edges_ = nullptr;
  }
  if (from._internal_has_faces()) {
    faces_ = new ::Messages::Elements(*from.faces_);
  } else {
    faces_ = nullptr;
  }
  if (from._internal_has_interior_faces()) {
    interior_faces_ = new ::Messages::Elements(*from.interior_faces_);
  } else {
    interior_faces_ = nullptr;
  }
  if (from._internal_has_cells()) {
    cells_ = new ::Messages::Elements(*from.cells_);
  } else {
    cells_ = nullptr;
  }
  if (from._internal_has_revision()) {
    revision_ = new ::Messages::Revision(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&basis_) -
    reinterpret_cast<char*>(&type_)) + sizeof(basis_));
  // @@protoc_insertion_point(copy_constructor:Messages.Topology)
}

void Topology::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Topology_spatial_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basis_) -
      reinterpret_cast<char*>(&nodes_)) + sizeof(basis_));
}

Topology::~Topology() {
  // @@protoc_insertion_point(destructor:Messages.Topology)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Topology::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nodes_;
  if (this != internal_default_instance()) delete edges_;
  if (this != internal_default_instance()) delete interior_edges_;
  if (this != internal_default_instance()) delete faces_;
  if (this != internal_default_instance()) delete interior_faces_;
  if (this != internal_default_instance()) delete cells_;
  if (this != internal_default_instance()) delete revision_;
}

void Topology::ArenaDtor(void* object) {
  Topology* _this = reinterpret_cast< Topology* >(object);
  (void)_this;
}
void Topology::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Topology::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Topology& Topology::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Topology_spatial_2eproto.base);
  return *internal_default_instance();
}


void Topology::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.Topology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resolution_.Clear();
  data_.Clear();
  groups_.Clear();
  loops_.Clear();
  surfaces_.Clear();
  volumes_.Clear();
  locations_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && nodes_ != nullptr) {
    delete nodes_;
  }
  nodes_ = nullptr;
  if (GetArena() == nullptr && edges_ != nullptr) {
    delete edges_;
  }
  edges_ = nullptr;
  if (GetArena() == nullptr && interior_edges_ != nullptr) {
    delete interior_edges_;
  }
  interior_edges_ = nullptr;
  if (GetArena() == nullptr && faces_ != nullptr) {
    delete faces_;
  }
  faces_ = nullptr;
  if (GetArena() == nullptr && interior_faces_ != nullptr) {
    delete interior_faces_;
  }
  interior_faces_ = nullptr;
  if (GetArena() == nullptr && cells_ != nullptr) {
    delete cells_;
  }
  cells_ = nullptr;
  if (GetArena() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basis_) -
      reinterpret_cast<char*>(&type_)) + sizeof(basis_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Topology::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Messages.Topology.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ndim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ndim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 basis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          basis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double resolution = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_resolution(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_resolution(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .Messages.Vector64 data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .Messages.Elements nodes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Messages.Elements edges = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Messages.Elements interior_edges = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Messages.Elements faces = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_faces(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Messages.Elements interior_faces = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_interior_faces(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Messages.Elements cells = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Messages.Zone groups = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Messages.Zone loops = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_loops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Messages.Zone surfaces = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_surfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Messages.Zone volumes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 locations = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_locations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208) {
          _internal_add_locations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filename = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Messages.Topology.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Messages.Revision revision = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Topology::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.Topology)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Messages.Topology.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 ndim = 3;
  if (this->ndim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ndim(), target);
  }

  // int32 basis = 4;
  if (this->basis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_basis(), target);
  }

  // repeated double resolution = 8;
  if (this->_internal_resolution_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_resolution(), target);
  }

  // repeated .Messages.Vector64 data = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_data(i), target, stream);
  }

  // .Messages.Elements nodes = 10;
  if (this->has_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::nodes(this), target, stream);
  }

  // .Messages.Elements edges = 11;
  if (this->has_edges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::edges(this), target, stream);
  }

  // .Messages.Elements interior_edges = 12;
  if (this->has_interior_edges()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::interior_edges(this), target, stream);
  }

  // .Messages.Elements faces = 13;
  if (this->has_faces()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::faces(this), target, stream);
  }

  // .Messages.Elements interior_faces = 14;
  if (this->has_interior_faces()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::interior_faces(this), target, stream);
  }

  // .Messages.Elements cells = 15;
  if (this->has_cells()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::cells(this), target, stream);
  }

  // repeated .Messages.Zone groups = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_groups(i), target, stream);
  }

  // repeated .Messages.Zone loops = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_loops(i), target, stream);
  }

  // repeated .Messages.Zone surfaces = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_surfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_surfaces(i), target, stream);
  }

  // repeated .Messages.Zone volumes = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_volumes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_volumes(i), target, stream);
  }

  // repeated int32 locations = 26;
  {
    int byte_size = _locations_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          26, _internal_locations(), byte_size, target);
    }
  }

  // string filename = 30;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Messages.Topology.filename");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_filename(), target);
  }

  // .Messages.Revision revision = 31;
  if (this->has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::revision(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.Topology)
  return target;
}

size_t Topology::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.Topology)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double resolution = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_resolution_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _resolution_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Messages.Vector64 data = 9;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Messages.Zone groups = 20;
  total_size += 2UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Messages.Zone loops = 21;
  total_size += 2UL * this->_internal_loops_size();
  for (const auto& msg : this->loops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Messages.Zone surfaces = 22;
  total_size += 2UL * this->_internal_surfaces_size();
  for (const auto& msg : this->surfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Messages.Zone volumes = 23;
  total_size += 2UL * this->_internal_volumes_size();
  for (const auto& msg : this->volumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 locations = 26;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->locations_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _locations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string filename = 30;
  if (this->filename().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .Messages.Elements nodes = 10;
  if (this->has_nodes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodes_);
  }

  // .Messages.Elements edges = 11;
  if (this->has_edges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);
  }

  // .Messages.Elements interior_edges = 12;
  if (this->has_interior_edges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interior_edges_);
  }

  // .Messages.Elements faces = 13;
  if (this->has_faces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *faces_);
  }

  // .Messages.Elements interior_faces = 14;
  if (this->has_interior_faces()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interior_faces_);
  }

  // .Messages.Elements cells = 15;
  if (this->has_cells()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cells_);
  }

  // .Messages.Revision revision = 31;
  if (this->has_revision()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 ndim = 3;
  if (this->ndim() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndim());
  }

  // int32 basis = 4;
  if (this->basis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_basis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Topology::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  const Topology* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Topology>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.Topology)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.Topology)
    MergeFrom(*source);
  }
}

void Topology::MergeFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.Topology)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resolution_.MergeFrom(from.resolution_);
  data_.MergeFrom(from.data_);
  groups_.MergeFrom(from.groups_);
  loops_.MergeFrom(from.loops_);
  surfaces_.MergeFrom(from.surfaces_);
  volumes_.MergeFrom(from.volumes_);
  locations_.MergeFrom(from.locations_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_nodes()) {
    _internal_mutable_nodes()->::Messages::Elements::MergeFrom(from._internal_nodes());
  }
  if (from.has_edges()) {
    _internal_mutable_edges()->::Messages::Elements::MergeFrom(from._internal_edges());
  }
  if (from.has_interior_edges()) {
    _internal_mutable_interior_edges()->::Messages::Elements::MergeFrom(from._internal_interior_edges());
  }
  if (from.has_faces()) {
    _internal_mutable_faces()->::Messages::Elements::MergeFrom(from._internal_faces());
  }
  if (from.has_interior_faces()) {
    _internal_mutable_interior_faces()->::Messages::Elements::MergeFrom(from._internal_interior_faces());
  }
  if (from.has_cells()) {
    _internal_mutable_cells()->::Messages::Elements::MergeFrom(from._internal_cells());
  }
  if (from.has_revision()) {
    _internal_mutable_revision()->::Messages::Revision::MergeFrom(from._internal_revision());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.ndim() != 0) {
    _internal_set_ndim(from._internal_ndim());
  }
  if (from.basis() != 0) {
    _internal_set_basis(from._internal_basis());
  }
}

void Topology::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topology::CopyFrom(const Topology& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.Topology)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topology::IsInitialized() const {
  return true;
}

void Topology::InternalSwap(Topology* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resolution_.InternalSwap(&other->resolution_);
  data_.InternalSwap(&other->data_);
  groups_.InternalSwap(&other->groups_);
  loops_.InternalSwap(&other->loops_);
  surfaces_.InternalSwap(&other->surfaces_);
  volumes_.InternalSwap(&other->volumes_);
  locations_.InternalSwap(&other->locations_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Topology, basis_)
      + sizeof(Topology::basis_)
      - PROTOBUF_FIELD_OFFSET(Topology, nodes_)>(
          reinterpret_cast<char*>(&nodes_),
          reinterpret_cast<char*>(&other->nodes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Topology::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GridControl::InitAsDefaultInstance() {
  ::Messages::_GridControl_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::Messages::Extrema*>(
      ::Messages::Extrema::internal_default_instance());
}
class GridControl::_Internal {
 public:
  static const ::Messages::Extrema& bounds(const GridControl* msg);
};

const ::Messages::Extrema&
GridControl::_Internal::bounds(const GridControl* msg) {
  return *msg->bounds_;
}
void GridControl::clear_bounds() {
  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
GridControl::GridControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  size_(arena),
  spacing_(arena),
  grading_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Messages.GridControl)
}
GridControl::GridControl(const GridControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      size_(from.size_),
      spacing_(from.spacing_),
      grading_(from.grading_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bounds()) {
    bounds_ = new ::Messages::Extrema(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  basis_ = from.basis_;
  // @@protoc_insertion_point(copy_constructor:Messages.GridControl)
}

void GridControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GridControl_spatial_2eproto.base);
  ::memset(&bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&basis_) -
      reinterpret_cast<char*>(&bounds_)) + sizeof(basis_));
}

GridControl::~GridControl() {
  // @@protoc_insertion_point(destructor:Messages.GridControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GridControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bounds_;
}

void GridControl::ArenaDtor(void* object) {
  GridControl* _this = reinterpret_cast< GridControl* >(object);
  (void)_this;
}
void GridControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GridControl& GridControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GridControl_spatial_2eproto.base);
  return *internal_default_instance();
}


void GridControl::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.GridControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_.Clear();
  spacing_.Clear();
  grading_.Clear();
  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  basis_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GridControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 basis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          basis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double spacing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_spacing(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_spacing(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double grading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_grading(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_grading(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Messages.Extrema bounds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.GridControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 basis = 1;
  if (this->basis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_basis(), target);
  }

  // repeated int32 size = 2;
  {
    int byte_size = _size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_size(), byte_size, target);
    }
  }

  // repeated double spacing = 3;
  if (this->_internal_spacing_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_spacing(), target);
  }

  // repeated double grading = 4;
  if (this->_internal_grading_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_grading(), target);
  }

  // .Messages.Extrema bounds = 10;
  if (this->has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bounds(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.GridControl)
  return target;
}

size_t GridControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.GridControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 size = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double spacing = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_spacing_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spacing_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double grading = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_grading_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _grading_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Messages.Extrema bounds = 10;
  if (this->has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  // int32 basis = 1;
  if (this->basis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_basis());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.GridControl)
  GOOGLE_DCHECK_NE(&from, this);
  const GridControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GridControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.GridControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.GridControl)
    MergeFrom(*source);
  }
}

void GridControl::MergeFrom(const GridControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.GridControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  size_.MergeFrom(from.size_);
  spacing_.MergeFrom(from.spacing_);
  grading_.MergeFrom(from.grading_);
  if (from.has_bounds()) {
    _internal_mutable_bounds()->::Messages::Extrema::MergeFrom(from._internal_bounds());
  }
  if (from.basis() != 0) {
    _internal_set_basis(from._internal_basis());
  }
}

void GridControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.GridControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridControl::CopyFrom(const GridControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.GridControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridControl::IsInitialized() const {
  return true;
}

void GridControl::InternalSwap(GridControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  size_.InternalSwap(&other->size_);
  spacing_.InternalSwap(&other->spacing_);
  grading_.InternalSwap(&other->grading_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GridControl, basis_)
      + sizeof(GridControl::basis_)
      - PROTOBUF_FIELD_OFFSET(GridControl, bounds_)>(
          reinterpret_cast<char*>(&bounds_),
          reinterpret_cast<char*>(&other->bounds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GridControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshControl::InitAsDefaultInstance() {
  ::Messages::_MeshControl_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::Messages::Extrema*>(
      ::Messages::Extrema::internal_default_instance());
}
class MeshControl::_Internal {
 public:
  static const ::Messages::Extrema& bounds(const MeshControl* msg);
};

const ::Messages::Extrema&
MeshControl::_Internal::bounds(const MeshControl* msg) {
  return *msg->bounds_;
}
void MeshControl::clear_bounds() {
  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
MeshControl::MeshControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Messages.MeshControl)
}
MeshControl::MeshControl(const MeshControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bounds()) {
    bounds_ = new ::Messages::Extrema(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  ::memcpy(&target_n_, &from.target_n_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_n_) -
    reinterpret_cast<char*>(&target_n_)) + sizeof(background_n_));
  // @@protoc_insertion_point(copy_constructor:Messages.MeshControl)
}

void MeshControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshControl_spatial_2eproto.base);
  ::memset(&bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_n_) -
      reinterpret_cast<char*>(&bounds_)) + sizeof(background_n_));
}

MeshControl::~MeshControl() {
  // @@protoc_insertion_point(destructor:Messages.MeshControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bounds_;
}

void MeshControl::ArenaDtor(void* object) {
  MeshControl* _this = reinterpret_cast< MeshControl* >(object);
  (void)_this;
}
void MeshControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshControl& MeshControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshControl_spatial_2eproto.base);
  return *internal_default_instance();
}


void MeshControl::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MeshControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  ::memset(&target_n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_n_) -
      reinterpret_cast<char*>(&target_n_)) + sizeof(background_n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 target_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_iterations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double size_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          size_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double size_decay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          size_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double size_exponent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          size_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double curv_ratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          curv_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double curv_decay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          curv_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double curv_exponent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          curv_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double node_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          node_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Messages.Extrema bounds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool interior = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          interior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exterior = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          exterior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shell = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          shell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool equalize = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          equalize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool smooth = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          smooth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_background = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          include_background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_existing_points = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          keep_existing_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool x_symmetry = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          x_symmetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool y_symmetry = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          y_symmetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool z_symmetry = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          z_symmetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 background_n = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          background_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MeshControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 target_n = 1;
  if (this->target_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_target_n(), target);
  }

  // int32 max_iterations = 2;
  if (this->max_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_iterations(), target);
  }

  // double size_ratio = 3;
  if (!(this->size_ratio() <= 0 && this->size_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_size_ratio(), target);
  }

  // double size_decay = 4;
  if (!(this->size_decay() <= 0 && this->size_decay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_size_decay(), target);
  }

  // double size_exponent = 5;
  if (!(this->size_exponent() <= 0 && this->size_exponent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_size_exponent(), target);
  }

  // double curv_ratio = 6;
  if (!(this->curv_ratio() <= 0 && this->curv_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_curv_ratio(), target);
  }

  // double curv_decay = 7;
  if (!(this->curv_decay() <= 0 && this->curv_decay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curv_decay(), target);
  }

  // double curv_exponent = 8;
  if (!(this->curv_exponent() <= 0 && this->curv_exponent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_curv_exponent(), target);
  }

  // double node_radius = 9;
  if (!(this->node_radius() <= 0 && this->node_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_node_radius(), target);
  }

  // .Messages.Extrema bounds = 10;
  if (this->has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bounds(this), target, stream);
  }

  // bool interior = 12;
  if (this->interior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_interior(), target);
  }

  // bool exterior = 13;
  if (this->exterior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_exterior(), target);
  }

  // bool shell = 14;
  if (this->shell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_shell(), target);
  }

  // bool equalize = 15;
  if (this->equalize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_equalize(), target);
  }

  // bool smooth = 16;
  if (this->smooth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_smooth(), target);
  }

  // bool include_background = 18;
  if (this->include_background() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_include_background(), target);
  }

  // bool keep_existing_points = 19;
  if (this->keep_existing_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_keep_existing_points(), target);
  }

  // bool x_symmetry = 24;
  if (this->x_symmetry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_x_symmetry(), target);
  }

  // bool y_symmetry = 25;
  if (this->y_symmetry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_y_symmetry(), target);
  }

  // bool z_symmetry = 26;
  if (this->z_symmetry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_z_symmetry(), target);
  }

  // int64 background_n = 30;
  if (this->background_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(30, this->_internal_background_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MeshControl)
  return target;
}

size_t MeshControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MeshControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Messages.Extrema bounds = 10;
  if (this->has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  // int64 target_n = 1;
  if (this->target_n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_target_n());
  }

  // double size_ratio = 3;
  if (!(this->size_ratio() <= 0 && this->size_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double size_decay = 4;
  if (!(this->size_decay() <= 0 && this->size_decay() >= 0)) {
    total_size += 1 + 8;
  }

  // double size_exponent = 5;
  if (!(this->size_exponent() <= 0 && this->size_exponent() >= 0)) {
    total_size += 1 + 8;
  }

  // double curv_ratio = 6;
  if (!(this->curv_ratio() <= 0 && this->curv_ratio() >= 0)) {
    total_size += 1 + 8;
  }

  // double curv_decay = 7;
  if (!(this->curv_decay() <= 0 && this->curv_decay() >= 0)) {
    total_size += 1 + 8;
  }

  // double curv_exponent = 8;
  if (!(this->curv_exponent() <= 0 && this->curv_exponent() >= 0)) {
    total_size += 1 + 8;
  }

  // double node_radius = 9;
  if (!(this->node_radius() <= 0 && this->node_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 max_iterations = 2;
  if (this->max_iterations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_iterations());
  }

  // bool interior = 12;
  if (this->interior() != 0) {
    total_size += 1 + 1;
  }

  // bool exterior = 13;
  if (this->exterior() != 0) {
    total_size += 1 + 1;
  }

  // bool shell = 14;
  if (this->shell() != 0) {
    total_size += 1 + 1;
  }

  // bool equalize = 15;
  if (this->equalize() != 0) {
    total_size += 1 + 1;
  }

  // bool smooth = 16;
  if (this->smooth() != 0) {
    total_size += 2 + 1;
  }

  // bool include_background = 18;
  if (this->include_background() != 0) {
    total_size += 2 + 1;
  }

  // bool keep_existing_points = 19;
  if (this->keep_existing_points() != 0) {
    total_size += 2 + 1;
  }

  // bool x_symmetry = 24;
  if (this->x_symmetry() != 0) {
    total_size += 2 + 1;
  }

  // bool y_symmetry = 25;
  if (this->y_symmetry() != 0) {
    total_size += 2 + 1;
  }

  // bool z_symmetry = 26;
  if (this->z_symmetry() != 0) {
    total_size += 2 + 1;
  }

  // int64 background_n = 30;
  if (this->background_n() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_background_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MeshControl)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MeshControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MeshControl)
    MergeFrom(*source);
  }
}

void MeshControl::MergeFrom(const MeshControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MeshControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bounds()) {
    _internal_mutable_bounds()->::Messages::Extrema::MergeFrom(from._internal_bounds());
  }
  if (from.target_n() != 0) {
    _internal_set_target_n(from._internal_target_n());
  }
  if (!(from.size_ratio() <= 0 && from.size_ratio() >= 0)) {
    _internal_set_size_ratio(from._internal_size_ratio());
  }
  if (!(from.size_decay() <= 0 && from.size_decay() >= 0)) {
    _internal_set_size_decay(from._internal_size_decay());
  }
  if (!(from.size_exponent() <= 0 && from.size_exponent() >= 0)) {
    _internal_set_size_exponent(from._internal_size_exponent());
  }
  if (!(from.curv_ratio() <= 0 && from.curv_ratio() >= 0)) {
    _internal_set_curv_ratio(from._internal_curv_ratio());
  }
  if (!(from.curv_decay() <= 0 && from.curv_decay() >= 0)) {
    _internal_set_curv_decay(from._internal_curv_decay());
  }
  if (!(from.curv_exponent() <= 0 && from.curv_exponent() >= 0)) {
    _internal_set_curv_exponent(from._internal_curv_exponent());
  }
  if (!(from.node_radius() <= 0 && from.node_radius() >= 0)) {
    _internal_set_node_radius(from._internal_node_radius());
  }
  if (from.max_iterations() != 0) {
    _internal_set_max_iterations(from._internal_max_iterations());
  }
  if (from.interior() != 0) {
    _internal_set_interior(from._internal_interior());
  }
  if (from.exterior() != 0) {
    _internal_set_exterior(from._internal_exterior());
  }
  if (from.shell() != 0) {
    _internal_set_shell(from._internal_shell());
  }
  if (from.equalize() != 0) {
    _internal_set_equalize(from._internal_equalize());
  }
  if (from.smooth() != 0) {
    _internal_set_smooth(from._internal_smooth());
  }
  if (from.include_background() != 0) {
    _internal_set_include_background(from._internal_include_background());
  }
  if (from.keep_existing_points() != 0) {
    _internal_set_keep_existing_points(from._internal_keep_existing_points());
  }
  if (from.x_symmetry() != 0) {
    _internal_set_x_symmetry(from._internal_x_symmetry());
  }
  if (from.y_symmetry() != 0) {
    _internal_set_y_symmetry(from._internal_y_symmetry());
  }
  if (from.z_symmetry() != 0) {
    _internal_set_z_symmetry(from._internal_z_symmetry());
  }
  if (from.background_n() != 0) {
    _internal_set_background_n(from._internal_background_n());
  }
}

void MeshControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MeshControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshControl::CopyFrom(const MeshControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MeshControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshControl::IsInitialized() const {
  return true;
}

void MeshControl::InternalSwap(MeshControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeshControl, background_n_)
      + sizeof(MeshControl::background_n_)
      - PROTOBUF_FIELD_OFFSET(MeshControl, bounds_)>(
          reinterpret_cast<char*>(&bounds_),
          reinterpret_cast<char*>(&other->bounds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TreeControl::InitAsDefaultInstance() {
  ::Messages::_TreeControl_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::Messages::Extrema*>(
      ::Messages::Extrema::internal_default_instance());
}
class TreeControl::_Internal {
 public:
  static const ::Messages::Extrema& bounds(const TreeControl* msg);
};

const ::Messages::Extrema&
TreeControl::_Internal::bounds(const TreeControl* msg) {
  return *msg->bounds_;
}
void TreeControl::clear_bounds() {
  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
TreeControl::TreeControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Messages.TreeControl)
}
TreeControl::TreeControl(const TreeControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bounds()) {
    bounds_ = new ::Messages::Extrema(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  ::memcpy(&min_depth_, &from.min_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_size_) -
    reinterpret_cast<char*>(&min_depth_)) + sizeof(max_size_));
  // @@protoc_insertion_point(copy_constructor:Messages.TreeControl)
}

void TreeControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreeControl_spatial_2eproto.base);
  ::memset(&bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_size_) -
      reinterpret_cast<char*>(&bounds_)) + sizeof(max_size_));
}

TreeControl::~TreeControl() {
  // @@protoc_insertion_point(destructor:Messages.TreeControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TreeControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bounds_;
}

void TreeControl::ArenaDtor(void* object) {
  TreeControl* _this = reinterpret_cast< TreeControl* >(object);
  (void)_this;
}
void TreeControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TreeControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeControl& TreeControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreeControl_spatial_2eproto.base);
  return *internal_default_instance();
}


void TreeControl::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.TreeControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  ::memset(&min_depth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_size_) -
      reinterpret_cast<char*>(&min_depth_)) + sizeof(max_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TreeControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 min_depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Messages.Extrema bounds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.TreeControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_depth = 1;
  if (this->min_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_min_depth(), target);
  }

  // int32 max_depth = 2;
  if (this->max_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_depth(), target);
  }

  // int64 max_size = 3;
  if (this->max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_size(), target);
  }

  // .Messages.Extrema bounds = 10;
  if (this->has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bounds(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.TreeControl)
  return target;
}

size_t TreeControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.TreeControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Messages.Extrema bounds = 10;
  if (this->has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  // int32 min_depth = 1;
  if (this->min_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_depth());
  }

  // int32 max_depth = 2;
  if (this->max_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_depth());
  }

  // int64 max_size = 3;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.TreeControl)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreeControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.TreeControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.TreeControl)
    MergeFrom(*source);
  }
}

void TreeControl::MergeFrom(const TreeControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.TreeControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bounds()) {
    _internal_mutable_bounds()->::Messages::Extrema::MergeFrom(from._internal_bounds());
  }
  if (from.min_depth() != 0) {
    _internal_set_min_depth(from._internal_min_depth());
  }
  if (from.max_depth() != 0) {
    _internal_set_max_depth(from._internal_max_depth());
  }
  if (from.max_size() != 0) {
    _internal_set_max_size(from._internal_max_size());
  }
}

void TreeControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.TreeControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeControl::CopyFrom(const TreeControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.TreeControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeControl::IsInitialized() const {
  return true;
}

void TreeControl::InternalSwap(TreeControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TreeControl, max_size_)
      + sizeof(TreeControl::max_size_)
      - PROTOBUF_FIELD_OFFSET(TreeControl, bounds_)>(
          reinterpret_cast<char*>(&bounds_),
          reinterpret_cast<char*>(&other->bounds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkControl::InitAsDefaultInstance() {
}
class NetworkControl::_Internal {
 public:
};

NetworkControl::NetworkControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Messages.NetworkControl)
}
NetworkControl::NetworkControl(const NetworkControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Messages.NetworkControl)
}

void NetworkControl::SharedCtor() {
}

NetworkControl::~NetworkControl() {
  // @@protoc_insertion_point(destructor:Messages.NetworkControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkControl::ArenaDtor(void* object) {
  NetworkControl* _this = reinterpret_cast< NetworkControl* >(object);
  (void)_this;
}
void NetworkControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkControl& NetworkControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkControl_spatial_2eproto.base);
  return *internal_default_instance();
}


void NetworkControl::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.NetworkControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.NetworkControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.NetworkControl)
  return target;
}

size_t NetworkControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.NetworkControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.NetworkControl)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.NetworkControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.NetworkControl)
    MergeFrom(*source);
  }
}

void NetworkControl::MergeFrom(const NetworkControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.NetworkControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetworkControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.NetworkControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkControl::CopyFrom(const NetworkControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.NetworkControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkControl::IsInitialized() const {
  return true;
}

void NetworkControl::InternalSwap(NetworkControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkControl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Messages::Zone* Arena::CreateMaybeMessage< ::Messages::Zone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Messages::Zone >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::Topology* Arena::CreateMaybeMessage< ::Messages::Topology >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Messages::Topology >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::GridControl* Arena::CreateMaybeMessage< ::Messages::GridControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Messages::GridControl >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MeshControl* Arena::CreateMaybeMessage< ::Messages::MeshControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Messages::MeshControl >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::TreeControl* Arena::CreateMaybeMessage< ::Messages::TreeControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Messages::TreeControl >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::NetworkControl* Arena::CreateMaybeMessage< ::Messages::NetworkControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Messages::NetworkControl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
