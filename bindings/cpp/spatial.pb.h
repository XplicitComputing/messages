// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spatial.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spatial_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spatial_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spatial_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spatial_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spatial_2eproto;
namespace Messages {
class GridControl;
class GridControlDefaultTypeInternal;
extern GridControlDefaultTypeInternal _GridControl_default_instance_;
class MeshControl;
class MeshControlDefaultTypeInternal;
extern MeshControlDefaultTypeInternal _MeshControl_default_instance_;
class NetworkControl;
class NetworkControlDefaultTypeInternal;
extern NetworkControlDefaultTypeInternal _NetworkControl_default_instance_;
class Topology;
class TopologyDefaultTypeInternal;
extern TopologyDefaultTypeInternal _Topology_default_instance_;
class TreeControl;
class TreeControlDefaultTypeInternal;
extern TreeControlDefaultTypeInternal _TreeControl_default_instance_;
class Zone;
class ZoneDefaultTypeInternal;
extern ZoneDefaultTypeInternal _Zone_default_instance_;
}  // namespace Messages
PROTOBUF_NAMESPACE_OPEN
template<> ::Messages::GridControl* Arena::CreateMaybeMessage<::Messages::GridControl>(Arena*);
template<> ::Messages::MeshControl* Arena::CreateMaybeMessage<::Messages::MeshControl>(Arena*);
template<> ::Messages::NetworkControl* Arena::CreateMaybeMessage<::Messages::NetworkControl>(Arena*);
template<> ::Messages::Topology* Arena::CreateMaybeMessage<::Messages::Topology>(Arena*);
template<> ::Messages::TreeControl* Arena::CreateMaybeMessage<::Messages::TreeControl>(Arena*);
template<> ::Messages::Zone* Arena::CreateMaybeMessage<::Messages::Zone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Messages {

// ===================================================================

class Zone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Zone) */ {
 public:
  inline Zone() : Zone(nullptr) {};
  virtual ~Zone();

  Zone(const Zone& from);
  Zone(Zone&& from) noexcept
    : Zone() {
    *this = ::std::move(from);
  }

  inline Zone& operator=(const Zone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Zone& operator=(Zone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Zone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Zone* internal_default_instance() {
    return reinterpret_cast<const Zone*>(
               &_Zone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Zone& a, Zone& b) {
    a.Swap(&b);
  }
  inline void Swap(Zone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Zone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Zone* New() const final {
    return CreateMaybeMessage<Zone>(nullptr);
  }

  Zone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Zone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Zone& from);
  void MergeFrom(const Zone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Zone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Zone";
  }
  protected:
  explicit Zone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spatial_2eproto);
    return ::descriptor_table_spatial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTerminalPositionFieldNumber = 11,
    kSpecificElementsFieldNumber = 12,
    kNameFieldNumber = 1,
    kCommentsFieldNumber = 7,
    kInfoFieldNumber = 8,
    kBoundsFieldNumber = 10,
    kIdFieldNumber = 2,
    kDimensionalityFieldNumber = 3,
    kNumElementsFieldNumber = 5,
    kOffsetFieldNumber = 6,
  };
  // repeated float terminal_position = 11;
  int terminal_position_size() const;
  private:
  int _internal_terminal_position_size() const;
  public:
  void clear_terminal_position();
  private:
  float _internal_terminal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_terminal_position() const;
  void _internal_add_terminal_position(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_terminal_position();
  public:
  float terminal_position(int index) const;
  void set_terminal_position(int index, float value);
  void add_terminal_position(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      terminal_position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_terminal_position();

  // repeated int32 specific_elements = 12;
  int specific_elements_size() const;
  private:
  int _internal_specific_elements_size() const;
  public:
  void clear_specific_elements();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_specific_elements(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_specific_elements() const;
  void _internal_add_specific_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_specific_elements();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 specific_elements(int index) const;
  void set_specific_elements(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_specific_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      specific_elements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_specific_elements();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string comments = 7;
  void clear_comments();
  const std::string& comments() const;
  void set_comments(const std::string& value);
  void set_comments(std::string&& value);
  void set_comments(const char* value);
  void set_comments(const char* value, size_t size);
  std::string* mutable_comments();
  std::string* release_comments();
  void set_allocated_comments(std::string* comments);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_comments();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_comments(
      std::string* comments);
  private:
  const std::string& _internal_comments() const;
  void _internal_set_comments(const std::string& value);
  std::string* _internal_mutable_comments();
  public:

  // string info = 8;
  void clear_info();
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_info();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_info(
      std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // .Messages.Extrema bounds = 10;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::Messages::Extrema& bounds() const;
  ::Messages::Extrema* release_bounds();
  ::Messages::Extrema* mutable_bounds();
  void set_allocated_bounds(::Messages::Extrema* bounds);
  private:
  const ::Messages::Extrema& _internal_bounds() const;
  ::Messages::Extrema* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::Messages::Extrema* bounds);
  ::Messages::Extrema* unsafe_arena_release_bounds();

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dimensionality = 3;
  void clear_dimensionality();
  ::PROTOBUF_NAMESPACE_ID::int32 dimensionality() const;
  void set_dimensionality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dimensionality() const;
  void _internal_set_dimensionality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 num_elements = 5;
  void clear_num_elements();
  ::PROTOBUF_NAMESPACE_ID::int64 num_elements() const;
  void set_num_elements(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_elements() const;
  void _internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offset = 6;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Messages.Zone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > terminal_position_;
  mutable std::atomic<int> _terminal_position_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > specific_elements_;
  mutable std::atomic<int> _specific_elements_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::Messages::Extrema* bounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 dimensionality_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_elements_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spatial_2eproto;
};
// -------------------------------------------------------------------

class Topology PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Topology) */ {
 public:
  inline Topology() : Topology(nullptr) {};
  virtual ~Topology();

  Topology(const Topology& from);
  Topology(Topology&& from) noexcept
    : Topology() {
    *this = ::std::move(from);
  }

  inline Topology& operator=(const Topology& from) {
    CopyFrom(from);
    return *this;
  }
  inline Topology& operator=(Topology&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Topology& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Topology* internal_default_instance() {
    return reinterpret_cast<const Topology*>(
               &_Topology_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Topology& a, Topology& b) {
    a.Swap(&b);
  }
  inline void Swap(Topology* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Topology* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Topology* New() const final {
    return CreateMaybeMessage<Topology>(nullptr);
  }

  Topology* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Topology>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Topology& from);
  void MergeFrom(const Topology& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Topology* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Topology";
  }
  protected:
  explicit Topology(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spatial_2eproto);
    return ::descriptor_table_spatial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionFieldNumber = 8,
    kDataFieldNumber = 9,
    kGroupsFieldNumber = 20,
    kLoopsFieldNumber = 21,
    kSurfacesFieldNumber = 22,
    kVolumesFieldNumber = 23,
    kLocationsFieldNumber = 26,
    kNameFieldNumber = 1,
    kFilenameFieldNumber = 30,
    kNodesFieldNumber = 10,
    kEdgesFieldNumber = 11,
    kInteriorEdgesFieldNumber = 12,
    kFacesFieldNumber = 13,
    kInteriorFacesFieldNumber = 14,
    kCellsFieldNumber = 15,
    kRevisionFieldNumber = 31,
    kTypeFieldNumber = 2,
    kNdimFieldNumber = 3,
    kBasisFieldNumber = 4,
  };
  // repeated double resolution = 8;
  int resolution_size() const;
  private:
  int _internal_resolution_size() const;
  public:
  void clear_resolution();
  private:
  double _internal_resolution(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_resolution() const;
  void _internal_add_resolution(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_resolution();
  public:
  double resolution(int index) const;
  void set_resolution(int index, double value);
  void add_resolution(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      resolution() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_resolution();

  // repeated .Messages.Vector64 data = 9;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::Messages::Vector64* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
      mutable_data();
  private:
  const ::Messages::Vector64& _internal_data(int index) const;
  ::Messages::Vector64* _internal_add_data();
  public:
  const ::Messages::Vector64& data(int index) const;
  ::Messages::Vector64* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
      data() const;

  // repeated .Messages.Zone groups = 20;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::Messages::Zone* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >*
      mutable_groups();
  private:
  const ::Messages::Zone& _internal_groups(int index) const;
  ::Messages::Zone* _internal_add_groups();
  public:
  const ::Messages::Zone& groups(int index) const;
  ::Messages::Zone* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >&
      groups() const;

  // repeated .Messages.Zone loops = 21;
  int loops_size() const;
  private:
  int _internal_loops_size() const;
  public:
  void clear_loops();
  ::Messages::Zone* mutable_loops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >*
      mutable_loops();
  private:
  const ::Messages::Zone& _internal_loops(int index) const;
  ::Messages::Zone* _internal_add_loops();
  public:
  const ::Messages::Zone& loops(int index) const;
  ::Messages::Zone* add_loops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >&
      loops() const;

  // repeated .Messages.Zone surfaces = 22;
  int surfaces_size() const;
  private:
  int _internal_surfaces_size() const;
  public:
  void clear_surfaces();
  ::Messages::Zone* mutable_surfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >*
      mutable_surfaces();
  private:
  const ::Messages::Zone& _internal_surfaces(int index) const;
  ::Messages::Zone* _internal_add_surfaces();
  public:
  const ::Messages::Zone& surfaces(int index) const;
  ::Messages::Zone* add_surfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >&
      surfaces() const;

  // repeated .Messages.Zone volumes = 23;
  int volumes_size() const;
  private:
  int _internal_volumes_size() const;
  public:
  void clear_volumes();
  ::Messages::Zone* mutable_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >*
      mutable_volumes();
  private:
  const ::Messages::Zone& _internal_volumes(int index) const;
  ::Messages::Zone* _internal_add_volumes();
  public:
  const ::Messages::Zone& volumes(int index) const;
  ::Messages::Zone* add_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >&
      volumes() const;

  // repeated int32 locations = 26;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_locations() const;
  void _internal_add_locations(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_locations();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 locations(int index) const;
  void set_locations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_locations(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      locations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_locations();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string filename = 30;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .Messages.Elements nodes = 10;
  bool has_nodes() const;
  private:
  bool _internal_has_nodes() const;
  public:
  void clear_nodes();
  const ::Messages::Elements& nodes() const;
  ::Messages::Elements* release_nodes();
  ::Messages::Elements* mutable_nodes();
  void set_allocated_nodes(::Messages::Elements* nodes);
  private:
  const ::Messages::Elements& _internal_nodes() const;
  ::Messages::Elements* _internal_mutable_nodes();
  public:
  void unsafe_arena_set_allocated_nodes(
      ::Messages::Elements* nodes);
  ::Messages::Elements* unsafe_arena_release_nodes();

  // .Messages.Elements edges = 11;
  bool has_edges() const;
  private:
  bool _internal_has_edges() const;
  public:
  void clear_edges();
  const ::Messages::Elements& edges() const;
  ::Messages::Elements* release_edges();
  ::Messages::Elements* mutable_edges();
  void set_allocated_edges(::Messages::Elements* edges);
  private:
  const ::Messages::Elements& _internal_edges() const;
  ::Messages::Elements* _internal_mutable_edges();
  public:
  void unsafe_arena_set_allocated_edges(
      ::Messages::Elements* edges);
  ::Messages::Elements* unsafe_arena_release_edges();

  // .Messages.Elements interior_edges = 12;
  bool has_interior_edges() const;
  private:
  bool _internal_has_interior_edges() const;
  public:
  void clear_interior_edges();
  const ::Messages::Elements& interior_edges() const;
  ::Messages::Elements* release_interior_edges();
  ::Messages::Elements* mutable_interior_edges();
  void set_allocated_interior_edges(::Messages::Elements* interior_edges);
  private:
  const ::Messages::Elements& _internal_interior_edges() const;
  ::Messages::Elements* _internal_mutable_interior_edges();
  public:
  void unsafe_arena_set_allocated_interior_edges(
      ::Messages::Elements* interior_edges);
  ::Messages::Elements* unsafe_arena_release_interior_edges();

  // .Messages.Elements faces = 13;
  bool has_faces() const;
  private:
  bool _internal_has_faces() const;
  public:
  void clear_faces();
  const ::Messages::Elements& faces() const;
  ::Messages::Elements* release_faces();
  ::Messages::Elements* mutable_faces();
  void set_allocated_faces(::Messages::Elements* faces);
  private:
  const ::Messages::Elements& _internal_faces() const;
  ::Messages::Elements* _internal_mutable_faces();
  public:
  void unsafe_arena_set_allocated_faces(
      ::Messages::Elements* faces);
  ::Messages::Elements* unsafe_arena_release_faces();

  // .Messages.Elements interior_faces = 14;
  bool has_interior_faces() const;
  private:
  bool _internal_has_interior_faces() const;
  public:
  void clear_interior_faces();
  const ::Messages::Elements& interior_faces() const;
  ::Messages::Elements* release_interior_faces();
  ::Messages::Elements* mutable_interior_faces();
  void set_allocated_interior_faces(::Messages::Elements* interior_faces);
  private:
  const ::Messages::Elements& _internal_interior_faces() const;
  ::Messages::Elements* _internal_mutable_interior_faces();
  public:
  void unsafe_arena_set_allocated_interior_faces(
      ::Messages::Elements* interior_faces);
  ::Messages::Elements* unsafe_arena_release_interior_faces();

  // .Messages.Elements cells = 15;
  bool has_cells() const;
  private:
  bool _internal_has_cells() const;
  public:
  void clear_cells();
  const ::Messages::Elements& cells() const;
  ::Messages::Elements* release_cells();
  ::Messages::Elements* mutable_cells();
  void set_allocated_cells(::Messages::Elements* cells);
  private:
  const ::Messages::Elements& _internal_cells() const;
  ::Messages::Elements* _internal_mutable_cells();
  public:
  void unsafe_arena_set_allocated_cells(
      ::Messages::Elements* cells);
  ::Messages::Elements* unsafe_arena_release_cells();

  // .Messages.Revision revision = 31;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const ::Messages::Revision& revision() const;
  ::Messages::Revision* release_revision();
  ::Messages::Revision* mutable_revision();
  void set_allocated_revision(::Messages::Revision* revision);
  private:
  const ::Messages::Revision& _internal_revision() const;
  ::Messages::Revision* _internal_mutable_revision();
  public:
  void unsafe_arena_set_allocated_revision(
      ::Messages::Revision* revision);
  ::Messages::Revision* unsafe_arena_release_revision();

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ndim = 3;
  void clear_ndim();
  ::PROTOBUF_NAMESPACE_ID::int32 ndim() const;
  void set_ndim(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ndim() const;
  void _internal_set_ndim(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 basis = 4;
  void clear_basis();
  ::PROTOBUF_NAMESPACE_ID::int32 basis() const;
  void set_basis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_basis() const;
  void _internal_set_basis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Messages.Topology)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > resolution_;
  mutable std::atomic<int> _resolution_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone > groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone > loops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone > surfaces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone > volumes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > locations_;
  mutable std::atomic<int> _locations_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::Messages::Elements* nodes_;
  ::Messages::Elements* edges_;
  ::Messages::Elements* interior_edges_;
  ::Messages::Elements* faces_;
  ::Messages::Elements* interior_faces_;
  ::Messages::Elements* cells_;
  ::Messages::Revision* revision_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 ndim_;
  ::PROTOBUF_NAMESPACE_ID::int32 basis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spatial_2eproto;
};
// -------------------------------------------------------------------

class GridControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.GridControl) */ {
 public:
  inline GridControl() : GridControl(nullptr) {};
  virtual ~GridControl();

  GridControl(const GridControl& from);
  GridControl(GridControl&& from) noexcept
    : GridControl() {
    *this = ::std::move(from);
  }

  inline GridControl& operator=(const GridControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridControl& operator=(GridControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GridControl* internal_default_instance() {
    return reinterpret_cast<const GridControl*>(
               &_GridControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GridControl& a, GridControl& b) {
    a.Swap(&b);
  }
  inline void Swap(GridControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridControl* New() const final {
    return CreateMaybeMessage<GridControl>(nullptr);
  }

  GridControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridControl& from);
  void MergeFrom(const GridControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.GridControl";
  }
  protected:
  explicit GridControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spatial_2eproto);
    return ::descriptor_table_spatial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kSpacingFieldNumber = 3,
    kGradingFieldNumber = 4,
    kBoundsFieldNumber = 10,
    kBasisFieldNumber = 1,
  };
  // repeated int32 size = 2;
  int size_size() const;
  private:
  int _internal_size_size() const;
  public:
  void clear_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_size() const;
  void _internal_add_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 size(int index) const;
  void set_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_size();

  // repeated double spacing = 3;
  int spacing_size() const;
  private:
  int _internal_spacing_size() const;
  public:
  void clear_spacing();
  private:
  double _internal_spacing(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_spacing() const;
  void _internal_add_spacing(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_spacing();
  public:
  double spacing(int index) const;
  void set_spacing(int index, double value);
  void add_spacing(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      spacing() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_spacing();

  // repeated double grading = 4;
  int grading_size() const;
  private:
  int _internal_grading_size() const;
  public:
  void clear_grading();
  private:
  double _internal_grading(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_grading() const;
  void _internal_add_grading(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_grading();
  public:
  double grading(int index) const;
  void set_grading(int index, double value);
  void add_grading(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      grading() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_grading();

  // .Messages.Extrema bounds = 10;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::Messages::Extrema& bounds() const;
  ::Messages::Extrema* release_bounds();
  ::Messages::Extrema* mutable_bounds();
  void set_allocated_bounds(::Messages::Extrema* bounds);
  private:
  const ::Messages::Extrema& _internal_bounds() const;
  ::Messages::Extrema* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::Messages::Extrema* bounds);
  ::Messages::Extrema* unsafe_arena_release_bounds();

  // int32 basis = 1;
  void clear_basis();
  ::PROTOBUF_NAMESPACE_ID::int32 basis() const;
  void set_basis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_basis() const;
  void _internal_set_basis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Messages.GridControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > size_;
  mutable std::atomic<int> _size_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > spacing_;
  mutable std::atomic<int> _spacing_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > grading_;
  mutable std::atomic<int> _grading_cached_byte_size_;
  ::Messages::Extrema* bounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 basis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spatial_2eproto;
};
// -------------------------------------------------------------------

class MeshControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.MeshControl) */ {
 public:
  inline MeshControl() : MeshControl(nullptr) {};
  virtual ~MeshControl();

  MeshControl(const MeshControl& from);
  MeshControl(MeshControl&& from) noexcept
    : MeshControl() {
    *this = ::std::move(from);
  }

  inline MeshControl& operator=(const MeshControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshControl& operator=(MeshControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshControl* internal_default_instance() {
    return reinterpret_cast<const MeshControl*>(
               &_MeshControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MeshControl& a, MeshControl& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshControl* New() const final {
    return CreateMaybeMessage<MeshControl>(nullptr);
  }

  MeshControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshControl& from);
  void MergeFrom(const MeshControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.MeshControl";
  }
  protected:
  explicit MeshControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spatial_2eproto);
    return ::descriptor_table_spatial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundsFieldNumber = 10,
    kTargetNFieldNumber = 1,
    kSizeRatioFieldNumber = 3,
    kSizeDecayFieldNumber = 4,
    kSizeExponentFieldNumber = 5,
    kCurvRatioFieldNumber = 6,
    kCurvDecayFieldNumber = 7,
    kCurvExponentFieldNumber = 8,
    kNodeRadiusFieldNumber = 9,
    kMaxIterationsFieldNumber = 2,
    kInteriorFieldNumber = 12,
    kExteriorFieldNumber = 13,
    kShellFieldNumber = 14,
    kEqualizeFieldNumber = 15,
    kSmoothFieldNumber = 16,
    kIncludeBackgroundFieldNumber = 18,
    kKeepExistingPointsFieldNumber = 19,
    kXSymmetryFieldNumber = 24,
    kYSymmetryFieldNumber = 25,
    kZSymmetryFieldNumber = 26,
    kBackgroundNFieldNumber = 30,
  };
  // .Messages.Extrema bounds = 10;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::Messages::Extrema& bounds() const;
  ::Messages::Extrema* release_bounds();
  ::Messages::Extrema* mutable_bounds();
  void set_allocated_bounds(::Messages::Extrema* bounds);
  private:
  const ::Messages::Extrema& _internal_bounds() const;
  ::Messages::Extrema* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::Messages::Extrema* bounds);
  ::Messages::Extrema* unsafe_arena_release_bounds();

  // int64 target_n = 1;
  void clear_target_n();
  ::PROTOBUF_NAMESPACE_ID::int64 target_n() const;
  void set_target_n(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_target_n() const;
  void _internal_set_target_n(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double size_ratio = 3;
  void clear_size_ratio();
  double size_ratio() const;
  void set_size_ratio(double value);
  private:
  double _internal_size_ratio() const;
  void _internal_set_size_ratio(double value);
  public:

  // double size_decay = 4;
  void clear_size_decay();
  double size_decay() const;
  void set_size_decay(double value);
  private:
  double _internal_size_decay() const;
  void _internal_set_size_decay(double value);
  public:

  // double size_exponent = 5;
  void clear_size_exponent();
  double size_exponent() const;
  void set_size_exponent(double value);
  private:
  double _internal_size_exponent() const;
  void _internal_set_size_exponent(double value);
  public:

  // double curv_ratio = 6;
  void clear_curv_ratio();
  double curv_ratio() const;
  void set_curv_ratio(double value);
  private:
  double _internal_curv_ratio() const;
  void _internal_set_curv_ratio(double value);
  public:

  // double curv_decay = 7;
  void clear_curv_decay();
  double curv_decay() const;
  void set_curv_decay(double value);
  private:
  double _internal_curv_decay() const;
  void _internal_set_curv_decay(double value);
  public:

  // double curv_exponent = 8;
  void clear_curv_exponent();
  double curv_exponent() const;
  void set_curv_exponent(double value);
  private:
  double _internal_curv_exponent() const;
  void _internal_set_curv_exponent(double value);
  public:

  // double node_radius = 9;
  void clear_node_radius();
  double node_radius() const;
  void set_node_radius(double value);
  private:
  double _internal_node_radius() const;
  void _internal_set_node_radius(double value);
  public:

  // int32 max_iterations = 2;
  void clear_max_iterations();
  ::PROTOBUF_NAMESPACE_ID::int32 max_iterations() const;
  void set_max_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_iterations() const;
  void _internal_set_max_iterations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool interior = 12;
  void clear_interior();
  bool interior() const;
  void set_interior(bool value);
  private:
  bool _internal_interior() const;
  void _internal_set_interior(bool value);
  public:

  // bool exterior = 13;
  void clear_exterior();
  bool exterior() const;
  void set_exterior(bool value);
  private:
  bool _internal_exterior() const;
  void _internal_set_exterior(bool value);
  public:

  // bool shell = 14;
  void clear_shell();
  bool shell() const;
  void set_shell(bool value);
  private:
  bool _internal_shell() const;
  void _internal_set_shell(bool value);
  public:

  // bool equalize = 15;
  void clear_equalize();
  bool equalize() const;
  void set_equalize(bool value);
  private:
  bool _internal_equalize() const;
  void _internal_set_equalize(bool value);
  public:

  // bool smooth = 16;
  void clear_smooth();
  bool smooth() const;
  void set_smooth(bool value);
  private:
  bool _internal_smooth() const;
  void _internal_set_smooth(bool value);
  public:

  // bool include_background = 18;
  void clear_include_background();
  bool include_background() const;
  void set_include_background(bool value);
  private:
  bool _internal_include_background() const;
  void _internal_set_include_background(bool value);
  public:

  // bool keep_existing_points = 19;
  void clear_keep_existing_points();
  bool keep_existing_points() const;
  void set_keep_existing_points(bool value);
  private:
  bool _internal_keep_existing_points() const;
  void _internal_set_keep_existing_points(bool value);
  public:

  // bool x_symmetry = 24;
  void clear_x_symmetry();
  bool x_symmetry() const;
  void set_x_symmetry(bool value);
  private:
  bool _internal_x_symmetry() const;
  void _internal_set_x_symmetry(bool value);
  public:

  // bool y_symmetry = 25;
  void clear_y_symmetry();
  bool y_symmetry() const;
  void set_y_symmetry(bool value);
  private:
  bool _internal_y_symmetry() const;
  void _internal_set_y_symmetry(bool value);
  public:

  // bool z_symmetry = 26;
  void clear_z_symmetry();
  bool z_symmetry() const;
  void set_z_symmetry(bool value);
  private:
  bool _internal_z_symmetry() const;
  void _internal_set_z_symmetry(bool value);
  public:

  // int64 background_n = 30;
  void clear_background_n();
  ::PROTOBUF_NAMESPACE_ID::int64 background_n() const;
  void set_background_n(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_background_n() const;
  void _internal_set_background_n(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Messages.MeshControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Messages::Extrema* bounds_;
  ::PROTOBUF_NAMESPACE_ID::int64 target_n_;
  double size_ratio_;
  double size_decay_;
  double size_exponent_;
  double curv_ratio_;
  double curv_decay_;
  double curv_exponent_;
  double node_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_iterations_;
  bool interior_;
  bool exterior_;
  bool shell_;
  bool equalize_;
  bool smooth_;
  bool include_background_;
  bool keep_existing_points_;
  bool x_symmetry_;
  bool y_symmetry_;
  bool z_symmetry_;
  ::PROTOBUF_NAMESPACE_ID::int64 background_n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spatial_2eproto;
};
// -------------------------------------------------------------------

class TreeControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.TreeControl) */ {
 public:
  inline TreeControl() : TreeControl(nullptr) {};
  virtual ~TreeControl();

  TreeControl(const TreeControl& from);
  TreeControl(TreeControl&& from) noexcept
    : TreeControl() {
    *this = ::std::move(from);
  }

  inline TreeControl& operator=(const TreeControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline TreeControl& operator=(TreeControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TreeControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeControl* internal_default_instance() {
    return reinterpret_cast<const TreeControl*>(
               &_TreeControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TreeControl& a, TreeControl& b) {
    a.Swap(&b);
  }
  inline void Swap(TreeControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TreeControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TreeControl* New() const final {
    return CreateMaybeMessage<TreeControl>(nullptr);
  }

  TreeControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TreeControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TreeControl& from);
  void MergeFrom(const TreeControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TreeControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.TreeControl";
  }
  protected:
  explicit TreeControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spatial_2eproto);
    return ::descriptor_table_spatial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundsFieldNumber = 10,
    kMinDepthFieldNumber = 1,
    kMaxDepthFieldNumber = 2,
    kMaxSizeFieldNumber = 3,
  };
  // .Messages.Extrema bounds = 10;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::Messages::Extrema& bounds() const;
  ::Messages::Extrema* release_bounds();
  ::Messages::Extrema* mutable_bounds();
  void set_allocated_bounds(::Messages::Extrema* bounds);
  private:
  const ::Messages::Extrema& _internal_bounds() const;
  ::Messages::Extrema* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::Messages::Extrema* bounds);
  ::Messages::Extrema* unsafe_arena_release_bounds();

  // int32 min_depth = 1;
  void clear_min_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 min_depth() const;
  void set_min_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_depth() const;
  void _internal_set_min_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_depth = 2;
  void clear_max_depth();
  ::PROTOBUF_NAMESPACE_ID::int32 max_depth() const;
  void set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_depth() const;
  void _internal_set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 max_size = 3;
  void clear_max_size();
  ::PROTOBUF_NAMESPACE_ID::int64 max_size() const;
  void set_max_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_size() const;
  void _internal_set_max_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Messages.TreeControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Messages::Extrema* bounds_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_depth_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_depth_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spatial_2eproto;
};
// -------------------------------------------------------------------

class NetworkControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.NetworkControl) */ {
 public:
  inline NetworkControl() : NetworkControl(nullptr) {};
  virtual ~NetworkControl();

  NetworkControl(const NetworkControl& from);
  NetworkControl(NetworkControl&& from) noexcept
    : NetworkControl() {
    *this = ::std::move(from);
  }

  inline NetworkControl& operator=(const NetworkControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkControl& operator=(NetworkControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkControl* internal_default_instance() {
    return reinterpret_cast<const NetworkControl*>(
               &_NetworkControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NetworkControl& a, NetworkControl& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkControl* New() const final {
    return CreateMaybeMessage<NetworkControl>(nullptr);
  }

  NetworkControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkControl& from);
  void MergeFrom(const NetworkControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.NetworkControl";
  }
  protected:
  explicit NetworkControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spatial_2eproto);
    return ::descriptor_table_spatial_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Messages.NetworkControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spatial_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Zone

// string name = 1;
inline void Zone::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Zone::name() const {
  // @@protoc_insertion_point(field_get:Messages.Zone.name)
  return _internal_name();
}
inline void Zone::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Messages.Zone.name)
}
inline std::string* Zone::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Messages.Zone.name)
  return _internal_mutable_name();
}
inline const std::string& Zone::_internal_name() const {
  return name_.Get();
}
inline void Zone::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Zone::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Zone.name)
}
inline void Zone::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Messages.Zone.name)
}
inline void Zone::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Messages.Zone.name)
}
inline std::string* Zone::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Zone::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Zone.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Zone::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Messages.Zone.name)
}
inline std::string* Zone::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Zone.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Zone::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Zone.name)
}

// int32 id = 2;
inline void Zone::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Zone::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Zone::id() const {
  // @@protoc_insertion_point(field_get:Messages.Zone.id)
  return _internal_id();
}
inline void Zone::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Zone::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Messages.Zone.id)
}

// int32 dimensionality = 3;
inline void Zone::clear_dimensionality() {
  dimensionality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Zone::_internal_dimensionality() const {
  return dimensionality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Zone::dimensionality() const {
  // @@protoc_insertion_point(field_get:Messages.Zone.dimensionality)
  return _internal_dimensionality();
}
inline void Zone::_internal_set_dimensionality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dimensionality_ = value;
}
inline void Zone::set_dimensionality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dimensionality(value);
  // @@protoc_insertion_point(field_set:Messages.Zone.dimensionality)
}

// int64 num_elements = 5;
inline void Zone::clear_num_elements() {
  num_elements_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Zone::_internal_num_elements() const {
  return num_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Zone::num_elements() const {
  // @@protoc_insertion_point(field_get:Messages.Zone.num_elements)
  return _internal_num_elements();
}
inline void Zone::_internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_elements_ = value;
}
inline void Zone::set_num_elements(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_elements(value);
  // @@protoc_insertion_point(field_set:Messages.Zone.num_elements)
}

// int64 offset = 6;
inline void Zone::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Zone::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Zone::offset() const {
  // @@protoc_insertion_point(field_get:Messages.Zone.offset)
  return _internal_offset();
}
inline void Zone::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offset_ = value;
}
inline void Zone::set_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Messages.Zone.offset)
}

// string comments = 7;
inline void Zone::clear_comments() {
  comments_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Zone::comments() const {
  // @@protoc_insertion_point(field_get:Messages.Zone.comments)
  return _internal_comments();
}
inline void Zone::set_comments(const std::string& value) {
  _internal_set_comments(value);
  // @@protoc_insertion_point(field_set:Messages.Zone.comments)
}
inline std::string* Zone::mutable_comments() {
  // @@protoc_insertion_point(field_mutable:Messages.Zone.comments)
  return _internal_mutable_comments();
}
inline const std::string& Zone::_internal_comments() const {
  return comments_.Get();
}
inline void Zone::_internal_set_comments(const std::string& value) {
  
  comments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Zone::set_comments(std::string&& value) {
  
  comments_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Zone.comments)
}
inline void Zone::set_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Messages.Zone.comments)
}
inline void Zone::set_comments(const char* value,
    size_t size) {
  
  comments_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Messages.Zone.comments)
}
inline std::string* Zone::_internal_mutable_comments() {
  
  return comments_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Zone::release_comments() {
  // @@protoc_insertion_point(field_release:Messages.Zone.comments)
  return comments_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Zone::set_allocated_comments(std::string* comments) {
  if (comments != nullptr) {
    
  } else {
    
  }
  comments_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comments,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Messages.Zone.comments)
}
inline std::string* Zone::unsafe_arena_release_comments() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Zone.comments)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return comments_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Zone::unsafe_arena_set_allocated_comments(
    std::string* comments) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (comments != nullptr) {
    
  } else {
    
  }
  comments_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      comments, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Zone.comments)
}

// string info = 8;
inline void Zone::clear_info() {
  info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Zone::info() const {
  // @@protoc_insertion_point(field_get:Messages.Zone.info)
  return _internal_info();
}
inline void Zone::set_info(const std::string& value) {
  _internal_set_info(value);
  // @@protoc_insertion_point(field_set:Messages.Zone.info)
}
inline std::string* Zone::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Messages.Zone.info)
  return _internal_mutable_info();
}
inline const std::string& Zone::_internal_info() const {
  return info_.Get();
}
inline void Zone::_internal_set_info(const std::string& value) {
  
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Zone::set_info(std::string&& value) {
  
  info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Zone.info)
}
inline void Zone::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Messages.Zone.info)
}
inline void Zone::set_info(const char* value,
    size_t size) {
  
  info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Messages.Zone.info)
}
inline std::string* Zone::_internal_mutable_info() {
  
  return info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Zone::release_info() {
  // @@protoc_insertion_point(field_release:Messages.Zone.info)
  return info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Zone::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Messages.Zone.info)
}
inline std::string* Zone::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Zone.info)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return info_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Zone::unsafe_arena_set_allocated_info(
    std::string* info) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (info != nullptr) {
    
  } else {
    
  }
  info_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      info, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Zone.info)
}

// .Messages.Extrema bounds = 10;
inline bool Zone::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool Zone::has_bounds() const {
  return _internal_has_bounds();
}
inline const ::Messages::Extrema& Zone::_internal_bounds() const {
  const ::Messages::Extrema* p = bounds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Extrema*>(
      &::Messages::_Extrema_default_instance_);
}
inline const ::Messages::Extrema& Zone::bounds() const {
  // @@protoc_insertion_point(field_get:Messages.Zone.bounds)
  return _internal_bounds();
}
inline void Zone::unsafe_arena_set_allocated_bounds(
    ::Messages::Extrema* bounds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Zone.bounds)
}
inline ::Messages::Extrema* Zone::release_bounds() {
  auto temp = unsafe_arena_release_bounds();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Extrema* Zone::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:Messages.Zone.bounds)
  
  ::Messages::Extrema* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::Messages::Extrema* Zone::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Extrema>(GetArena());
    bounds_ = p;
  }
  return bounds_;
}
inline ::Messages::Extrema* Zone::mutable_bounds() {
  // @@protoc_insertion_point(field_mutable:Messages.Zone.bounds)
  return _internal_mutable_bounds();
}
inline void Zone::set_allocated_bounds(::Messages::Extrema* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds)->GetArena();
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:Messages.Zone.bounds)
}

// repeated float terminal_position = 11;
inline int Zone::_internal_terminal_position_size() const {
  return terminal_position_.size();
}
inline int Zone::terminal_position_size() const {
  return _internal_terminal_position_size();
}
inline void Zone::clear_terminal_position() {
  terminal_position_.Clear();
}
inline float Zone::_internal_terminal_position(int index) const {
  return terminal_position_.Get(index);
}
inline float Zone::terminal_position(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Zone.terminal_position)
  return _internal_terminal_position(index);
}
inline void Zone::set_terminal_position(int index, float value) {
  terminal_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Zone.terminal_position)
}
inline void Zone::_internal_add_terminal_position(float value) {
  terminal_position_.Add(value);
}
inline void Zone::add_terminal_position(float value) {
  _internal_add_terminal_position(value);
  // @@protoc_insertion_point(field_add:Messages.Zone.terminal_position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Zone::_internal_terminal_position() const {
  return terminal_position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Zone::terminal_position() const {
  // @@protoc_insertion_point(field_list:Messages.Zone.terminal_position)
  return _internal_terminal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Zone::_internal_mutable_terminal_position() {
  return &terminal_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Zone::mutable_terminal_position() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Zone.terminal_position)
  return _internal_mutable_terminal_position();
}

// repeated int32 specific_elements = 12;
inline int Zone::_internal_specific_elements_size() const {
  return specific_elements_.size();
}
inline int Zone::specific_elements_size() const {
  return _internal_specific_elements_size();
}
inline void Zone::clear_specific_elements() {
  specific_elements_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Zone::_internal_specific_elements(int index) const {
  return specific_elements_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Zone::specific_elements(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Zone.specific_elements)
  return _internal_specific_elements(index);
}
inline void Zone::set_specific_elements(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  specific_elements_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Zone.specific_elements)
}
inline void Zone::_internal_add_specific_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  specific_elements_.Add(value);
}
inline void Zone::add_specific_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_specific_elements(value);
  // @@protoc_insertion_point(field_add:Messages.Zone.specific_elements)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Zone::_internal_specific_elements() const {
  return specific_elements_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Zone::specific_elements() const {
  // @@protoc_insertion_point(field_list:Messages.Zone.specific_elements)
  return _internal_specific_elements();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Zone::_internal_mutable_specific_elements() {
  return &specific_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Zone::mutable_specific_elements() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Zone.specific_elements)
  return _internal_mutable_specific_elements();
}

// -------------------------------------------------------------------

// Topology

// string name = 1;
inline void Topology::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Topology::name() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.name)
  return _internal_name();
}
inline void Topology::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Messages.Topology.name)
}
inline std::string* Topology::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.name)
  return _internal_mutable_name();
}
inline const std::string& Topology::_internal_name() const {
  return name_.Get();
}
inline void Topology::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Topology::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Topology.name)
}
inline void Topology::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Messages.Topology.name)
}
inline void Topology::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Messages.Topology.name)
}
inline std::string* Topology::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Topology::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Topology.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Topology::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.name)
}
inline std::string* Topology::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Topology.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Topology::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.name)
}

// int32 type = 2;
inline void Topology::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topology::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topology::type() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.type)
  return _internal_type();
}
inline void Topology::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Topology::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Messages.Topology.type)
}

// int32 ndim = 3;
inline void Topology::clear_ndim() {
  ndim_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topology::_internal_ndim() const {
  return ndim_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topology::ndim() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.ndim)
  return _internal_ndim();
}
inline void Topology::_internal_set_ndim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ndim_ = value;
}
inline void Topology::set_ndim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ndim(value);
  // @@protoc_insertion_point(field_set:Messages.Topology.ndim)
}

// int32 basis = 4;
inline void Topology::clear_basis() {
  basis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topology::_internal_basis() const {
  return basis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topology::basis() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.basis)
  return _internal_basis();
}
inline void Topology::_internal_set_basis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  basis_ = value;
}
inline void Topology::set_basis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_basis(value);
  // @@protoc_insertion_point(field_set:Messages.Topology.basis)
}

// repeated double resolution = 8;
inline int Topology::_internal_resolution_size() const {
  return resolution_.size();
}
inline int Topology::resolution_size() const {
  return _internal_resolution_size();
}
inline void Topology::clear_resolution() {
  resolution_.Clear();
}
inline double Topology::_internal_resolution(int index) const {
  return resolution_.Get(index);
}
inline double Topology::resolution(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Topology.resolution)
  return _internal_resolution(index);
}
inline void Topology::set_resolution(int index, double value) {
  resolution_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Topology.resolution)
}
inline void Topology::_internal_add_resolution(double value) {
  resolution_.Add(value);
}
inline void Topology::add_resolution(double value) {
  _internal_add_resolution(value);
  // @@protoc_insertion_point(field_add:Messages.Topology.resolution)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Topology::_internal_resolution() const {
  return resolution_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Topology::resolution() const {
  // @@protoc_insertion_point(field_list:Messages.Topology.resolution)
  return _internal_resolution();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Topology::_internal_mutable_resolution() {
  return &resolution_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Topology::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Topology.resolution)
  return _internal_mutable_resolution();
}

// repeated .Messages.Vector64 data = 9;
inline int Topology::_internal_data_size() const {
  return data_.size();
}
inline int Topology::data_size() const {
  return _internal_data_size();
}
inline ::Messages::Vector64* Topology::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
Topology::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Topology.data)
  return &data_;
}
inline const ::Messages::Vector64& Topology::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::Messages::Vector64& Topology::data(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Topology.data)
  return _internal_data(index);
}
inline ::Messages::Vector64* Topology::_internal_add_data() {
  return data_.Add();
}
inline ::Messages::Vector64* Topology::add_data() {
  // @@protoc_insertion_point(field_add:Messages.Topology.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
Topology::data() const {
  // @@protoc_insertion_point(field_list:Messages.Topology.data)
  return data_;
}

// .Messages.Elements nodes = 10;
inline bool Topology::_internal_has_nodes() const {
  return this != internal_default_instance() && nodes_ != nullptr;
}
inline bool Topology::has_nodes() const {
  return _internal_has_nodes();
}
inline const ::Messages::Elements& Topology::_internal_nodes() const {
  const ::Messages::Elements* p = nodes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Elements*>(
      &::Messages::_Elements_default_instance_);
}
inline const ::Messages::Elements& Topology::nodes() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.nodes)
  return _internal_nodes();
}
inline void Topology::unsafe_arena_set_allocated_nodes(
    ::Messages::Elements* nodes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodes_);
  }
  nodes_ = nodes;
  if (nodes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.nodes)
}
inline ::Messages::Elements* Topology::release_nodes() {
  auto temp = unsafe_arena_release_nodes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Elements* Topology::unsafe_arena_release_nodes() {
  // @@protoc_insertion_point(field_release:Messages.Topology.nodes)
  
  ::Messages::Elements* temp = nodes_;
  nodes_ = nullptr;
  return temp;
}
inline ::Messages::Elements* Topology::_internal_mutable_nodes() {
  
  if (nodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Elements>(GetArena());
    nodes_ = p;
  }
  return nodes_;
}
inline ::Messages::Elements* Topology::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.nodes)
  return _internal_mutable_nodes();
}
inline void Topology::set_allocated_nodes(::Messages::Elements* nodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodes_);
  }
  if (nodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodes)->GetArena();
    if (message_arena != submessage_arena) {
      nodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodes, submessage_arena);
    }
    
  } else {
    
  }
  nodes_ = nodes;
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.nodes)
}

// .Messages.Elements edges = 11;
inline bool Topology::_internal_has_edges() const {
  return this != internal_default_instance() && edges_ != nullptr;
}
inline bool Topology::has_edges() const {
  return _internal_has_edges();
}
inline const ::Messages::Elements& Topology::_internal_edges() const {
  const ::Messages::Elements* p = edges_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Elements*>(
      &::Messages::_Elements_default_instance_);
}
inline const ::Messages::Elements& Topology::edges() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.edges)
  return _internal_edges();
}
inline void Topology::unsafe_arena_set_allocated_edges(
    ::Messages::Elements* edges) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges_);
  }
  edges_ = edges;
  if (edges) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.edges)
}
inline ::Messages::Elements* Topology::release_edges() {
  auto temp = unsafe_arena_release_edges();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Elements* Topology::unsafe_arena_release_edges() {
  // @@protoc_insertion_point(field_release:Messages.Topology.edges)
  
  ::Messages::Elements* temp = edges_;
  edges_ = nullptr;
  return temp;
}
inline ::Messages::Elements* Topology::_internal_mutable_edges() {
  
  if (edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Elements>(GetArena());
    edges_ = p;
  }
  return edges_;
}
inline ::Messages::Elements* Topology::mutable_edges() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.edges)
  return _internal_mutable_edges();
}
inline void Topology::set_allocated_edges(::Messages::Elements* edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges_);
  }
  if (edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edges)->GetArena();
    if (message_arena != submessage_arena) {
      edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edges, submessage_arena);
    }
    
  } else {
    
  }
  edges_ = edges;
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.edges)
}

// .Messages.Elements interior_edges = 12;
inline bool Topology::_internal_has_interior_edges() const {
  return this != internal_default_instance() && interior_edges_ != nullptr;
}
inline bool Topology::has_interior_edges() const {
  return _internal_has_interior_edges();
}
inline const ::Messages::Elements& Topology::_internal_interior_edges() const {
  const ::Messages::Elements* p = interior_edges_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Elements*>(
      &::Messages::_Elements_default_instance_);
}
inline const ::Messages::Elements& Topology::interior_edges() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.interior_edges)
  return _internal_interior_edges();
}
inline void Topology::unsafe_arena_set_allocated_interior_edges(
    ::Messages::Elements* interior_edges) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interior_edges_);
  }
  interior_edges_ = interior_edges;
  if (interior_edges) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.interior_edges)
}
inline ::Messages::Elements* Topology::release_interior_edges() {
  auto temp = unsafe_arena_release_interior_edges();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Elements* Topology::unsafe_arena_release_interior_edges() {
  // @@protoc_insertion_point(field_release:Messages.Topology.interior_edges)
  
  ::Messages::Elements* temp = interior_edges_;
  interior_edges_ = nullptr;
  return temp;
}
inline ::Messages::Elements* Topology::_internal_mutable_interior_edges() {
  
  if (interior_edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Elements>(GetArena());
    interior_edges_ = p;
  }
  return interior_edges_;
}
inline ::Messages::Elements* Topology::mutable_interior_edges() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.interior_edges)
  return _internal_mutable_interior_edges();
}
inline void Topology::set_allocated_interior_edges(::Messages::Elements* interior_edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interior_edges_);
  }
  if (interior_edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interior_edges)->GetArena();
    if (message_arena != submessage_arena) {
      interior_edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interior_edges, submessage_arena);
    }
    
  } else {
    
  }
  interior_edges_ = interior_edges;
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.interior_edges)
}

// .Messages.Elements faces = 13;
inline bool Topology::_internal_has_faces() const {
  return this != internal_default_instance() && faces_ != nullptr;
}
inline bool Topology::has_faces() const {
  return _internal_has_faces();
}
inline const ::Messages::Elements& Topology::_internal_faces() const {
  const ::Messages::Elements* p = faces_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Elements*>(
      &::Messages::_Elements_default_instance_);
}
inline const ::Messages::Elements& Topology::faces() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.faces)
  return _internal_faces();
}
inline void Topology::unsafe_arena_set_allocated_faces(
    ::Messages::Elements* faces) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(faces_);
  }
  faces_ = faces;
  if (faces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.faces)
}
inline ::Messages::Elements* Topology::release_faces() {
  auto temp = unsafe_arena_release_faces();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Elements* Topology::unsafe_arena_release_faces() {
  // @@protoc_insertion_point(field_release:Messages.Topology.faces)
  
  ::Messages::Elements* temp = faces_;
  faces_ = nullptr;
  return temp;
}
inline ::Messages::Elements* Topology::_internal_mutable_faces() {
  
  if (faces_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Elements>(GetArena());
    faces_ = p;
  }
  return faces_;
}
inline ::Messages::Elements* Topology::mutable_faces() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.faces)
  return _internal_mutable_faces();
}
inline void Topology::set_allocated_faces(::Messages::Elements* faces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(faces_);
  }
  if (faces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(faces)->GetArena();
    if (message_arena != submessage_arena) {
      faces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, faces, submessage_arena);
    }
    
  } else {
    
  }
  faces_ = faces;
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.faces)
}

// .Messages.Elements interior_faces = 14;
inline bool Topology::_internal_has_interior_faces() const {
  return this != internal_default_instance() && interior_faces_ != nullptr;
}
inline bool Topology::has_interior_faces() const {
  return _internal_has_interior_faces();
}
inline const ::Messages::Elements& Topology::_internal_interior_faces() const {
  const ::Messages::Elements* p = interior_faces_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Elements*>(
      &::Messages::_Elements_default_instance_);
}
inline const ::Messages::Elements& Topology::interior_faces() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.interior_faces)
  return _internal_interior_faces();
}
inline void Topology::unsafe_arena_set_allocated_interior_faces(
    ::Messages::Elements* interior_faces) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interior_faces_);
  }
  interior_faces_ = interior_faces;
  if (interior_faces) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.interior_faces)
}
inline ::Messages::Elements* Topology::release_interior_faces() {
  auto temp = unsafe_arena_release_interior_faces();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Elements* Topology::unsafe_arena_release_interior_faces() {
  // @@protoc_insertion_point(field_release:Messages.Topology.interior_faces)
  
  ::Messages::Elements* temp = interior_faces_;
  interior_faces_ = nullptr;
  return temp;
}
inline ::Messages::Elements* Topology::_internal_mutable_interior_faces() {
  
  if (interior_faces_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Elements>(GetArena());
    interior_faces_ = p;
  }
  return interior_faces_;
}
inline ::Messages::Elements* Topology::mutable_interior_faces() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.interior_faces)
  return _internal_mutable_interior_faces();
}
inline void Topology::set_allocated_interior_faces(::Messages::Elements* interior_faces) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interior_faces_);
  }
  if (interior_faces) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interior_faces)->GetArena();
    if (message_arena != submessage_arena) {
      interior_faces = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interior_faces, submessage_arena);
    }
    
  } else {
    
  }
  interior_faces_ = interior_faces;
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.interior_faces)
}

// .Messages.Elements cells = 15;
inline bool Topology::_internal_has_cells() const {
  return this != internal_default_instance() && cells_ != nullptr;
}
inline bool Topology::has_cells() const {
  return _internal_has_cells();
}
inline const ::Messages::Elements& Topology::_internal_cells() const {
  const ::Messages::Elements* p = cells_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Elements*>(
      &::Messages::_Elements_default_instance_);
}
inline const ::Messages::Elements& Topology::cells() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.cells)
  return _internal_cells();
}
inline void Topology::unsafe_arena_set_allocated_cells(
    ::Messages::Elements* cells) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cells_);
  }
  cells_ = cells;
  if (cells) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.cells)
}
inline ::Messages::Elements* Topology::release_cells() {
  auto temp = unsafe_arena_release_cells();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Elements* Topology::unsafe_arena_release_cells() {
  // @@protoc_insertion_point(field_release:Messages.Topology.cells)
  
  ::Messages::Elements* temp = cells_;
  cells_ = nullptr;
  return temp;
}
inline ::Messages::Elements* Topology::_internal_mutable_cells() {
  
  if (cells_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Elements>(GetArena());
    cells_ = p;
  }
  return cells_;
}
inline ::Messages::Elements* Topology::mutable_cells() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.cells)
  return _internal_mutable_cells();
}
inline void Topology::set_allocated_cells(::Messages::Elements* cells) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cells_);
  }
  if (cells) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cells)->GetArena();
    if (message_arena != submessage_arena) {
      cells = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cells, submessage_arena);
    }
    
  } else {
    
  }
  cells_ = cells;
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.cells)
}

// repeated .Messages.Zone groups = 20;
inline int Topology::_internal_groups_size() const {
  return groups_.size();
}
inline int Topology::groups_size() const {
  return _internal_groups_size();
}
inline void Topology::clear_groups() {
  groups_.Clear();
}
inline ::Messages::Zone* Topology::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >*
Topology::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Topology.groups)
  return &groups_;
}
inline const ::Messages::Zone& Topology::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::Messages::Zone& Topology::groups(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Topology.groups)
  return _internal_groups(index);
}
inline ::Messages::Zone* Topology::_internal_add_groups() {
  return groups_.Add();
}
inline ::Messages::Zone* Topology::add_groups() {
  // @@protoc_insertion_point(field_add:Messages.Topology.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >&
Topology::groups() const {
  // @@protoc_insertion_point(field_list:Messages.Topology.groups)
  return groups_;
}

// repeated .Messages.Zone loops = 21;
inline int Topology::_internal_loops_size() const {
  return loops_.size();
}
inline int Topology::loops_size() const {
  return _internal_loops_size();
}
inline void Topology::clear_loops() {
  loops_.Clear();
}
inline ::Messages::Zone* Topology::mutable_loops(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.loops)
  return loops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >*
Topology::mutable_loops() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Topology.loops)
  return &loops_;
}
inline const ::Messages::Zone& Topology::_internal_loops(int index) const {
  return loops_.Get(index);
}
inline const ::Messages::Zone& Topology::loops(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Topology.loops)
  return _internal_loops(index);
}
inline ::Messages::Zone* Topology::_internal_add_loops() {
  return loops_.Add();
}
inline ::Messages::Zone* Topology::add_loops() {
  // @@protoc_insertion_point(field_add:Messages.Topology.loops)
  return _internal_add_loops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >&
Topology::loops() const {
  // @@protoc_insertion_point(field_list:Messages.Topology.loops)
  return loops_;
}

// repeated .Messages.Zone surfaces = 22;
inline int Topology::_internal_surfaces_size() const {
  return surfaces_.size();
}
inline int Topology::surfaces_size() const {
  return _internal_surfaces_size();
}
inline void Topology::clear_surfaces() {
  surfaces_.Clear();
}
inline ::Messages::Zone* Topology::mutable_surfaces(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.surfaces)
  return surfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >*
Topology::mutable_surfaces() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Topology.surfaces)
  return &surfaces_;
}
inline const ::Messages::Zone& Topology::_internal_surfaces(int index) const {
  return surfaces_.Get(index);
}
inline const ::Messages::Zone& Topology::surfaces(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Topology.surfaces)
  return _internal_surfaces(index);
}
inline ::Messages::Zone* Topology::_internal_add_surfaces() {
  return surfaces_.Add();
}
inline ::Messages::Zone* Topology::add_surfaces() {
  // @@protoc_insertion_point(field_add:Messages.Topology.surfaces)
  return _internal_add_surfaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >&
Topology::surfaces() const {
  // @@protoc_insertion_point(field_list:Messages.Topology.surfaces)
  return surfaces_;
}

// repeated .Messages.Zone volumes = 23;
inline int Topology::_internal_volumes_size() const {
  return volumes_.size();
}
inline int Topology::volumes_size() const {
  return _internal_volumes_size();
}
inline void Topology::clear_volumes() {
  volumes_.Clear();
}
inline ::Messages::Zone* Topology::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.volumes)
  return volumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >*
Topology::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Topology.volumes)
  return &volumes_;
}
inline const ::Messages::Zone& Topology::_internal_volumes(int index) const {
  return volumes_.Get(index);
}
inline const ::Messages::Zone& Topology::volumes(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Topology.volumes)
  return _internal_volumes(index);
}
inline ::Messages::Zone* Topology::_internal_add_volumes() {
  return volumes_.Add();
}
inline ::Messages::Zone* Topology::add_volumes() {
  // @@protoc_insertion_point(field_add:Messages.Topology.volumes)
  return _internal_add_volumes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Zone >&
Topology::volumes() const {
  // @@protoc_insertion_point(field_list:Messages.Topology.volumes)
  return volumes_;
}

// repeated int32 locations = 26;
inline int Topology::_internal_locations_size() const {
  return locations_.size();
}
inline int Topology::locations_size() const {
  return _internal_locations_size();
}
inline void Topology::clear_locations() {
  locations_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topology::_internal_locations(int index) const {
  return locations_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Topology::locations(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Topology.locations)
  return _internal_locations(index);
}
inline void Topology::set_locations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  locations_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Topology.locations)
}
inline void Topology::_internal_add_locations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  locations_.Add(value);
}
inline void Topology::add_locations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_locations(value);
  // @@protoc_insertion_point(field_add:Messages.Topology.locations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Topology::_internal_locations() const {
  return locations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Topology::locations() const {
  // @@protoc_insertion_point(field_list:Messages.Topology.locations)
  return _internal_locations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Topology::_internal_mutable_locations() {
  return &locations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Topology::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Topology.locations)
  return _internal_mutable_locations();
}

// string filename = 30;
inline void Topology::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Topology::filename() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.filename)
  return _internal_filename();
}
inline void Topology::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:Messages.Topology.filename)
}
inline std::string* Topology::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.filename)
  return _internal_mutable_filename();
}
inline const std::string& Topology::_internal_filename() const {
  return filename_.Get();
}
inline void Topology::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Topology::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Messages.Topology.filename)
}
inline void Topology::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Messages.Topology.filename)
}
inline void Topology::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Messages.Topology.filename)
}
inline std::string* Topology::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Topology::release_filename() {
  // @@protoc_insertion_point(field_release:Messages.Topology.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Topology::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.filename)
}
inline std::string* Topology::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Messages.Topology.filename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Topology::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.filename)
}

// .Messages.Revision revision = 31;
inline bool Topology::_internal_has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline bool Topology::has_revision() const {
  return _internal_has_revision();
}
inline const ::Messages::Revision& Topology::_internal_revision() const {
  const ::Messages::Revision* p = revision_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Revision*>(
      &::Messages::_Revision_default_instance_);
}
inline const ::Messages::Revision& Topology::revision() const {
  // @@protoc_insertion_point(field_get:Messages.Topology.revision)
  return _internal_revision();
}
inline void Topology::unsafe_arena_set_allocated_revision(
    ::Messages::Revision* revision) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  revision_ = revision;
  if (revision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.Topology.revision)
}
inline ::Messages::Revision* Topology::release_revision() {
  auto temp = unsafe_arena_release_revision();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Revision* Topology::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_release:Messages.Topology.revision)
  
  ::Messages::Revision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::Messages::Revision* Topology::_internal_mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Revision>(GetArena());
    revision_ = p;
  }
  return revision_;
}
inline ::Messages::Revision* Topology::mutable_revision() {
  // @@protoc_insertion_point(field_mutable:Messages.Topology.revision)
  return _internal_mutable_revision();
}
inline void Topology::set_allocated_revision(::Messages::Revision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision)->GetArena();
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:Messages.Topology.revision)
}

// -------------------------------------------------------------------

// GridControl

// int32 basis = 1;
inline void GridControl::clear_basis() {
  basis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GridControl::_internal_basis() const {
  return basis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GridControl::basis() const {
  // @@protoc_insertion_point(field_get:Messages.GridControl.basis)
  return _internal_basis();
}
inline void GridControl::_internal_set_basis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  basis_ = value;
}
inline void GridControl::set_basis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_basis(value);
  // @@protoc_insertion_point(field_set:Messages.GridControl.basis)
}

// repeated int32 size = 2;
inline int GridControl::_internal_size_size() const {
  return size_.size();
}
inline int GridControl::size_size() const {
  return _internal_size_size();
}
inline void GridControl::clear_size() {
  size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GridControl::_internal_size(int index) const {
  return size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GridControl::size(int index) const {
  // @@protoc_insertion_point(field_get:Messages.GridControl.size)
  return _internal_size(index);
}
inline void GridControl::set_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  size_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.GridControl.size)
}
inline void GridControl::_internal_add_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  size_.Add(value);
}
inline void GridControl::add_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_size(value);
  // @@protoc_insertion_point(field_add:Messages.GridControl.size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GridControl::_internal_size() const {
  return size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GridControl::size() const {
  // @@protoc_insertion_point(field_list:Messages.GridControl.size)
  return _internal_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GridControl::_internal_mutable_size() {
  return &size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GridControl::mutable_size() {
  // @@protoc_insertion_point(field_mutable_list:Messages.GridControl.size)
  return _internal_mutable_size();
}

// repeated double spacing = 3;
inline int GridControl::_internal_spacing_size() const {
  return spacing_.size();
}
inline int GridControl::spacing_size() const {
  return _internal_spacing_size();
}
inline void GridControl::clear_spacing() {
  spacing_.Clear();
}
inline double GridControl::_internal_spacing(int index) const {
  return spacing_.Get(index);
}
inline double GridControl::spacing(int index) const {
  // @@protoc_insertion_point(field_get:Messages.GridControl.spacing)
  return _internal_spacing(index);
}
inline void GridControl::set_spacing(int index, double value) {
  spacing_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.GridControl.spacing)
}
inline void GridControl::_internal_add_spacing(double value) {
  spacing_.Add(value);
}
inline void GridControl::add_spacing(double value) {
  _internal_add_spacing(value);
  // @@protoc_insertion_point(field_add:Messages.GridControl.spacing)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GridControl::_internal_spacing() const {
  return spacing_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GridControl::spacing() const {
  // @@protoc_insertion_point(field_list:Messages.GridControl.spacing)
  return _internal_spacing();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GridControl::_internal_mutable_spacing() {
  return &spacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GridControl::mutable_spacing() {
  // @@protoc_insertion_point(field_mutable_list:Messages.GridControl.spacing)
  return _internal_mutable_spacing();
}

// repeated double grading = 4;
inline int GridControl::_internal_grading_size() const {
  return grading_.size();
}
inline int GridControl::grading_size() const {
  return _internal_grading_size();
}
inline void GridControl::clear_grading() {
  grading_.Clear();
}
inline double GridControl::_internal_grading(int index) const {
  return grading_.Get(index);
}
inline double GridControl::grading(int index) const {
  // @@protoc_insertion_point(field_get:Messages.GridControl.grading)
  return _internal_grading(index);
}
inline void GridControl::set_grading(int index, double value) {
  grading_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.GridControl.grading)
}
inline void GridControl::_internal_add_grading(double value) {
  grading_.Add(value);
}
inline void GridControl::add_grading(double value) {
  _internal_add_grading(value);
  // @@protoc_insertion_point(field_add:Messages.GridControl.grading)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GridControl::_internal_grading() const {
  return grading_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GridControl::grading() const {
  // @@protoc_insertion_point(field_list:Messages.GridControl.grading)
  return _internal_grading();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GridControl::_internal_mutable_grading() {
  return &grading_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GridControl::mutable_grading() {
  // @@protoc_insertion_point(field_mutable_list:Messages.GridControl.grading)
  return _internal_mutable_grading();
}

// .Messages.Extrema bounds = 10;
inline bool GridControl::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool GridControl::has_bounds() const {
  return _internal_has_bounds();
}
inline const ::Messages::Extrema& GridControl::_internal_bounds() const {
  const ::Messages::Extrema* p = bounds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Extrema*>(
      &::Messages::_Extrema_default_instance_);
}
inline const ::Messages::Extrema& GridControl::bounds() const {
  // @@protoc_insertion_point(field_get:Messages.GridControl.bounds)
  return _internal_bounds();
}
inline void GridControl::unsafe_arena_set_allocated_bounds(
    ::Messages::Extrema* bounds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.GridControl.bounds)
}
inline ::Messages::Extrema* GridControl::release_bounds() {
  auto temp = unsafe_arena_release_bounds();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Extrema* GridControl::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:Messages.GridControl.bounds)
  
  ::Messages::Extrema* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::Messages::Extrema* GridControl::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Extrema>(GetArena());
    bounds_ = p;
  }
  return bounds_;
}
inline ::Messages::Extrema* GridControl::mutable_bounds() {
  // @@protoc_insertion_point(field_mutable:Messages.GridControl.bounds)
  return _internal_mutable_bounds();
}
inline void GridControl::set_allocated_bounds(::Messages::Extrema* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds)->GetArena();
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:Messages.GridControl.bounds)
}

// -------------------------------------------------------------------

// MeshControl

// int64 target_n = 1;
inline void MeshControl::clear_target_n() {
  target_n_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeshControl::_internal_target_n() const {
  return target_n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeshControl::target_n() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.target_n)
  return _internal_target_n();
}
inline void MeshControl::_internal_set_target_n(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  target_n_ = value;
}
inline void MeshControl::set_target_n(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_target_n(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.target_n)
}

// int32 max_iterations = 2;
inline void MeshControl::clear_max_iterations() {
  max_iterations_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshControl::_internal_max_iterations() const {
  return max_iterations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MeshControl::max_iterations() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.max_iterations)
  return _internal_max_iterations();
}
inline void MeshControl::_internal_set_max_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_iterations_ = value;
}
inline void MeshControl::set_max_iterations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_iterations(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.max_iterations)
}

// double size_ratio = 3;
inline void MeshControl::clear_size_ratio() {
  size_ratio_ = 0;
}
inline double MeshControl::_internal_size_ratio() const {
  return size_ratio_;
}
inline double MeshControl::size_ratio() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.size_ratio)
  return _internal_size_ratio();
}
inline void MeshControl::_internal_set_size_ratio(double value) {
  
  size_ratio_ = value;
}
inline void MeshControl::set_size_ratio(double value) {
  _internal_set_size_ratio(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.size_ratio)
}

// double size_decay = 4;
inline void MeshControl::clear_size_decay() {
  size_decay_ = 0;
}
inline double MeshControl::_internal_size_decay() const {
  return size_decay_;
}
inline double MeshControl::size_decay() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.size_decay)
  return _internal_size_decay();
}
inline void MeshControl::_internal_set_size_decay(double value) {
  
  size_decay_ = value;
}
inline void MeshControl::set_size_decay(double value) {
  _internal_set_size_decay(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.size_decay)
}

// double size_exponent = 5;
inline void MeshControl::clear_size_exponent() {
  size_exponent_ = 0;
}
inline double MeshControl::_internal_size_exponent() const {
  return size_exponent_;
}
inline double MeshControl::size_exponent() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.size_exponent)
  return _internal_size_exponent();
}
inline void MeshControl::_internal_set_size_exponent(double value) {
  
  size_exponent_ = value;
}
inline void MeshControl::set_size_exponent(double value) {
  _internal_set_size_exponent(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.size_exponent)
}

// double curv_ratio = 6;
inline void MeshControl::clear_curv_ratio() {
  curv_ratio_ = 0;
}
inline double MeshControl::_internal_curv_ratio() const {
  return curv_ratio_;
}
inline double MeshControl::curv_ratio() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.curv_ratio)
  return _internal_curv_ratio();
}
inline void MeshControl::_internal_set_curv_ratio(double value) {
  
  curv_ratio_ = value;
}
inline void MeshControl::set_curv_ratio(double value) {
  _internal_set_curv_ratio(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.curv_ratio)
}

// double curv_decay = 7;
inline void MeshControl::clear_curv_decay() {
  curv_decay_ = 0;
}
inline double MeshControl::_internal_curv_decay() const {
  return curv_decay_;
}
inline double MeshControl::curv_decay() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.curv_decay)
  return _internal_curv_decay();
}
inline void MeshControl::_internal_set_curv_decay(double value) {
  
  curv_decay_ = value;
}
inline void MeshControl::set_curv_decay(double value) {
  _internal_set_curv_decay(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.curv_decay)
}

// double curv_exponent = 8;
inline void MeshControl::clear_curv_exponent() {
  curv_exponent_ = 0;
}
inline double MeshControl::_internal_curv_exponent() const {
  return curv_exponent_;
}
inline double MeshControl::curv_exponent() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.curv_exponent)
  return _internal_curv_exponent();
}
inline void MeshControl::_internal_set_curv_exponent(double value) {
  
  curv_exponent_ = value;
}
inline void MeshControl::set_curv_exponent(double value) {
  _internal_set_curv_exponent(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.curv_exponent)
}

// double node_radius = 9;
inline void MeshControl::clear_node_radius() {
  node_radius_ = 0;
}
inline double MeshControl::_internal_node_radius() const {
  return node_radius_;
}
inline double MeshControl::node_radius() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.node_radius)
  return _internal_node_radius();
}
inline void MeshControl::_internal_set_node_radius(double value) {
  
  node_radius_ = value;
}
inline void MeshControl::set_node_radius(double value) {
  _internal_set_node_radius(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.node_radius)
}

// .Messages.Extrema bounds = 10;
inline bool MeshControl::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool MeshControl::has_bounds() const {
  return _internal_has_bounds();
}
inline const ::Messages::Extrema& MeshControl::_internal_bounds() const {
  const ::Messages::Extrema* p = bounds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Extrema*>(
      &::Messages::_Extrema_default_instance_);
}
inline const ::Messages::Extrema& MeshControl::bounds() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.bounds)
  return _internal_bounds();
}
inline void MeshControl::unsafe_arena_set_allocated_bounds(
    ::Messages::Extrema* bounds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.MeshControl.bounds)
}
inline ::Messages::Extrema* MeshControl::release_bounds() {
  auto temp = unsafe_arena_release_bounds();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Extrema* MeshControl::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:Messages.MeshControl.bounds)
  
  ::Messages::Extrema* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::Messages::Extrema* MeshControl::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Extrema>(GetArena());
    bounds_ = p;
  }
  return bounds_;
}
inline ::Messages::Extrema* MeshControl::mutable_bounds() {
  // @@protoc_insertion_point(field_mutable:Messages.MeshControl.bounds)
  return _internal_mutable_bounds();
}
inline void MeshControl::set_allocated_bounds(::Messages::Extrema* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds)->GetArena();
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:Messages.MeshControl.bounds)
}

// bool interior = 12;
inline void MeshControl::clear_interior() {
  interior_ = false;
}
inline bool MeshControl::_internal_interior() const {
  return interior_;
}
inline bool MeshControl::interior() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.interior)
  return _internal_interior();
}
inline void MeshControl::_internal_set_interior(bool value) {
  
  interior_ = value;
}
inline void MeshControl::set_interior(bool value) {
  _internal_set_interior(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.interior)
}

// bool exterior = 13;
inline void MeshControl::clear_exterior() {
  exterior_ = false;
}
inline bool MeshControl::_internal_exterior() const {
  return exterior_;
}
inline bool MeshControl::exterior() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.exterior)
  return _internal_exterior();
}
inline void MeshControl::_internal_set_exterior(bool value) {
  
  exterior_ = value;
}
inline void MeshControl::set_exterior(bool value) {
  _internal_set_exterior(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.exterior)
}

// bool shell = 14;
inline void MeshControl::clear_shell() {
  shell_ = false;
}
inline bool MeshControl::_internal_shell() const {
  return shell_;
}
inline bool MeshControl::shell() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.shell)
  return _internal_shell();
}
inline void MeshControl::_internal_set_shell(bool value) {
  
  shell_ = value;
}
inline void MeshControl::set_shell(bool value) {
  _internal_set_shell(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.shell)
}

// bool equalize = 15;
inline void MeshControl::clear_equalize() {
  equalize_ = false;
}
inline bool MeshControl::_internal_equalize() const {
  return equalize_;
}
inline bool MeshControl::equalize() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.equalize)
  return _internal_equalize();
}
inline void MeshControl::_internal_set_equalize(bool value) {
  
  equalize_ = value;
}
inline void MeshControl::set_equalize(bool value) {
  _internal_set_equalize(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.equalize)
}

// bool smooth = 16;
inline void MeshControl::clear_smooth() {
  smooth_ = false;
}
inline bool MeshControl::_internal_smooth() const {
  return smooth_;
}
inline bool MeshControl::smooth() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.smooth)
  return _internal_smooth();
}
inline void MeshControl::_internal_set_smooth(bool value) {
  
  smooth_ = value;
}
inline void MeshControl::set_smooth(bool value) {
  _internal_set_smooth(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.smooth)
}

// bool include_background = 18;
inline void MeshControl::clear_include_background() {
  include_background_ = false;
}
inline bool MeshControl::_internal_include_background() const {
  return include_background_;
}
inline bool MeshControl::include_background() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.include_background)
  return _internal_include_background();
}
inline void MeshControl::_internal_set_include_background(bool value) {
  
  include_background_ = value;
}
inline void MeshControl::set_include_background(bool value) {
  _internal_set_include_background(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.include_background)
}

// bool keep_existing_points = 19;
inline void MeshControl::clear_keep_existing_points() {
  keep_existing_points_ = false;
}
inline bool MeshControl::_internal_keep_existing_points() const {
  return keep_existing_points_;
}
inline bool MeshControl::keep_existing_points() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.keep_existing_points)
  return _internal_keep_existing_points();
}
inline void MeshControl::_internal_set_keep_existing_points(bool value) {
  
  keep_existing_points_ = value;
}
inline void MeshControl::set_keep_existing_points(bool value) {
  _internal_set_keep_existing_points(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.keep_existing_points)
}

// bool x_symmetry = 24;
inline void MeshControl::clear_x_symmetry() {
  x_symmetry_ = false;
}
inline bool MeshControl::_internal_x_symmetry() const {
  return x_symmetry_;
}
inline bool MeshControl::x_symmetry() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.x_symmetry)
  return _internal_x_symmetry();
}
inline void MeshControl::_internal_set_x_symmetry(bool value) {
  
  x_symmetry_ = value;
}
inline void MeshControl::set_x_symmetry(bool value) {
  _internal_set_x_symmetry(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.x_symmetry)
}

// bool y_symmetry = 25;
inline void MeshControl::clear_y_symmetry() {
  y_symmetry_ = false;
}
inline bool MeshControl::_internal_y_symmetry() const {
  return y_symmetry_;
}
inline bool MeshControl::y_symmetry() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.y_symmetry)
  return _internal_y_symmetry();
}
inline void MeshControl::_internal_set_y_symmetry(bool value) {
  
  y_symmetry_ = value;
}
inline void MeshControl::set_y_symmetry(bool value) {
  _internal_set_y_symmetry(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.y_symmetry)
}

// bool z_symmetry = 26;
inline void MeshControl::clear_z_symmetry() {
  z_symmetry_ = false;
}
inline bool MeshControl::_internal_z_symmetry() const {
  return z_symmetry_;
}
inline bool MeshControl::z_symmetry() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.z_symmetry)
  return _internal_z_symmetry();
}
inline void MeshControl::_internal_set_z_symmetry(bool value) {
  
  z_symmetry_ = value;
}
inline void MeshControl::set_z_symmetry(bool value) {
  _internal_set_z_symmetry(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.z_symmetry)
}

// int64 background_n = 30;
inline void MeshControl::clear_background_n() {
  background_n_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeshControl::_internal_background_n() const {
  return background_n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeshControl::background_n() const {
  // @@protoc_insertion_point(field_get:Messages.MeshControl.background_n)
  return _internal_background_n();
}
inline void MeshControl::_internal_set_background_n(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  background_n_ = value;
}
inline void MeshControl::set_background_n(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_background_n(value);
  // @@protoc_insertion_point(field_set:Messages.MeshControl.background_n)
}

// -------------------------------------------------------------------

// TreeControl

// int32 min_depth = 1;
inline void TreeControl::clear_min_depth() {
  min_depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreeControl::_internal_min_depth() const {
  return min_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreeControl::min_depth() const {
  // @@protoc_insertion_point(field_get:Messages.TreeControl.min_depth)
  return _internal_min_depth();
}
inline void TreeControl::_internal_set_min_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_depth_ = value;
}
inline void TreeControl::set_min_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_depth(value);
  // @@protoc_insertion_point(field_set:Messages.TreeControl.min_depth)
}

// int32 max_depth = 2;
inline void TreeControl::clear_max_depth() {
  max_depth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreeControl::_internal_max_depth() const {
  return max_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TreeControl::max_depth() const {
  // @@protoc_insertion_point(field_get:Messages.TreeControl.max_depth)
  return _internal_max_depth();
}
inline void TreeControl::_internal_set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_depth_ = value;
}
inline void TreeControl::set_max_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_depth(value);
  // @@protoc_insertion_point(field_set:Messages.TreeControl.max_depth)
}

// int64 max_size = 3;
inline void TreeControl::clear_max_size() {
  max_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TreeControl::_internal_max_size() const {
  return max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TreeControl::max_size() const {
  // @@protoc_insertion_point(field_get:Messages.TreeControl.max_size)
  return _internal_max_size();
}
inline void TreeControl::_internal_set_max_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_size_ = value;
}
inline void TreeControl::set_max_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_size(value);
  // @@protoc_insertion_point(field_set:Messages.TreeControl.max_size)
}

// .Messages.Extrema bounds = 10;
inline bool TreeControl::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool TreeControl::has_bounds() const {
  return _internal_has_bounds();
}
inline const ::Messages::Extrema& TreeControl::_internal_bounds() const {
  const ::Messages::Extrema* p = bounds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Extrema*>(
      &::Messages::_Extrema_default_instance_);
}
inline const ::Messages::Extrema& TreeControl::bounds() const {
  // @@protoc_insertion_point(field_get:Messages.TreeControl.bounds)
  return _internal_bounds();
}
inline void TreeControl::unsafe_arena_set_allocated_bounds(
    ::Messages::Extrema* bounds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Messages.TreeControl.bounds)
}
inline ::Messages::Extrema* TreeControl::release_bounds() {
  auto temp = unsafe_arena_release_bounds();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Messages::Extrema* TreeControl::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:Messages.TreeControl.bounds)
  
  ::Messages::Extrema* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::Messages::Extrema* TreeControl::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Extrema>(GetArena());
    bounds_ = p;
  }
  return bounds_;
}
inline ::Messages::Extrema* TreeControl::mutable_bounds() {
  // @@protoc_insertion_point(field_mutable:Messages.TreeControl.bounds)
  return _internal_mutable_bounds();
}
inline void TreeControl::set_allocated_bounds(::Messages::Extrema* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds)->GetArena();
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:Messages.TreeControl.bounds)
}

// -------------------------------------------------------------------

// NetworkControl

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spatial_2eproto
