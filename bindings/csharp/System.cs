// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: system.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Messages {

  /// <summary>Holder for reflection information generated from system.proto</summary>
  public static partial class SystemReflection {

    #region Descriptor
    /// <summary>File descriptor for system.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SystemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzeXN0ZW0ucHJvdG8SCE1lc3NhZ2VzGgx2ZWN0b3IucHJvdG8aCm1ldGEu",
            "cHJvdG8ipAIKCVZhcmlhYmxlcxIRCglpbnRfbmFtZXMYAiADKAkSEgoKaW50",
            "X3ZhbHVlcxgDIAMoBRIYChBpbnRfZGVzY3JpcHRpb25zGAQgAygJEhIKCmJv",
            "b2xfbmFtZXMYBiADKAkSEwoLYm9vbF92YWx1ZXMYByADKAgSGQoRYm9vbF9k",
            "ZXNjcmlwdGlvbnMYCCADKAkSFAoMZG91YmxlX25hbWVzGAogAygJEhUKDWRv",
            "dWJsZV92YWx1ZXMYCyADKAESGwoTZG91YmxlX2Rlc2NyaXB0aW9ucxgMIAMo",
            "CRIUCgxzdHJpbmdfbmFtZXMYDiADKAkSFQoNc3RyaW5nX3ZhbHVlcxgPIAMo",
            "CRIbChNzdHJpbmdfZGVzY3JpcHRpb25zGBAgAygJIp8DCghGdW5jdGlvbhIM",
            "CgRuYW1lGAEgASgJEhYKDmFyZ3VtZW50X3R5cGVzGAIgAygJEh0KFWFyZ3Vt",
            "ZW50X2Rlc2NyaXB0aW9ucxgDIAMoCRIOCgZpbnB1dHMYBCADKAkSDwoHb3V0",
            "cHV0cxgFIAMoCRIRCgljb25zdGFudHMYBiADKAkSFQoNdG9fYmVfZGVmaW5l",
            "ZBgHIAMoCRIgCgRkYXRhGAggAygLMhIuTWVzc2FnZXMuVmVjdG9yNjQSEwoL",
            "Y3B1X2NhcGFibGUYCiABKAgSEwoLZ3B1X2NhcGFibGUYCyABKAgSHwoXaW5j",
            "bHVkZV9hc19wcmVwcm9jZXNzb3IYDCABKAgSGwoTb21pdF9mcm9tX21haW5f",
            "bG9vcBgNIAEoCBIgChhpbmNsdWRlX2FzX3Bvc3Rwcm9jZXNzb3IYDiABKAgS",
            "GgoSbXV0dWFsbHlfZXhjbHVzaXZlGA8gASgIEhEKCW9ubHlfb25jZRgQIAEo",
            "CBISCgpwdXNoX2Zyb250GBEgASgIEhQKDGRvbnRfZmxhdHRlbhgSIAEoCCKb",
            "AwoHQ29tbWFuZBIkCghmdW5jdGlvbhgBIAEoCzISLk1lc3NhZ2VzLkZ1bmN0",
            "aW9uEhQKDGFyZ3NfYXJlX3NldBgCIAEoCBIUCgxrZXJuZWxfcmVhZHkYAyAB",
            "KAgSEgoKZXhlY19jb3VudBgEIAEoAxIWCg5lZmZlY3RpdmVfc2l6ZRgFIAEo",
            "AxIPCgd2ZXJzaW9uGAYgASgDEgoKAmlkGAcgASgDEhAKCG5fa2VybmVsGAgg",
            "ASgDEhAKCHByb2dyZXNzGAkgASgCEgsKA21zZxgKIAEoCRIgCgRkYXRhGAwg",
            "AygLMhIuTWVzc2FnZXMuVmVjdG9yNjQSIQoGYmVmb3JlGA0gAygLMhEuTWVz",
            "c2FnZXMuQ29tbWFuZBIgCgVhZnRlchgOIAMoCzIRLk1lc3NhZ2VzLkNvbW1h",
            "bmQSEwoLcmVnaW9uX3R5cGUYDyADKAUSEQoJcmVnaW9uX2lkGBAgAygFEhYK",
            "DmFyZ3VtZW50X3R5cGVzGBEgAygJEh0KFWFyZ3VtZW50X2Rlc2NyaXB0aW9u",
            "cxgSIAMoCSKWAgoGU2NyaXB0EgwKBG5hbWUYASABKAkSCwoDbXNnGAIgASgJ",
            "EhMKC3NvdXJjZV9jb2RlGAMgASgJEgsKA3VpZBgEIAEoAxIOCgZkZXZpY2UY",
            "BSABKAUSDgoGc3RhdHVzGAYgASgFEg0KBW9yZGVyGAcgASgFEhAKCHByb2dy",
            "ZXNzGAggASgCEiYKCXZhcmlhYmxlcxgKIAEoCzITLk1lc3NhZ2VzLlZhcmlh",
            "YmxlcxIjCghzZXF1ZW5jZRgMIAMoCzIRLk1lc3NhZ2VzLkNvbW1hbmQSIAoG",
            "YmVmb3JlGA4gASgLMhAuTWVzc2FnZXMuU2NyaXB0Eh8KBWFmdGVyGA8gASgL",
            "MhAuTWVzc2FnZXMuU2NyaXB0IjgKBFJ1bGUSCgoCcGsYASABKAkSEgoKYWxn",
            "b3JpdGhtcxgCIAMoCRIQCghwcmlvcml0eRgDIAMoBSKyAgoFTW9kZWwSDAoE",
            "bmFtZRgBIAEoCRIMCgRkb2ZzGAMgAygJEhIKCmFsZ29yaXRobXMYBCADKAkS",
            "GQoRYXZhaWxhYmxlX291dHB1dHMYBSADKAkSGAoQZXh0cmFfcHJvcGVydGll",
            "cxgGIAMoCRIdChVjb21wYXRpYmxlX2NvbmRpdGlvbnMYByADKAkSGgoSY29t",
            "cGF0aWJsZV9zY3JpcHRzGAggAygJEiMKCnN1Yl9tb2RlbHMYCSADKAsyDy5N",
            "ZXNzYWdlcy5Nb2RlbBIgCgRkYXRhGAogAygLMhIuTWVzc2FnZXMuVmVjdG9y",
            "NjQSHQoFcnVsZXMYCyADKAsyDi5NZXNzYWdlcy5SdWxlEiMKC211dGV4X3N0",
            "YWNrGAwgAygLMg4uTWVzc2FnZXMuUnVsZSKEAgoGU3lzdGVtEhwKBG1ldGEY",
            "ASABKAsyDi5NZXNzYWdlcy5NZXRhEiAKBnNjcmlwdBgCIAEoCzIQLk1lc3Nh",
            "Z2VzLlNjcmlwdBIQCghnZW9tZXRyeRgIIAEoCRIfCgZtb2RlbHMYCiADKAsy",
            "Dy5NZXNzYWdlcy5Nb2RlbBIlCgljb25zdGFudHMYCyADKAsyEi5NZXNzYWdl",
            "cy5WZWN0b3I2NBIlCgpjb25kaXRpb25zGAwgAygLMhEuTWVzc2FnZXMuQ29t",
            "bWFuZBIQCghjaGlsZHJlbhgNIAMoCRISCgpyZWZlcmVuY2VzGA4gAygJEhMK",
            "C2F0dGFjaG1lbnRzGA8gAygJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Messages.VectorReflection.Descriptor, global::Messages.MetaReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Variables), global::Messages.Variables.Parser, new[]{ "IntNames", "IntValues", "IntDescriptions", "BoolNames", "BoolValues", "BoolDescriptions", "DoubleNames", "DoubleValues", "DoubleDescriptions", "StringNames", "StringValues", "StringDescriptions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Function), global::Messages.Function.Parser, new[]{ "Name", "ArgumentTypes", "ArgumentDescriptions", "Inputs", "Outputs", "Constants", "ToBeDefined", "Data", "CpuCapable", "GpuCapable", "IncludeAsPreprocessor", "OmitFromMainLoop", "IncludeAsPostprocessor", "MutuallyExclusive", "OnlyOnce", "PushFront", "DontFlatten" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Command), global::Messages.Command.Parser, new[]{ "Function", "ArgsAreSet", "KernelReady", "ExecCount", "EffectiveSize", "Version", "Id", "NKernel", "Progress", "Msg", "Data", "Before", "After", "RegionType", "RegionId", "ArgumentTypes", "ArgumentDescriptions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Script), global::Messages.Script.Parser, new[]{ "Name", "Msg", "SourceCode", "Uid", "Device", "Status", "Order", "Progress", "Variables", "Sequence", "Before", "After" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Rule), global::Messages.Rule.Parser, new[]{ "Pk", "Algorithms", "Priority" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Model), global::Messages.Model.Parser, new[]{ "Name", "Dofs", "Algorithms", "AvailableOutputs", "ExtraProperties", "CompatibleConditions", "CompatibleScripts", "SubModels", "Data", "Rules", "MutexStack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.System), global::Messages.System.Parser, new[]{ "Meta", "Script", "Geometry", "Models", "Constants", "Conditions", "Children", "References", "Attachments" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///compatible with xcompute *.cfg files via machinery defined in config.hpp/config.cpp
  /// </summary>
  public sealed partial class Variables : pb::IMessage<Variables> {
    private static readonly pb::MessageParser<Variables> _parser = new pb::MessageParser<Variables>(() => new Variables());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variables> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SystemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variables() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variables(Variables other) : this() {
      intNames_ = other.intNames_.Clone();
      intValues_ = other.intValues_.Clone();
      intDescriptions_ = other.intDescriptions_.Clone();
      boolNames_ = other.boolNames_.Clone();
      boolValues_ = other.boolValues_.Clone();
      boolDescriptions_ = other.boolDescriptions_.Clone();
      doubleNames_ = other.doubleNames_.Clone();
      doubleValues_ = other.doubleValues_.Clone();
      doubleDescriptions_ = other.doubleDescriptions_.Clone();
      stringNames_ = other.stringNames_.Clone();
      stringValues_ = other.stringValues_.Clone();
      stringDescriptions_ = other.stringDescriptions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variables Clone() {
      return new Variables(this);
    }

    /// <summary>Field number for the "int_names" field.</summary>
    public const int IntNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_intNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> intNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IntNames {
      get { return intNames_; }
    }

    /// <summary>Field number for the "int_values" field.</summary>
    public const int IntValuesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_intValues_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> intValues_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntValues {
      get { return intValues_; }
    }

    /// <summary>Field number for the "int_descriptions" field.</summary>
    public const int IntDescriptionsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_intDescriptions_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> intDescriptions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IntDescriptions {
      get { return intDescriptions_; }
    }

    /// <summary>Field number for the "bool_names" field.</summary>
    public const int BoolNamesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_boolNames_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> boolNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BoolNames {
      get { return boolNames_; }
    }

    /// <summary>Field number for the "bool_values" field.</summary>
    public const int BoolValuesFieldNumber = 7;
    private static readonly pb::FieldCodec<bool> _repeated_boolValues_codec
        = pb::FieldCodec.ForBool(58);
    private readonly pbc::RepeatedField<bool> boolValues_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> BoolValues {
      get { return boolValues_; }
    }

    /// <summary>Field number for the "bool_descriptions" field.</summary>
    public const int BoolDescriptionsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_boolDescriptions_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> boolDescriptions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BoolDescriptions {
      get { return boolDescriptions_; }
    }

    /// <summary>Field number for the "double_names" field.</summary>
    public const int DoubleNamesFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_doubleNames_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> doubleNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DoubleNames {
      get { return doubleNames_; }
    }

    /// <summary>Field number for the "double_values" field.</summary>
    public const int DoubleValuesFieldNumber = 11;
    private static readonly pb::FieldCodec<double> _repeated_doubleValues_codec
        = pb::FieldCodec.ForDouble(90);
    private readonly pbc::RepeatedField<double> doubleValues_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> DoubleValues {
      get { return doubleValues_; }
    }

    /// <summary>Field number for the "double_descriptions" field.</summary>
    public const int DoubleDescriptionsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_doubleDescriptions_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> doubleDescriptions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DoubleDescriptions {
      get { return doubleDescriptions_; }
    }

    /// <summary>Field number for the "string_names" field.</summary>
    public const int StringNamesFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_stringNames_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> stringNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringNames {
      get { return stringNames_; }
    }

    /// <summary>Field number for the "string_values" field.</summary>
    public const int StringValuesFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_stringValues_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> stringValues_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringValues {
      get { return stringValues_; }
    }

    /// <summary>Field number for the "string_descriptions" field.</summary>
    public const int StringDescriptionsFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_stringDescriptions_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> stringDescriptions_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StringDescriptions {
      get { return stringDescriptions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variables);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variables other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!intNames_.Equals(other.intNames_)) return false;
      if(!intValues_.Equals(other.intValues_)) return false;
      if(!intDescriptions_.Equals(other.intDescriptions_)) return false;
      if(!boolNames_.Equals(other.boolNames_)) return false;
      if(!boolValues_.Equals(other.boolValues_)) return false;
      if(!boolDescriptions_.Equals(other.boolDescriptions_)) return false;
      if(!doubleNames_.Equals(other.doubleNames_)) return false;
      if(!doubleValues_.Equals(other.doubleValues_)) return false;
      if(!doubleDescriptions_.Equals(other.doubleDescriptions_)) return false;
      if(!stringNames_.Equals(other.stringNames_)) return false;
      if(!stringValues_.Equals(other.stringValues_)) return false;
      if(!stringDescriptions_.Equals(other.stringDescriptions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= intNames_.GetHashCode();
      hash ^= intValues_.GetHashCode();
      hash ^= intDescriptions_.GetHashCode();
      hash ^= boolNames_.GetHashCode();
      hash ^= boolValues_.GetHashCode();
      hash ^= boolDescriptions_.GetHashCode();
      hash ^= doubleNames_.GetHashCode();
      hash ^= doubleValues_.GetHashCode();
      hash ^= doubleDescriptions_.GetHashCode();
      hash ^= stringNames_.GetHashCode();
      hash ^= stringValues_.GetHashCode();
      hash ^= stringDescriptions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      intNames_.WriteTo(output, _repeated_intNames_codec);
      intValues_.WriteTo(output, _repeated_intValues_codec);
      intDescriptions_.WriteTo(output, _repeated_intDescriptions_codec);
      boolNames_.WriteTo(output, _repeated_boolNames_codec);
      boolValues_.WriteTo(output, _repeated_boolValues_codec);
      boolDescriptions_.WriteTo(output, _repeated_boolDescriptions_codec);
      doubleNames_.WriteTo(output, _repeated_doubleNames_codec);
      doubleValues_.WriteTo(output, _repeated_doubleValues_codec);
      doubleDescriptions_.WriteTo(output, _repeated_doubleDescriptions_codec);
      stringNames_.WriteTo(output, _repeated_stringNames_codec);
      stringValues_.WriteTo(output, _repeated_stringValues_codec);
      stringDescriptions_.WriteTo(output, _repeated_stringDescriptions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += intNames_.CalculateSize(_repeated_intNames_codec);
      size += intValues_.CalculateSize(_repeated_intValues_codec);
      size += intDescriptions_.CalculateSize(_repeated_intDescriptions_codec);
      size += boolNames_.CalculateSize(_repeated_boolNames_codec);
      size += boolValues_.CalculateSize(_repeated_boolValues_codec);
      size += boolDescriptions_.CalculateSize(_repeated_boolDescriptions_codec);
      size += doubleNames_.CalculateSize(_repeated_doubleNames_codec);
      size += doubleValues_.CalculateSize(_repeated_doubleValues_codec);
      size += doubleDescriptions_.CalculateSize(_repeated_doubleDescriptions_codec);
      size += stringNames_.CalculateSize(_repeated_stringNames_codec);
      size += stringValues_.CalculateSize(_repeated_stringValues_codec);
      size += stringDescriptions_.CalculateSize(_repeated_stringDescriptions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variables other) {
      if (other == null) {
        return;
      }
      intNames_.Add(other.intNames_);
      intValues_.Add(other.intValues_);
      intDescriptions_.Add(other.intDescriptions_);
      boolNames_.Add(other.boolNames_);
      boolValues_.Add(other.boolValues_);
      boolDescriptions_.Add(other.boolDescriptions_);
      doubleNames_.Add(other.doubleNames_);
      doubleValues_.Add(other.doubleValues_);
      doubleDescriptions_.Add(other.doubleDescriptions_);
      stringNames_.Add(other.stringNames_);
      stringValues_.Add(other.stringValues_);
      stringDescriptions_.Add(other.stringDescriptions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            intNames_.AddEntriesFrom(input, _repeated_intNames_codec);
            break;
          }
          case 26:
          case 24: {
            intValues_.AddEntriesFrom(input, _repeated_intValues_codec);
            break;
          }
          case 34: {
            intDescriptions_.AddEntriesFrom(input, _repeated_intDescriptions_codec);
            break;
          }
          case 50: {
            boolNames_.AddEntriesFrom(input, _repeated_boolNames_codec);
            break;
          }
          case 58:
          case 56: {
            boolValues_.AddEntriesFrom(input, _repeated_boolValues_codec);
            break;
          }
          case 66: {
            boolDescriptions_.AddEntriesFrom(input, _repeated_boolDescriptions_codec);
            break;
          }
          case 82: {
            doubleNames_.AddEntriesFrom(input, _repeated_doubleNames_codec);
            break;
          }
          case 90:
          case 89: {
            doubleValues_.AddEntriesFrom(input, _repeated_doubleValues_codec);
            break;
          }
          case 98: {
            doubleDescriptions_.AddEntriesFrom(input, _repeated_doubleDescriptions_codec);
            break;
          }
          case 114: {
            stringNames_.AddEntriesFrom(input, _repeated_stringNames_codec);
            break;
          }
          case 122: {
            stringValues_.AddEntriesFrom(input, _repeated_stringValues_codec);
            break;
          }
          case 130: {
            stringDescriptions_.AddEntriesFrom(input, _repeated_stringDescriptions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///compatible with xcompute algorithm (operation/code that has not been bound yet)
  /// </summary>
  public sealed partial class Function : pb::IMessage<Function> {
    private static readonly pb::MessageParser<Function> _parser = new pb::MessageParser<Function>(() => new Function());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Function> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SystemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Function() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Function(Function other) : this() {
      name_ = other.name_;
      argumentTypes_ = other.argumentTypes_.Clone();
      argumentDescriptions_ = other.argumentDescriptions_.Clone();
      inputs_ = other.inputs_.Clone();
      outputs_ = other.outputs_.Clone();
      constants_ = other.constants_.Clone();
      toBeDefined_ = other.toBeDefined_.Clone();
      data_ = other.data_.Clone();
      cpuCapable_ = other.cpuCapable_;
      gpuCapable_ = other.gpuCapable_;
      includeAsPreprocessor_ = other.includeAsPreprocessor_;
      omitFromMainLoop_ = other.omitFromMainLoop_;
      includeAsPostprocessor_ = other.includeAsPostprocessor_;
      mutuallyExclusive_ = other.mutuallyExclusive_;
      onlyOnce_ = other.onlyOnce_;
      pushFront_ = other.pushFront_;
      dontFlatten_ = other.dontFlatten_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Function Clone() {
      return new Function(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "argument_types" field.</summary>
    public const int ArgumentTypesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_argumentTypes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> argumentTypes_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///argument object binding requirements:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ArgumentTypes {
      get { return argumentTypes_; }
    }

    /// <summary>Field number for the "argument_descriptions" field.</summary>
    public const int ArgumentDescriptionsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_argumentDescriptions_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> argumentDescriptions_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///matching argument descriptions (used by UI)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ArgumentDescriptions {
      get { return argumentDescriptions_; }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_inputs_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> inputs_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///PK's required for algorithm inputs (user inputs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_outputs_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> outputs_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///PK's required for algorithm outputs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "constants" field.</summary>
    public const int ConstantsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_constants_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> constants_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///PK's for uniform values across all nodes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Constants {
      get { return constants_; }
    }

    /// <summary>Field number for the "to_be_defined" field.</summary>
    public const int ToBeDefinedFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_toBeDefined_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> toBeDefined_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///PK's for to be set by user in UI (end-user inputs)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ToBeDefined {
      get { return toBeDefined_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Messages.Vector64> _repeated_data_codec
        = pb::FieldCodec.ForMessage(66, global::Messages.Vector64.Parser);
    private readonly pbc::RepeatedField<global::Messages.Vector64> data_ = new pbc::RepeatedField<global::Messages.Vector64>();
    /// <summary>
    ///local data relevant to this algorithm (coefficients, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Vector64> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "cpu_capable" field.</summary>
    public const int CpuCapableFieldNumber = 10;
    private bool cpuCapable_;
    /// <summary>
    ///reserved	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CpuCapable {
      get { return cpuCapable_; }
      set {
        cpuCapable_ = value;
      }
    }

    /// <summary>Field number for the "gpu_capable" field.</summary>
    public const int GpuCapableFieldNumber = 11;
    private bool gpuCapable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GpuCapable {
      get { return gpuCapable_; }
      set {
        gpuCapable_ = value;
      }
    }

    /// <summary>Field number for the "include_as_preprocessor" field.</summary>
    public const int IncludeAsPreprocessorFieldNumber = 12;
    private bool includeAsPreprocessor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeAsPreprocessor {
      get { return includeAsPreprocessor_; }
      set {
        includeAsPreprocessor_ = value;
      }
    }

    /// <summary>Field number for the "omit_from_main_loop" field.</summary>
    public const int OmitFromMainLoopFieldNumber = 13;
    private bool omitFromMainLoop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OmitFromMainLoop {
      get { return omitFromMainLoop_; }
      set {
        omitFromMainLoop_ = value;
      }
    }

    /// <summary>Field number for the "include_as_postprocessor" field.</summary>
    public const int IncludeAsPostprocessorFieldNumber = 14;
    private bool includeAsPostprocessor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeAsPostprocessor {
      get { return includeAsPostprocessor_; }
      set {
        includeAsPostprocessor_ = value;
      }
    }

    /// <summary>Field number for the "mutually_exclusive" field.</summary>
    public const int MutuallyExclusiveFieldNumber = 15;
    private bool mutuallyExclusive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MutuallyExclusive {
      get { return mutuallyExclusive_; }
      set {
        mutuallyExclusive_ = value;
      }
    }

    /// <summary>Field number for the "only_once" field.</summary>
    public const int OnlyOnceFieldNumber = 16;
    private bool onlyOnce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnlyOnce {
      get { return onlyOnce_; }
      set {
        onlyOnce_ = value;
      }
    }

    /// <summary>Field number for the "push_front" field.</summary>
    public const int PushFrontFieldNumber = 17;
    private bool pushFront_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PushFront {
      get { return pushFront_; }
      set {
        pushFront_ = value;
      }
    }

    /// <summary>Field number for the "dont_flatten" field.</summary>
    public const int DontFlattenFieldNumber = 18;
    private bool dontFlatten_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DontFlatten {
      get { return dontFlatten_; }
      set {
        dontFlatten_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Function);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Function other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!argumentTypes_.Equals(other.argumentTypes_)) return false;
      if(!argumentDescriptions_.Equals(other.argumentDescriptions_)) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if(!constants_.Equals(other.constants_)) return false;
      if(!toBeDefined_.Equals(other.toBeDefined_)) return false;
      if(!data_.Equals(other.data_)) return false;
      if (CpuCapable != other.CpuCapable) return false;
      if (GpuCapable != other.GpuCapable) return false;
      if (IncludeAsPreprocessor != other.IncludeAsPreprocessor) return false;
      if (OmitFromMainLoop != other.OmitFromMainLoop) return false;
      if (IncludeAsPostprocessor != other.IncludeAsPostprocessor) return false;
      if (MutuallyExclusive != other.MutuallyExclusive) return false;
      if (OnlyOnce != other.OnlyOnce) return false;
      if (PushFront != other.PushFront) return false;
      if (DontFlatten != other.DontFlatten) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= argumentTypes_.GetHashCode();
      hash ^= argumentDescriptions_.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= outputs_.GetHashCode();
      hash ^= constants_.GetHashCode();
      hash ^= toBeDefined_.GetHashCode();
      hash ^= data_.GetHashCode();
      if (CpuCapable != false) hash ^= CpuCapable.GetHashCode();
      if (GpuCapable != false) hash ^= GpuCapable.GetHashCode();
      if (IncludeAsPreprocessor != false) hash ^= IncludeAsPreprocessor.GetHashCode();
      if (OmitFromMainLoop != false) hash ^= OmitFromMainLoop.GetHashCode();
      if (IncludeAsPostprocessor != false) hash ^= IncludeAsPostprocessor.GetHashCode();
      if (MutuallyExclusive != false) hash ^= MutuallyExclusive.GetHashCode();
      if (OnlyOnce != false) hash ^= OnlyOnce.GetHashCode();
      if (PushFront != false) hash ^= PushFront.GetHashCode();
      if (DontFlatten != false) hash ^= DontFlatten.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      argumentTypes_.WriteTo(output, _repeated_argumentTypes_codec);
      argumentDescriptions_.WriteTo(output, _repeated_argumentDescriptions_codec);
      inputs_.WriteTo(output, _repeated_inputs_codec);
      outputs_.WriteTo(output, _repeated_outputs_codec);
      constants_.WriteTo(output, _repeated_constants_codec);
      toBeDefined_.WriteTo(output, _repeated_toBeDefined_codec);
      data_.WriteTo(output, _repeated_data_codec);
      if (CpuCapable != false) {
        output.WriteRawTag(80);
        output.WriteBool(CpuCapable);
      }
      if (GpuCapable != false) {
        output.WriteRawTag(88);
        output.WriteBool(GpuCapable);
      }
      if (IncludeAsPreprocessor != false) {
        output.WriteRawTag(96);
        output.WriteBool(IncludeAsPreprocessor);
      }
      if (OmitFromMainLoop != false) {
        output.WriteRawTag(104);
        output.WriteBool(OmitFromMainLoop);
      }
      if (IncludeAsPostprocessor != false) {
        output.WriteRawTag(112);
        output.WriteBool(IncludeAsPostprocessor);
      }
      if (MutuallyExclusive != false) {
        output.WriteRawTag(120);
        output.WriteBool(MutuallyExclusive);
      }
      if (OnlyOnce != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(OnlyOnce);
      }
      if (PushFront != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(PushFront);
      }
      if (DontFlatten != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(DontFlatten);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += argumentTypes_.CalculateSize(_repeated_argumentTypes_codec);
      size += argumentDescriptions_.CalculateSize(_repeated_argumentDescriptions_codec);
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      size += constants_.CalculateSize(_repeated_constants_codec);
      size += toBeDefined_.CalculateSize(_repeated_toBeDefined_codec);
      size += data_.CalculateSize(_repeated_data_codec);
      if (CpuCapable != false) {
        size += 1 + 1;
      }
      if (GpuCapable != false) {
        size += 1 + 1;
      }
      if (IncludeAsPreprocessor != false) {
        size += 1 + 1;
      }
      if (OmitFromMainLoop != false) {
        size += 1 + 1;
      }
      if (IncludeAsPostprocessor != false) {
        size += 1 + 1;
      }
      if (MutuallyExclusive != false) {
        size += 1 + 1;
      }
      if (OnlyOnce != false) {
        size += 2 + 1;
      }
      if (PushFront != false) {
        size += 2 + 1;
      }
      if (DontFlatten != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Function other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      argumentTypes_.Add(other.argumentTypes_);
      argumentDescriptions_.Add(other.argumentDescriptions_);
      inputs_.Add(other.inputs_);
      outputs_.Add(other.outputs_);
      constants_.Add(other.constants_);
      toBeDefined_.Add(other.toBeDefined_);
      data_.Add(other.data_);
      if (other.CpuCapable != false) {
        CpuCapable = other.CpuCapable;
      }
      if (other.GpuCapable != false) {
        GpuCapable = other.GpuCapable;
      }
      if (other.IncludeAsPreprocessor != false) {
        IncludeAsPreprocessor = other.IncludeAsPreprocessor;
      }
      if (other.OmitFromMainLoop != false) {
        OmitFromMainLoop = other.OmitFromMainLoop;
      }
      if (other.IncludeAsPostprocessor != false) {
        IncludeAsPostprocessor = other.IncludeAsPostprocessor;
      }
      if (other.MutuallyExclusive != false) {
        MutuallyExclusive = other.MutuallyExclusive;
      }
      if (other.OnlyOnce != false) {
        OnlyOnce = other.OnlyOnce;
      }
      if (other.PushFront != false) {
        PushFront = other.PushFront;
      }
      if (other.DontFlatten != false) {
        DontFlatten = other.DontFlatten;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            argumentTypes_.AddEntriesFrom(input, _repeated_argumentTypes_codec);
            break;
          }
          case 26: {
            argumentDescriptions_.AddEntriesFrom(input, _repeated_argumentDescriptions_codec);
            break;
          }
          case 34: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 42: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 50: {
            constants_.AddEntriesFrom(input, _repeated_constants_codec);
            break;
          }
          case 58: {
            toBeDefined_.AddEntriesFrom(input, _repeated_toBeDefined_codec);
            break;
          }
          case 66: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 80: {
            CpuCapable = input.ReadBool();
            break;
          }
          case 88: {
            GpuCapable = input.ReadBool();
            break;
          }
          case 96: {
            IncludeAsPreprocessor = input.ReadBool();
            break;
          }
          case 104: {
            OmitFromMainLoop = input.ReadBool();
            break;
          }
          case 112: {
            IncludeAsPostprocessor = input.ReadBool();
            break;
          }
          case 120: {
            MutuallyExclusive = input.ReadBool();
            break;
          }
          case 128: {
            OnlyOnce = input.ReadBool();
            break;
          }
          case 136: {
            PushFront = input.ReadBool();
            break;
          }
          case 144: {
            DontFlatten = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///compatible with xcompute instruction  (a function instance bound to arguments... data, regions, etc)
  /// </summary>
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SystemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      function_ = other.function_ != null ? other.function_.Clone() : null;
      argsAreSet_ = other.argsAreSet_;
      kernelReady_ = other.kernelReady_;
      execCount_ = other.execCount_;
      effectiveSize_ = other.effectiveSize_;
      version_ = other.version_;
      id_ = other.id_;
      nKernel_ = other.nKernel_;
      progress_ = other.progress_;
      msg_ = other.msg_;
      data_ = other.data_.Clone();
      before_ = other.before_.Clone();
      after_ = other.after_.Clone();
      regionType_ = other.regionType_.Clone();
      regionId_ = other.regionId_.Clone();
      argumentTypes_ = other.argumentTypes_.Clone();
      argumentDescriptions_ = other.argumentDescriptions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 1;
    private global::Messages.Function function_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Function Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "args_are_set" field.</summary>
    public const int ArgsAreSetFieldNumber = 2;
    private bool argsAreSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArgsAreSet {
      get { return argsAreSet_; }
      set {
        argsAreSet_ = value;
      }
    }

    /// <summary>Field number for the "kernel_ready" field.</summary>
    public const int KernelReadyFieldNumber = 3;
    private bool kernelReady_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KernelReady {
      get { return kernelReady_; }
      set {
        kernelReady_ = value;
      }
    }

    /// <summary>Field number for the "exec_count" field.</summary>
    public const int ExecCountFieldNumber = 4;
    private long execCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExecCount {
      get { return execCount_; }
      set {
        execCount_ = value;
      }
    }

    /// <summary>Field number for the "effective_size" field.</summary>
    public const int EffectiveSizeFieldNumber = 5;
    private long effectiveSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EffectiveSize {
      get { return effectiveSize_; }
      set {
        effectiveSize_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    private long id_;
    /// <summary>
    ///unique runtime identifier (assigned and only valid within a server session)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "n_kernel" field.</summary>
    public const int NKernelFieldNumber = 8;
    private long nKernel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NKernel {
      get { return nKernel_; }
      set {
        nKernel_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 9;
    private float progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 10;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Messages.Vector64> _repeated_data_codec
        = pb::FieldCodec.ForMessage(98, global::Messages.Vector64.Parser);
    private readonly pbc::RepeatedField<global::Messages.Vector64> data_ = new pbc::RepeatedField<global::Messages.Vector64>();
    /// <summary>
    ///reserved	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Vector64> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Messages.Command> _repeated_before_codec
        = pb::FieldCodec.ForMessage(106, global::Messages.Command.Parser);
    private readonly pbc::RepeatedField<global::Messages.Command> before_ = new pbc::RepeatedField<global::Messages.Command>();
    /// <summary>
    ///optional, to be called from within bound function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Command> Before {
      get { return before_; }
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Messages.Command> _repeated_after_codec
        = pb::FieldCodec.ForMessage(114, global::Messages.Command.Parser);
    private readonly pbc::RepeatedField<global::Messages.Command> after_ = new pbc::RepeatedField<global::Messages.Command>();
    /// <summary>
    ///optional, to be called from within bound function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Command> After {
      get { return after_; }
    }

    /// <summary>Field number for the "region_type" field.</summary>
    public const int RegionTypeFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_regionType_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> regionType_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///if assigned, used to indentify specific zones for conditions, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RegionType {
      get { return regionType_; }
    }

    /// <summary>Field number for the "region_id" field.</summary>
    public const int RegionIdFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_regionId_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> regionId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///if assigned, used to indentify specific zones for conditions, etc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RegionId {
      get { return regionId_; }
    }

    /// <summary>Field number for the "argument_types" field.</summary>
    public const int ArgumentTypesFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _repeated_argumentTypes_codec
        = pb::FieldCodec.ForString(138);
    private readonly pbc::RepeatedField<string> argumentTypes_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///bound argument type names to operate (name of class or type)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ArgumentTypes {
      get { return argumentTypes_; }
    }

    /// <summary>Field number for the "argument_descriptions" field.</summary>
    public const int ArgumentDescriptionsFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_argumentDescriptions_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> argumentDescriptions_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///matching argument type descriptions (used by UI)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ArgumentDescriptions {
      get { return argumentDescriptions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Function, other.Function)) return false;
      if (ArgsAreSet != other.ArgsAreSet) return false;
      if (KernelReady != other.KernelReady) return false;
      if (ExecCount != other.ExecCount) return false;
      if (EffectiveSize != other.EffectiveSize) return false;
      if (Version != other.Version) return false;
      if (Id != other.Id) return false;
      if (NKernel != other.NKernel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Progress, other.Progress)) return false;
      if (Msg != other.Msg) return false;
      if(!data_.Equals(other.data_)) return false;
      if(!before_.Equals(other.before_)) return false;
      if(!after_.Equals(other.after_)) return false;
      if(!regionType_.Equals(other.regionType_)) return false;
      if(!regionId_.Equals(other.regionId_)) return false;
      if(!argumentTypes_.Equals(other.argumentTypes_)) return false;
      if(!argumentDescriptions_.Equals(other.argumentDescriptions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (function_ != null) hash ^= Function.GetHashCode();
      if (ArgsAreSet != false) hash ^= ArgsAreSet.GetHashCode();
      if (KernelReady != false) hash ^= KernelReady.GetHashCode();
      if (ExecCount != 0L) hash ^= ExecCount.GetHashCode();
      if (EffectiveSize != 0L) hash ^= EffectiveSize.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (NKernel != 0L) hash ^= NKernel.GetHashCode();
      if (Progress != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Progress);
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      hash ^= data_.GetHashCode();
      hash ^= before_.GetHashCode();
      hash ^= after_.GetHashCode();
      hash ^= regionType_.GetHashCode();
      hash ^= regionId_.GetHashCode();
      hash ^= argumentTypes_.GetHashCode();
      hash ^= argumentDescriptions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (function_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Function);
      }
      if (ArgsAreSet != false) {
        output.WriteRawTag(16);
        output.WriteBool(ArgsAreSet);
      }
      if (KernelReady != false) {
        output.WriteRawTag(24);
        output.WriteBool(KernelReady);
      }
      if (ExecCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExecCount);
      }
      if (EffectiveSize != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EffectiveSize);
      }
      if (Version != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Version);
      }
      if (Id != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Id);
      }
      if (NKernel != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(NKernel);
      }
      if (Progress != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Progress);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Msg);
      }
      data_.WriteTo(output, _repeated_data_codec);
      before_.WriteTo(output, _repeated_before_codec);
      after_.WriteTo(output, _repeated_after_codec);
      regionType_.WriteTo(output, _repeated_regionType_codec);
      regionId_.WriteTo(output, _repeated_regionId_codec);
      argumentTypes_.WriteTo(output, _repeated_argumentTypes_codec);
      argumentDescriptions_.WriteTo(output, _repeated_argumentDescriptions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (function_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Function);
      }
      if (ArgsAreSet != false) {
        size += 1 + 1;
      }
      if (KernelReady != false) {
        size += 1 + 1;
      }
      if (ExecCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExecCount);
      }
      if (EffectiveSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EffectiveSize);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (NKernel != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NKernel);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      size += before_.CalculateSize(_repeated_before_codec);
      size += after_.CalculateSize(_repeated_after_codec);
      size += regionType_.CalculateSize(_repeated_regionType_codec);
      size += regionId_.CalculateSize(_repeated_regionId_codec);
      size += argumentTypes_.CalculateSize(_repeated_argumentTypes_codec);
      size += argumentDescriptions_.CalculateSize(_repeated_argumentDescriptions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      if (other.function_ != null) {
        if (function_ == null) {
          Function = new global::Messages.Function();
        }
        Function.MergeFrom(other.Function);
      }
      if (other.ArgsAreSet != false) {
        ArgsAreSet = other.ArgsAreSet;
      }
      if (other.KernelReady != false) {
        KernelReady = other.KernelReady;
      }
      if (other.ExecCount != 0L) {
        ExecCount = other.ExecCount;
      }
      if (other.EffectiveSize != 0L) {
        EffectiveSize = other.EffectiveSize;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.NKernel != 0L) {
        NKernel = other.NKernel;
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      data_.Add(other.data_);
      before_.Add(other.before_);
      after_.Add(other.after_);
      regionType_.Add(other.regionType_);
      regionId_.Add(other.regionId_);
      argumentTypes_.Add(other.argumentTypes_);
      argumentDescriptions_.Add(other.argumentDescriptions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (function_ == null) {
              Function = new global::Messages.Function();
            }
            input.ReadMessage(Function);
            break;
          }
          case 16: {
            ArgsAreSet = input.ReadBool();
            break;
          }
          case 24: {
            KernelReady = input.ReadBool();
            break;
          }
          case 32: {
            ExecCount = input.ReadInt64();
            break;
          }
          case 40: {
            EffectiveSize = input.ReadInt64();
            break;
          }
          case 48: {
            Version = input.ReadInt64();
            break;
          }
          case 56: {
            Id = input.ReadInt64();
            break;
          }
          case 64: {
            NKernel = input.ReadInt64();
            break;
          }
          case 77: {
            Progress = input.ReadFloat();
            break;
          }
          case 82: {
            Msg = input.ReadString();
            break;
          }
          case 98: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 106: {
            before_.AddEntriesFrom(input, _repeated_before_codec);
            break;
          }
          case 114: {
            after_.AddEntriesFrom(input, _repeated_after_codec);
            break;
          }
          case 122:
          case 120: {
            regionType_.AddEntriesFrom(input, _repeated_regionType_codec);
            break;
          }
          case 130:
          case 128: {
            regionId_.AddEntriesFrom(input, _repeated_regionId_codec);
            break;
          }
          case 138: {
            argumentTypes_.AddEntriesFrom(input, _repeated_argumentTypes_codec);
            break;
          }
          case 146: {
            argumentDescriptions_.AddEntriesFrom(input, _repeated_argumentDescriptions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///compatible with xcompute solver
  /// </summary>
  public sealed partial class Script : pb::IMessage<Script> {
    private static readonly pb::MessageParser<Script> _parser = new pb::MessageParser<Script>(() => new Script());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Script> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SystemReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script(Script other) : this() {
      name_ = other.name_;
      msg_ = other.msg_;
      sourceCode_ = other.sourceCode_;
      uid_ = other.uid_;
      device_ = other.device_;
      status_ = other.status_;
      order_ = other.order_;
      progress_ = other.progress_;
      variables_ = other.variables_ != null ? other.variables_.Clone() : null;
      sequence_ = other.sequence_.Clone();
      before_ = other.before_ != null ? other.before_.Clone() : null;
      after_ = other.after_ != null ? other.after_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Script Clone() {
      return new Script(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_code" field.</summary>
    public const int SourceCodeFieldNumber = 3;
    private string sourceCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceCode {
      get { return sourceCode_; }
      set {
        sourceCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private long uid_;
    /// <summary>
    ///same as system uid, if assigned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 5;
    private int device_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 7;
    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 8;
    private float progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 10;
    private global::Messages.Variables variables_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Variables Variables {
      get { return variables_; }
      set {
        variables_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Messages.Command> _repeated_sequence_codec
        = pb::FieldCodec.ForMessage(98, global::Messages.Command.Parser);
    private readonly pbc::RepeatedField<global::Messages.Command> sequence_ = new pbc::RepeatedField<global::Messages.Command>();
    /// <summary>
    ///reserved	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Command> Sequence {
      get { return sequence_; }
    }

    /// <summary>Field number for the "before" field.</summary>
    public const int BeforeFieldNumber = 14;
    private global::Messages.Script before_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Script Before {
      get { return before_; }
      set {
        before_ = value;
      }
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 15;
    private global::Messages.Script after_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Script After {
      get { return after_; }
      set {
        after_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Script);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Script other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Msg != other.Msg) return false;
      if (SourceCode != other.SourceCode) return false;
      if (Uid != other.Uid) return false;
      if (Device != other.Device) return false;
      if (Status != other.Status) return false;
      if (Order != other.Order) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Progress, other.Progress)) return false;
      if (!object.Equals(Variables, other.Variables)) return false;
      if(!sequence_.Equals(other.sequence_)) return false;
      if (!object.Equals(Before, other.Before)) return false;
      if (!object.Equals(After, other.After)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (SourceCode.Length != 0) hash ^= SourceCode.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Device != 0) hash ^= Device.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      if (Progress != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Progress);
      if (variables_ != null) hash ^= Variables.GetHashCode();
      hash ^= sequence_.GetHashCode();
      if (before_ != null) hash ^= Before.GetHashCode();
      if (after_ != null) hash ^= After.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
      if (SourceCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SourceCode);
      }
      if (Uid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Uid);
      }
      if (Device != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Device);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Status);
      }
      if (Order != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Order);
      }
      if (Progress != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Progress);
      }
      if (variables_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Variables);
      }
      sequence_.WriteTo(output, _repeated_sequence_codec);
      if (before_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Before);
      }
      if (after_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(After);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (SourceCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceCode);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Device != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Device);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      if (variables_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variables);
      }
      size += sequence_.CalculateSize(_repeated_sequence_codec);
      if (before_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Before);
      }
      if (after_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(After);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Script other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.SourceCode.Length != 0) {
        SourceCode = other.SourceCode;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Device != 0) {
        Device = other.Device;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      if (other.variables_ != null) {
        if (variables_ == null) {
          Variables = new global::Messages.Variables();
        }
        Variables.MergeFrom(other.Variables);
      }
      sequence_.Add(other.sequence_);
      if (other.before_ != null) {
        if (before_ == null) {
          Before = new global::Messages.Script();
        }
        Before.MergeFrom(other.Before);
      }
      if (other.after_ != null) {
        if (after_ == null) {
          After = new global::Messages.Script();
        }
        After.MergeFrom(other.After);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
          case 26: {
            SourceCode = input.ReadString();
            break;
          }
          case 32: {
            Uid = input.ReadInt64();
            break;
          }
          case 40: {
            Device = input.ReadInt32();
            break;
          }
          case 48: {
            Status = input.ReadInt32();
            break;
          }
          case 56: {
            Order = input.ReadInt32();
            break;
          }
          case 69: {
            Progress = input.ReadFloat();
            break;
          }
          case 82: {
            if (variables_ == null) {
              Variables = new global::Messages.Variables();
            }
            input.ReadMessage(Variables);
            break;
          }
          case 98: {
            sequence_.AddEntriesFrom(input, _repeated_sequence_codec);
            break;
          }
          case 114: {
            if (before_ == null) {
              Before = new global::Messages.Script();
            }
            input.ReadMessage(Before);
            break;
          }
          case 122: {
            if (after_ == null) {
              After = new global::Messages.Script();
            }
            input.ReadMessage(After);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rule : pb::IMessage<Rule> {
    private static readonly pb::MessageParser<Rule> _parser = new pb::MessageParser<Rule>(() => new Rule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SystemReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rule(Rule other) : this() {
      pk_ = other.pk_;
      algorithms_ = other.algorithms_.Clone();
      priority_ = other.priority_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rule Clone() {
      return new Rule(this);
    }

    /// <summary>Field number for the "pk" field.</summary>
    public const int PkFieldNumber = 1;
    private string pk_ = "";
    /// <summary>
    ///serialized property-key &lt;property \t modifier \t ...>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pk {
      get { return pk_; }
      set {
        pk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "algorithms" field.</summary>
    public const int AlgorithmsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_algorithms_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> algorithms_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///names of algorithms to be associated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Algorithms {
      get { return algorithms_; }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_priority_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> priority_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///optional - larger numbers are more important
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Priority {
      get { return priority_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pk != other.Pk) return false;
      if(!algorithms_.Equals(other.algorithms_)) return false;
      if(!priority_.Equals(other.priority_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pk.Length != 0) hash ^= Pk.GetHashCode();
      hash ^= algorithms_.GetHashCode();
      hash ^= priority_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pk.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pk);
      }
      algorithms_.WriteTo(output, _repeated_algorithms_codec);
      priority_.WriteTo(output, _repeated_priority_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pk.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pk);
      }
      size += algorithms_.CalculateSize(_repeated_algorithms_codec);
      size += priority_.CalculateSize(_repeated_priority_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rule other) {
      if (other == null) {
        return;
      }
      if (other.Pk.Length != 0) {
        Pk = other.Pk;
      }
      algorithms_.Add(other.algorithms_);
      priority_.Add(other.priority_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pk = input.ReadString();
            break;
          }
          case 18: {
            algorithms_.AddEntriesFrom(input, _repeated_algorithms_codec);
            break;
          }
          case 26:
          case 24: {
            priority_.AddEntriesFrom(input, _repeated_priority_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///compatible with xcompute model
  /// </summary>
  public sealed partial class Model : pb::IMessage<Model> {
    private static readonly pb::MessageParser<Model> _parser = new pb::MessageParser<Model>(() => new Model());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Model> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SystemReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model(Model other) : this() {
      name_ = other.name_;
      dofs_ = other.dofs_.Clone();
      algorithms_ = other.algorithms_.Clone();
      availableOutputs_ = other.availableOutputs_.Clone();
      extraProperties_ = other.extraProperties_.Clone();
      compatibleConditions_ = other.compatibleConditions_.Clone();
      compatibleScripts_ = other.compatibleScripts_.Clone();
      subModels_ = other.subModels_.Clone();
      data_ = other.data_.Clone();
      rules_ = other.rules_.Clone();
      mutexStack_ = other.mutexStack_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Model Clone() {
      return new Model(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dofs" field.</summary>
    public const int DofsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_dofs_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> dofs_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Dofs {
      get { return dofs_; }
    }

    /// <summary>Field number for the "algorithms" field.</summary>
    public const int AlgorithmsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_algorithms_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> algorithms_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///ordered algorithms (by name)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Algorithms {
      get { return algorithms_; }
    }

    /// <summary>Field number for the "available_outputs" field.</summary>
    public const int AvailableOutputsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_availableOutputs_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> availableOutputs_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///serialized property-keys 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AvailableOutputs {
      get { return availableOutputs_; }
    }

    /// <summary>Field number for the "extra_properties" field.</summary>
    public const int ExtraPropertiesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_extraProperties_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> extraProperties_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///some pk's are not recorded by default as an optimization. they can be added
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExtraProperties {
      get { return extraProperties_; }
    }

    /// <summary>Field number for the "compatible_conditions" field.</summary>
    public const int CompatibleConditionsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_compatibleConditions_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> compatibleConditions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CompatibleConditions {
      get { return compatibleConditions_; }
    }

    /// <summary>Field number for the "compatible_scripts" field.</summary>
    public const int CompatibleScriptsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_compatibleScripts_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> compatibleScripts_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CompatibleScripts {
      get { return compatibleScripts_; }
    }

    /// <summary>Field number for the "sub_models" field.</summary>
    public const int SubModelsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Messages.Model> _repeated_subModels_codec
        = pb::FieldCodec.ForMessage(74, global::Messages.Model.Parser);
    private readonly pbc::RepeatedField<global::Messages.Model> subModels_ = new pbc::RepeatedField<global::Messages.Model>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Model> SubModels {
      get { return subModels_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Messages.Vector64> _repeated_data_codec
        = pb::FieldCodec.ForMessage(82, global::Messages.Vector64.Parser);
    private readonly pbc::RepeatedField<global::Messages.Vector64> data_ = new pbc::RepeatedField<global::Messages.Vector64>();
    /// <summary>
    ///high-level constants manpulated by user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Vector64> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "rules" field.</summary>
    public const int RulesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Messages.Rule> _repeated_rules_codec
        = pb::FieldCodec.ForMessage(90, global::Messages.Rule.Parser);
    private readonly pbc::RepeatedField<global::Messages.Rule> rules_ = new pbc::RepeatedField<global::Messages.Rule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Rule> Rules {
      get { return rules_; }
    }

    /// <summary>Field number for the "mutex_stack" field.</summary>
    public const int MutexStackFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Messages.Rule> _repeated_mutexStack_codec
        = pb::FieldCodec.ForMessage(98, global::Messages.Rule.Parser);
    private readonly pbc::RepeatedField<global::Messages.Rule> mutexStack_ = new pbc::RepeatedField<global::Messages.Rule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Rule> MutexStack {
      get { return mutexStack_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Model);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Model other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!dofs_.Equals(other.dofs_)) return false;
      if(!algorithms_.Equals(other.algorithms_)) return false;
      if(!availableOutputs_.Equals(other.availableOutputs_)) return false;
      if(!extraProperties_.Equals(other.extraProperties_)) return false;
      if(!compatibleConditions_.Equals(other.compatibleConditions_)) return false;
      if(!compatibleScripts_.Equals(other.compatibleScripts_)) return false;
      if(!subModels_.Equals(other.subModels_)) return false;
      if(!data_.Equals(other.data_)) return false;
      if(!rules_.Equals(other.rules_)) return false;
      if(!mutexStack_.Equals(other.mutexStack_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= dofs_.GetHashCode();
      hash ^= algorithms_.GetHashCode();
      hash ^= availableOutputs_.GetHashCode();
      hash ^= extraProperties_.GetHashCode();
      hash ^= compatibleConditions_.GetHashCode();
      hash ^= compatibleScripts_.GetHashCode();
      hash ^= subModels_.GetHashCode();
      hash ^= data_.GetHashCode();
      hash ^= rules_.GetHashCode();
      hash ^= mutexStack_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      dofs_.WriteTo(output, _repeated_dofs_codec);
      algorithms_.WriteTo(output, _repeated_algorithms_codec);
      availableOutputs_.WriteTo(output, _repeated_availableOutputs_codec);
      extraProperties_.WriteTo(output, _repeated_extraProperties_codec);
      compatibleConditions_.WriteTo(output, _repeated_compatibleConditions_codec);
      compatibleScripts_.WriteTo(output, _repeated_compatibleScripts_codec);
      subModels_.WriteTo(output, _repeated_subModels_codec);
      data_.WriteTo(output, _repeated_data_codec);
      rules_.WriteTo(output, _repeated_rules_codec);
      mutexStack_.WriteTo(output, _repeated_mutexStack_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += dofs_.CalculateSize(_repeated_dofs_codec);
      size += algorithms_.CalculateSize(_repeated_algorithms_codec);
      size += availableOutputs_.CalculateSize(_repeated_availableOutputs_codec);
      size += extraProperties_.CalculateSize(_repeated_extraProperties_codec);
      size += compatibleConditions_.CalculateSize(_repeated_compatibleConditions_codec);
      size += compatibleScripts_.CalculateSize(_repeated_compatibleScripts_codec);
      size += subModels_.CalculateSize(_repeated_subModels_codec);
      size += data_.CalculateSize(_repeated_data_codec);
      size += rules_.CalculateSize(_repeated_rules_codec);
      size += mutexStack_.CalculateSize(_repeated_mutexStack_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Model other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      dofs_.Add(other.dofs_);
      algorithms_.Add(other.algorithms_);
      availableOutputs_.Add(other.availableOutputs_);
      extraProperties_.Add(other.extraProperties_);
      compatibleConditions_.Add(other.compatibleConditions_);
      compatibleScripts_.Add(other.compatibleScripts_);
      subModels_.Add(other.subModels_);
      data_.Add(other.data_);
      rules_.Add(other.rules_);
      mutexStack_.Add(other.mutexStack_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            dofs_.AddEntriesFrom(input, _repeated_dofs_codec);
            break;
          }
          case 34: {
            algorithms_.AddEntriesFrom(input, _repeated_algorithms_codec);
            break;
          }
          case 42: {
            availableOutputs_.AddEntriesFrom(input, _repeated_availableOutputs_codec);
            break;
          }
          case 50: {
            extraProperties_.AddEntriesFrom(input, _repeated_extraProperties_codec);
            break;
          }
          case 58: {
            compatibleConditions_.AddEntriesFrom(input, _repeated_compatibleConditions_codec);
            break;
          }
          case 66: {
            compatibleScripts_.AddEntriesFrom(input, _repeated_compatibleScripts_codec);
            break;
          }
          case 74: {
            subModels_.AddEntriesFrom(input, _repeated_subModels_codec);
            break;
          }
          case 82: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 90: {
            rules_.AddEntriesFrom(input, _repeated_rules_codec);
            break;
          }
          case 98: {
            mutexStack_.AddEntriesFrom(input, _repeated_mutexStack_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///compatible with xcompute system
  /// </summary>
  public sealed partial class System : pb::IMessage<System> {
    private static readonly pb::MessageParser<System> _parser = new pb::MessageParser<System>(() => new System());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<System> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SystemReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System(System other) : this() {
      meta_ = other.meta_ != null ? other.meta_.Clone() : null;
      script_ = other.script_ != null ? other.script_.Clone() : null;
      geometry_ = other.geometry_;
      models_ = other.models_.Clone();
      constants_ = other.constants_.Clone();
      conditions_ = other.conditions_.Clone();
      children_ = other.children_.Clone();
      references_ = other.references_.Clone();
      attachments_ = other.attachments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public System Clone() {
      return new System(this);
    }

    /// <summary>Field number for the "meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Messages.Meta meta_;
    /// <summary>
    ///name and other basic info, some of which is non-persistent 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Meta Meta {
      get { return meta_; }
      set {
        meta_ = value;
      }
    }

    /// <summary>Field number for the "script" field.</summary>
    public const int ScriptFieldNumber = 2;
    private global::Messages.Script script_;
    /// <summary>
    ///serialized solver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Script Script {
      get { return script_; }
      set {
        script_ = value;
      }
    }

    /// <summary>Field number for the "geometry" field.</summary>
    public const int GeometryFieldNumber = 8;
    private string geometry_ = "";
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Geometry {
      get { return geometry_; }
      set {
        geometry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "models" field.</summary>
    public const int ModelsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Messages.Model> _repeated_models_codec
        = pb::FieldCodec.ForMessage(82, global::Messages.Model.Parser);
    private readonly pbc::RepeatedField<global::Messages.Model> models_ = new pbc::RepeatedField<global::Messages.Model>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Model> Models {
      get { return models_; }
    }

    /// <summary>Field number for the "constants" field.</summary>
    public const int ConstantsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Messages.Vector64> _repeated_constants_codec
        = pb::FieldCodec.ForMessage(90, global::Messages.Vector64.Parser);
    private readonly pbc::RepeatedField<global::Messages.Vector64> constants_ = new pbc::RepeatedField<global::Messages.Vector64>();
    /// <summary>
    ///physics.data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Vector64> Constants {
      get { return constants_; }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Messages.Command> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(98, global::Messages.Command.Parser);
    private readonly pbc::RepeatedField<global::Messages.Command> conditions_ = new pbc::RepeatedField<global::Messages.Command>();
    /// <summary>
    ///special commands applied as contraints and conditions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Command> Conditions {
      get { return conditions_; }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_children_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> children_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///sub-system names (exact matches)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "references" field.</summary>
    public const int ReferencesFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_references_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> references_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> References {
      get { return references_; }
    }

    /// <summary>Field number for the "attachments" field.</summary>
    public const int AttachmentsFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_attachments_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> attachments_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///external files such as pdf that users can attach to each system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Attachments {
      get { return attachments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as System);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(System other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Script, other.Script)) return false;
      if (Geometry != other.Geometry) return false;
      if(!models_.Equals(other.models_)) return false;
      if(!constants_.Equals(other.constants_)) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      if(!children_.Equals(other.children_)) return false;
      if(!references_.Equals(other.references_)) return false;
      if(!attachments_.Equals(other.attachments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (meta_ != null) hash ^= Meta.GetHashCode();
      if (script_ != null) hash ^= Script.GetHashCode();
      if (Geometry.Length != 0) hash ^= Geometry.GetHashCode();
      hash ^= models_.GetHashCode();
      hash ^= constants_.GetHashCode();
      hash ^= conditions_.GetHashCode();
      hash ^= children_.GetHashCode();
      hash ^= references_.GetHashCode();
      hash ^= attachments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (script_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Script);
      }
      if (Geometry.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Geometry);
      }
      models_.WriteTo(output, _repeated_models_codec);
      constants_.WriteTo(output, _repeated_constants_codec);
      conditions_.WriteTo(output, _repeated_conditions_codec);
      children_.WriteTo(output, _repeated_children_codec);
      references_.WriteTo(output, _repeated_references_codec);
      attachments_.WriteTo(output, _repeated_attachments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (script_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Script);
      }
      if (Geometry.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Geometry);
      }
      size += models_.CalculateSize(_repeated_models_codec);
      size += constants_.CalculateSize(_repeated_constants_codec);
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      size += children_.CalculateSize(_repeated_children_codec);
      size += references_.CalculateSize(_repeated_references_codec);
      size += attachments_.CalculateSize(_repeated_attachments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(System other) {
      if (other == null) {
        return;
      }
      if (other.meta_ != null) {
        if (meta_ == null) {
          Meta = new global::Messages.Meta();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.script_ != null) {
        if (script_ == null) {
          Script = new global::Messages.Script();
        }
        Script.MergeFrom(other.Script);
      }
      if (other.Geometry.Length != 0) {
        Geometry = other.Geometry;
      }
      models_.Add(other.models_);
      constants_.Add(other.constants_);
      conditions_.Add(other.conditions_);
      children_.Add(other.children_);
      references_.Add(other.references_);
      attachments_.Add(other.attachments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (meta_ == null) {
              Meta = new global::Messages.Meta();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (script_ == null) {
              Script = new global::Messages.Script();
            }
            input.ReadMessage(Script);
            break;
          }
          case 66: {
            Geometry = input.ReadString();
            break;
          }
          case 82: {
            models_.AddEntriesFrom(input, _repeated_models_codec);
            break;
          }
          case 90: {
            constants_.AddEntriesFrom(input, _repeated_constants_codec);
            break;
          }
          case 98: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
          case 106: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 114: {
            references_.AddEntriesFrom(input, _repeated_references_codec);
            break;
          }
          case 122: {
            attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
