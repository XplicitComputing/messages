// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: meta.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Messages {

  /// <summary>Holder for reflection information generated from meta.proto</summary>
  public static partial class MetaReflection {

    #region Descriptor
    /// <summary>File descriptor for meta.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgptZXRhLnByb3RvEghNZXNzYWdlcxoMdmVjdG9yLnByb3RvGg1zcGF0aWFs",
            "LnByb3RvIvIBCg5SZXByZXNlbnRhdGlvbhIUCgxwcm9wZXJ0eV9rZXkYASAB",
            "KAkSEQoJY29sb3JfbWFwGAIgASgFEhEKCWNvbXBvbmVudBgDIAEoBRISCgph",
            "dXRvX3JhbmdlGAQgASgIEhcKD3VzZV9kZWZhdWx0X2tleRgFIAEoCBIaChJj",
            "b2xvcl9vdXRfb2ZfcmFuZ2UYBiABKAgSFQoNdXNlX21hZ25pdHVkZRgHIAEo",
            "CBIZChFzaG93X2Rpc3BsYWNlbWVudBgIIAEoCBINCgVyYW5nZRgKIAMoAhIa",
            "ChJkaXNwbGFjZW1lbnRfc2NhbGUYCyADKAIi8gEKBlZpc3VhbBIeCgZyZWdp",
            "b24YASABKAsyDi5NZXNzYWdlcy5ab25lEjAKDnJlcHJlc2VudGF0aW9uGAIg",
            "ASgLMhguTWVzc2FnZXMuUmVwcmVzZW50YXRpb24SDQoFc3R5bGUYAyABKAUS",
            "DgoGcG9pbnRzGAQgAygFEg0KBWxpbmVzGAUgAygFEhEKCXRyaWFuZ2xlcxgG",
            "IAMoBRIbChNpbmRpY2VzX3Blcl9lbGVtZW50GAggAygFEhsKE2VsZW1lbnRz",
            "X3RvX2luZGljZXMYCSADKAUSGwoTaW5kaWNlc190b19lbGVtZW50cxgKIAMo",
            "BSKbAQoPR3JhcGhpY3NDb250cm9sEg0KBXN0eWxlGAEgASgFEhAKCGVuY29k",
            "aW5nGAIgASgFEg0KBWNvbG9yGAQgAygCEg0KBWFscGhhGAUgASgCEhMKC3Bv",
            "aW50X3dpZHRoGAYgASgCEhIKCmxpbmVfd2lkdGgYByABKAISDwoHdmlzaWJs",
            "ZRgKIAEoCBIPCgdvdmVybGF5GAsgASgIIocBCgxTbGljZUNvbnRyb2wSIAoG",
            "dmlzdWFsGAEgASgLMhAuTWVzc2FnZXMuVmlzdWFsEhEKCWludGVyc2VjdBgD",
            "IAEoCBIQCghuZWdhdGl2ZRgEIAEoCBIQCghwb3NpdGl2ZRgFIAEoCBIOCgZj",
            "ZW50ZXIYCCADKAESDgoGbm9ybWFsGAkgAygBIqQBCg5UcmFjZXJzQ29udHJv",
            "bBIgCgZ2aXN1YWwYASABKAsyEC5NZXNzYWdlcy5WaXN1YWwSFgoOcGFydGlj",
            "bGVfY291bnQYAyABKAMSDAoEc2VlZBgEIAEoAxIUCgxzcGF3bl9yZWdpb24Y",
            "BSADKAUSFAoMcmVnZW5fcmVnaW9uGAYgAygFEh4KFnVzZXJfZGVmaW5lZF9w",
            "b3NpdGlvbnMYCCADKAIi1gQKBE1ldGESDAoEbmFtZRgBIAEoCRIMCgRpY29u",
            "GAIgASgJEg0KBW93bmVyGAMgASgJEhAKCGNvbW1lbnRzGAQgASgJEg4KBnNl",
            "cmllcxgFIAEoCRIQCghzeXNfaW5mbxgGIAEoCRIRCglnZW9tX2luZm8YByAB",
            "KAkSEQoJZGlyZWN0b3J5GAggASgJEgsKA3VpZBgJIAEoAxIOCgZwYXJlbnQY",
            "CiABKAMSDwoHY3JlYXRlZBgLIAEoAxINCgVzYXZlZBgMIAEoAxIQCghtb2Rp",
            "ZmllZBgNIAEoAxIRCglpdGVyYXRpb24YDiABKAMSFQoNc2F2ZV9pbnRlcnZh",
            "bBgPIAEoAxIPCgdlbmFibGVkGBAgASgIEg4KBmxvY2tlZBgRIAEoCBIRCglh",
            "dXRvX3NhdmUYEiABKAgSJAoIcmV2aXNpb24YFCABKAsyEi5NZXNzYWdlcy5S",
            "ZXZpc2lvbhIjCgd2ZXJzaW9uGBUgASgLMhIuTWVzc2FnZXMuUmV2aXNpb24S",
            "IQoGYm91bmRzGBYgASgLMhEuTWVzc2FnZXMuRXh0cmVtYRItCgphcHBlYXJh",
            "bmNlGBggASgLMhkuTWVzc2FnZXMuR3JhcGhpY3NDb250cm9sEhAKCGNoaWxk",
            "cmVuGBkgAygDEg4KBmdyb3VwcxgaIAMoBRINCgVsb29wcxgbIAMoBRIQCghz",
            "dXJmYWNlcxgcIAMoBRIPCgd2b2x1bWVzGB0gAygFEhcKD21vZGVsX3RyYW5z",
            "Zm9ybRgeIAMoARISCgpwcm9wZXJ0aWVzGB8gAygJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Messages.VectorReflection.Descriptor, global::Messages.SpatialReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Representation), global::Messages.Representation.Parser, new[]{ "PropertyKey", "ColorMap", "Component", "AutoRange", "UseDefaultKey", "ColorOutOfRange", "UseMagnitude", "ShowDisplacement", "Range", "DisplacementScale" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Visual), global::Messages.Visual.Parser, new[]{ "Region", "Representation", "Style", "Points", "Lines", "Triangles", "IndicesPerElement", "ElementsToIndices", "IndicesToElements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.GraphicsControl), global::Messages.GraphicsControl.Parser, new[]{ "Style", "Encoding", "Color", "Alpha", "PointWidth", "LineWidth", "Visible", "Overlay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.SliceControl), global::Messages.SliceControl.Parser, new[]{ "Visual", "Intersect", "Negative", "Positive", "Center", "Normal" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.TracersControl), global::Messages.TracersControl.Parser, new[]{ "Visual", "ParticleCount", "Seed", "SpawnRegion", "RegenRegion", "UserDefinedPositions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Meta), global::Messages.Meta.Parser, new[]{ "Name", "Icon", "Owner", "Comments", "Series", "SysInfo", "GeomInfo", "Directory", "Uid", "Parent", "Created", "Saved", "Modified", "Iteration", "SaveInterval", "Enabled", "Locked", "AutoSave", "Revision", "Version", "Bounds", "Appearance", "Children", "Groups", "Loops", "Surfaces", "Volumes", "ModelTransform", "Properties" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Representation : pb::IMessage<Representation> {
    private static readonly pb::MessageParser<Representation> _parser = new pb::MessageParser<Representation>(() => new Representation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Representation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MetaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Representation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Representation(Representation other) : this() {
      propertyKey_ = other.propertyKey_;
      colorMap_ = other.colorMap_;
      component_ = other.component_;
      autoRange_ = other.autoRange_;
      useDefaultKey_ = other.useDefaultKey_;
      colorOutOfRange_ = other.colorOutOfRange_;
      useMagnitude_ = other.useMagnitude_;
      showDisplacement_ = other.showDisplacement_;
      range_ = other.range_.Clone();
      displacementScale_ = other.displacementScale_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Representation Clone() {
      return new Representation(this);
    }

    /// <summary>Field number for the "property_key" field.</summary>
    public const int PropertyKeyFieldNumber = 1;
    private string propertyKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PropertyKey {
      get { return propertyKey_; }
      set {
        propertyKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color_map" field.</summary>
    public const int ColorMapFieldNumber = 2;
    private int colorMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ColorMap {
      get { return colorMap_; }
      set {
        colorMap_ = value;
      }
    }

    /// <summary>Field number for the "component" field.</summary>
    public const int ComponentFieldNumber = 3;
    private int component_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Component {
      get { return component_; }
      set {
        component_ = value;
      }
    }

    /// <summary>Field number for the "auto_range" field.</summary>
    public const int AutoRangeFieldNumber = 4;
    private bool autoRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoRange {
      get { return autoRange_; }
      set {
        autoRange_ = value;
      }
    }

    /// <summary>Field number for the "use_default_key" field.</summary>
    public const int UseDefaultKeyFieldNumber = 5;
    private bool useDefaultKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseDefaultKey {
      get { return useDefaultKey_; }
      set {
        useDefaultKey_ = value;
      }
    }

    /// <summary>Field number for the "color_out_of_range" field.</summary>
    public const int ColorOutOfRangeFieldNumber = 6;
    private bool colorOutOfRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ColorOutOfRange {
      get { return colorOutOfRange_; }
      set {
        colorOutOfRange_ = value;
      }
    }

    /// <summary>Field number for the "use_magnitude" field.</summary>
    public const int UseMagnitudeFieldNumber = 7;
    private bool useMagnitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMagnitude {
      get { return useMagnitude_; }
      set {
        useMagnitude_ = value;
      }
    }

    /// <summary>Field number for the "show_displacement" field.</summary>
    public const int ShowDisplacementFieldNumber = 8;
    private bool showDisplacement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowDisplacement {
      get { return showDisplacement_; }
      set {
        showDisplacement_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_range_codec
        = pb::FieldCodec.ForFloat(82);
    private readonly pbc::RepeatedField<float> range_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Range {
      get { return range_; }
    }

    /// <summary>Field number for the "displacement_scale" field.</summary>
    public const int DisplacementScaleFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_displacementScale_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> displacementScale_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DisplacementScale {
      get { return displacementScale_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Representation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Representation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyKey != other.PropertyKey) return false;
      if (ColorMap != other.ColorMap) return false;
      if (Component != other.Component) return false;
      if (AutoRange != other.AutoRange) return false;
      if (UseDefaultKey != other.UseDefaultKey) return false;
      if (ColorOutOfRange != other.ColorOutOfRange) return false;
      if (UseMagnitude != other.UseMagnitude) return false;
      if (ShowDisplacement != other.ShowDisplacement) return false;
      if(!range_.Equals(other.range_)) return false;
      if(!displacementScale_.Equals(other.displacementScale_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyKey.Length != 0) hash ^= PropertyKey.GetHashCode();
      if (ColorMap != 0) hash ^= ColorMap.GetHashCode();
      if (Component != 0) hash ^= Component.GetHashCode();
      if (AutoRange != false) hash ^= AutoRange.GetHashCode();
      if (UseDefaultKey != false) hash ^= UseDefaultKey.GetHashCode();
      if (ColorOutOfRange != false) hash ^= ColorOutOfRange.GetHashCode();
      if (UseMagnitude != false) hash ^= UseMagnitude.GetHashCode();
      if (ShowDisplacement != false) hash ^= ShowDisplacement.GetHashCode();
      hash ^= range_.GetHashCode();
      hash ^= displacementScale_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PropertyKey);
      }
      if (ColorMap != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ColorMap);
      }
      if (Component != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Component);
      }
      if (AutoRange != false) {
        output.WriteRawTag(32);
        output.WriteBool(AutoRange);
      }
      if (UseDefaultKey != false) {
        output.WriteRawTag(40);
        output.WriteBool(UseDefaultKey);
      }
      if (ColorOutOfRange != false) {
        output.WriteRawTag(48);
        output.WriteBool(ColorOutOfRange);
      }
      if (UseMagnitude != false) {
        output.WriteRawTag(56);
        output.WriteBool(UseMagnitude);
      }
      if (ShowDisplacement != false) {
        output.WriteRawTag(64);
        output.WriteBool(ShowDisplacement);
      }
      range_.WriteTo(output, _repeated_range_codec);
      displacementScale_.WriteTo(output, _repeated_displacementScale_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropertyKey);
      }
      if (ColorMap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorMap);
      }
      if (Component != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Component);
      }
      if (AutoRange != false) {
        size += 1 + 1;
      }
      if (UseDefaultKey != false) {
        size += 1 + 1;
      }
      if (ColorOutOfRange != false) {
        size += 1 + 1;
      }
      if (UseMagnitude != false) {
        size += 1 + 1;
      }
      if (ShowDisplacement != false) {
        size += 1 + 1;
      }
      size += range_.CalculateSize(_repeated_range_codec);
      size += displacementScale_.CalculateSize(_repeated_displacementScale_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Representation other) {
      if (other == null) {
        return;
      }
      if (other.PropertyKey.Length != 0) {
        PropertyKey = other.PropertyKey;
      }
      if (other.ColorMap != 0) {
        ColorMap = other.ColorMap;
      }
      if (other.Component != 0) {
        Component = other.Component;
      }
      if (other.AutoRange != false) {
        AutoRange = other.AutoRange;
      }
      if (other.UseDefaultKey != false) {
        UseDefaultKey = other.UseDefaultKey;
      }
      if (other.ColorOutOfRange != false) {
        ColorOutOfRange = other.ColorOutOfRange;
      }
      if (other.UseMagnitude != false) {
        UseMagnitude = other.UseMagnitude;
      }
      if (other.ShowDisplacement != false) {
        ShowDisplacement = other.ShowDisplacement;
      }
      range_.Add(other.range_);
      displacementScale_.Add(other.displacementScale_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PropertyKey = input.ReadString();
            break;
          }
          case 16: {
            ColorMap = input.ReadInt32();
            break;
          }
          case 24: {
            Component = input.ReadInt32();
            break;
          }
          case 32: {
            AutoRange = input.ReadBool();
            break;
          }
          case 40: {
            UseDefaultKey = input.ReadBool();
            break;
          }
          case 48: {
            ColorOutOfRange = input.ReadBool();
            break;
          }
          case 56: {
            UseMagnitude = input.ReadBool();
            break;
          }
          case 64: {
            ShowDisplacement = input.ReadBool();
            break;
          }
          case 82:
          case 85: {
            range_.AddEntriesFrom(input, _repeated_range_codec);
            break;
          }
          case 90:
          case 93: {
            displacementScale_.AddEntriesFrom(input, _repeated_displacementScale_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Visual : pb::IMessage<Visual> {
    private static readonly pb::MessageParser<Visual> _parser = new pb::MessageParser<Visual>(() => new Visual());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Visual> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MetaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Visual() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Visual(Visual other) : this() {
      region_ = other.region_ != null ? other.region_.Clone() : null;
      representation_ = other.representation_ != null ? other.representation_.Clone() : null;
      style_ = other.style_;
      points_ = other.points_.Clone();
      lines_ = other.lines_.Clone();
      triangles_ = other.triangles_.Clone();
      indicesPerElement_ = other.indicesPerElement_.Clone();
      elementsToIndices_ = other.elementsToIndices_.Clone();
      indicesToElements_ = other.indicesToElements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Visual Clone() {
      return new Visual(this);
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 1;
    private global::Messages.Zone region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Zone Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "representation" field.</summary>
    public const int RepresentationFieldNumber = 2;
    private global::Messages.Representation representation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Representation Representation {
      get { return representation_; }
      set {
        representation_ = value;
      }
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 3;
    private int style_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_points_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> points_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_lines_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> lines_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Lines {
      get { return lines_; }
    }

    /// <summary>Field number for the "triangles" field.</summary>
    public const int TrianglesFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_triangles_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> triangles_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Triangles {
      get { return triangles_; }
    }

    /// <summary>Field number for the "indices_per_element" field.</summary>
    public const int IndicesPerElementFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_indicesPerElement_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> indicesPerElement_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IndicesPerElement {
      get { return indicesPerElement_; }
    }

    /// <summary>Field number for the "elements_to_indices" field.</summary>
    public const int ElementsToIndicesFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_elementsToIndices_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> elementsToIndices_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///only used on composite elements (e.g. QUAD4 represented using triangles)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ElementsToIndices {
      get { return elementsToIndices_; }
    }

    /// <summary>Field number for the "indices_to_elements" field.</summary>
    public const int IndicesToElementsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_indicesToElements_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> indicesToElements_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///only used on composite elements (e.g. QUAD4 represented using triangles)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IndicesToElements {
      get { return indicesToElements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Visual);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Visual other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Region, other.Region)) return false;
      if (!object.Equals(Representation, other.Representation)) return false;
      if (Style != other.Style) return false;
      if(!points_.Equals(other.points_)) return false;
      if(!lines_.Equals(other.lines_)) return false;
      if(!triangles_.Equals(other.triangles_)) return false;
      if(!indicesPerElement_.Equals(other.indicesPerElement_)) return false;
      if(!elementsToIndices_.Equals(other.elementsToIndices_)) return false;
      if(!indicesToElements_.Equals(other.indicesToElements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (region_ != null) hash ^= Region.GetHashCode();
      if (representation_ != null) hash ^= Representation.GetHashCode();
      if (Style != 0) hash ^= Style.GetHashCode();
      hash ^= points_.GetHashCode();
      hash ^= lines_.GetHashCode();
      hash ^= triangles_.GetHashCode();
      hash ^= indicesPerElement_.GetHashCode();
      hash ^= elementsToIndices_.GetHashCode();
      hash ^= indicesToElements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (region_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Region);
      }
      if (representation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Representation);
      }
      if (Style != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Style);
      }
      points_.WriteTo(output, _repeated_points_codec);
      lines_.WriteTo(output, _repeated_lines_codec);
      triangles_.WriteTo(output, _repeated_triangles_codec);
      indicesPerElement_.WriteTo(output, _repeated_indicesPerElement_codec);
      elementsToIndices_.WriteTo(output, _repeated_elementsToIndices_codec);
      indicesToElements_.WriteTo(output, _repeated_indicesToElements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (region_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
      }
      if (representation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Representation);
      }
      if (Style != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Style);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      size += lines_.CalculateSize(_repeated_lines_codec);
      size += triangles_.CalculateSize(_repeated_triangles_codec);
      size += indicesPerElement_.CalculateSize(_repeated_indicesPerElement_codec);
      size += elementsToIndices_.CalculateSize(_repeated_elementsToIndices_codec);
      size += indicesToElements_.CalculateSize(_repeated_indicesToElements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Visual other) {
      if (other == null) {
        return;
      }
      if (other.region_ != null) {
        if (region_ == null) {
          Region = new global::Messages.Zone();
        }
        Region.MergeFrom(other.Region);
      }
      if (other.representation_ != null) {
        if (representation_ == null) {
          Representation = new global::Messages.Representation();
        }
        Representation.MergeFrom(other.Representation);
      }
      if (other.Style != 0) {
        Style = other.Style;
      }
      points_.Add(other.points_);
      lines_.Add(other.lines_);
      triangles_.Add(other.triangles_);
      indicesPerElement_.Add(other.indicesPerElement_);
      elementsToIndices_.Add(other.elementsToIndices_);
      indicesToElements_.Add(other.indicesToElements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (region_ == null) {
              Region = new global::Messages.Zone();
            }
            input.ReadMessage(Region);
            break;
          }
          case 18: {
            if (representation_ == null) {
              Representation = new global::Messages.Representation();
            }
            input.ReadMessage(Representation);
            break;
          }
          case 24: {
            Style = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 42:
          case 40: {
            lines_.AddEntriesFrom(input, _repeated_lines_codec);
            break;
          }
          case 50:
          case 48: {
            triangles_.AddEntriesFrom(input, _repeated_triangles_codec);
            break;
          }
          case 66:
          case 64: {
            indicesPerElement_.AddEntriesFrom(input, _repeated_indicesPerElement_codec);
            break;
          }
          case 74:
          case 72: {
            elementsToIndices_.AddEntriesFrom(input, _repeated_elementsToIndices_codec);
            break;
          }
          case 82:
          case 80: {
            indicesToElements_.AddEntriesFrom(input, _repeated_indicesToElements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GraphicsControl : pb::IMessage<GraphicsControl> {
    private static readonly pb::MessageParser<GraphicsControl> _parser = new pb::MessageParser<GraphicsControl>(() => new GraphicsControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphicsControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MetaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsControl(GraphicsControl other) : this() {
      style_ = other.style_;
      encoding_ = other.encoding_;
      color_ = other.color_.Clone();
      alpha_ = other.alpha_;
      pointWidth_ = other.pointWidth_;
      lineWidth_ = other.lineWidth_;
      visible_ = other.visible_;
      overlay_ = other.overlay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphicsControl Clone() {
      return new GraphicsControl(this);
    }

    /// <summary>Field number for the "style" field.</summary>
    public const int StyleFieldNumber = 1;
    private int style_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Style {
      get { return style_; }
      set {
        style_ = value;
      }
    }

    /// <summary>Field number for the "encoding" field.</summary>
    public const int EncodingFieldNumber = 2;
    private int encoding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Encoding {
      get { return encoding_; }
      set {
        encoding_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_color_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> color_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Color {
      get { return color_; }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 5;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "point_width" field.</summary>
    public const int PointWidthFieldNumber = 6;
    private float pointWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PointWidth {
      get { return pointWidth_; }
      set {
        pointWidth_ = value;
      }
    }

    /// <summary>Field number for the "line_width" field.</summary>
    public const int LineWidthFieldNumber = 7;
    private float lineWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LineWidth {
      get { return lineWidth_; }
      set {
        lineWidth_ = value;
      }
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 10;
    private bool visible_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "overlay" field.</summary>
    public const int OverlayFieldNumber = 11;
    private bool overlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Overlay {
      get { return overlay_; }
      set {
        overlay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphicsControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphicsControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Style != other.Style) return false;
      if (Encoding != other.Encoding) return false;
      if(!color_.Equals(other.color_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointWidth, other.PointWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LineWidth, other.LineWidth)) return false;
      if (Visible != other.Visible) return false;
      if (Overlay != other.Overlay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Style != 0) hash ^= Style.GetHashCode();
      if (Encoding != 0) hash ^= Encoding.GetHashCode();
      hash ^= color_.GetHashCode();
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (PointWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointWidth);
      if (LineWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LineWidth);
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (Overlay != false) hash ^= Overlay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Style != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Style);
      }
      if (Encoding != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Encoding);
      }
      color_.WriteTo(output, _repeated_color_codec);
      if (Alpha != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Alpha);
      }
      if (PointWidth != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PointWidth);
      }
      if (LineWidth != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(LineWidth);
      }
      if (Visible != false) {
        output.WriteRawTag(80);
        output.WriteBool(Visible);
      }
      if (Overlay != false) {
        output.WriteRawTag(88);
        output.WriteBool(Overlay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Style != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Style);
      }
      if (Encoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Encoding);
      }
      size += color_.CalculateSize(_repeated_color_codec);
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (PointWidth != 0F) {
        size += 1 + 4;
      }
      if (LineWidth != 0F) {
        size += 1 + 4;
      }
      if (Visible != false) {
        size += 1 + 1;
      }
      if (Overlay != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphicsControl other) {
      if (other == null) {
        return;
      }
      if (other.Style != 0) {
        Style = other.Style;
      }
      if (other.Encoding != 0) {
        Encoding = other.Encoding;
      }
      color_.Add(other.color_);
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.PointWidth != 0F) {
        PointWidth = other.PointWidth;
      }
      if (other.LineWidth != 0F) {
        LineWidth = other.LineWidth;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      if (other.Overlay != false) {
        Overlay = other.Overlay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Style = input.ReadInt32();
            break;
          }
          case 16: {
            Encoding = input.ReadInt32();
            break;
          }
          case 34:
          case 37: {
            color_.AddEntriesFrom(input, _repeated_color_codec);
            break;
          }
          case 45: {
            Alpha = input.ReadFloat();
            break;
          }
          case 53: {
            PointWidth = input.ReadFloat();
            break;
          }
          case 61: {
            LineWidth = input.ReadFloat();
            break;
          }
          case 80: {
            Visible = input.ReadBool();
            break;
          }
          case 88: {
            Overlay = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SliceControl : pb::IMessage<SliceControl> {
    private static readonly pb::MessageParser<SliceControl> _parser = new pb::MessageParser<SliceControl>(() => new SliceControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SliceControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MetaReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceControl(SliceControl other) : this() {
      visual_ = other.visual_ != null ? other.visual_.Clone() : null;
      intersect_ = other.intersect_;
      negative_ = other.negative_;
      positive_ = other.positive_;
      center_ = other.center_.Clone();
      normal_ = other.normal_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceControl Clone() {
      return new SliceControl(this);
    }

    /// <summary>Field number for the "visual" field.</summary>
    public const int VisualFieldNumber = 1;
    private global::Messages.Visual visual_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Visual Visual {
      get { return visual_; }
      set {
        visual_ = value;
      }
    }

    /// <summary>Field number for the "intersect" field.</summary>
    public const int IntersectFieldNumber = 3;
    private bool intersect_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Intersect {
      get { return intersect_; }
      set {
        intersect_ = value;
      }
    }

    /// <summary>Field number for the "negative" field.</summary>
    public const int NegativeFieldNumber = 4;
    private bool negative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Negative {
      get { return negative_; }
      set {
        negative_ = value;
      }
    }

    /// <summary>Field number for the "positive" field.</summary>
    public const int PositiveFieldNumber = 5;
    private bool positive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Positive {
      get { return positive_; }
      set {
        positive_ = value;
      }
    }

    /// <summary>Field number for the "center" field.</summary>
    public const int CenterFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_center_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> center_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Center {
      get { return center_; }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_normal_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> normal_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Normal {
      get { return normal_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SliceControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SliceControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Visual, other.Visual)) return false;
      if (Intersect != other.Intersect) return false;
      if (Negative != other.Negative) return false;
      if (Positive != other.Positive) return false;
      if(!center_.Equals(other.center_)) return false;
      if(!normal_.Equals(other.normal_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (visual_ != null) hash ^= Visual.GetHashCode();
      if (Intersect != false) hash ^= Intersect.GetHashCode();
      if (Negative != false) hash ^= Negative.GetHashCode();
      if (Positive != false) hash ^= Positive.GetHashCode();
      hash ^= center_.GetHashCode();
      hash ^= normal_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (visual_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Visual);
      }
      if (Intersect != false) {
        output.WriteRawTag(24);
        output.WriteBool(Intersect);
      }
      if (Negative != false) {
        output.WriteRawTag(32);
        output.WriteBool(Negative);
      }
      if (Positive != false) {
        output.WriteRawTag(40);
        output.WriteBool(Positive);
      }
      center_.WriteTo(output, _repeated_center_codec);
      normal_.WriteTo(output, _repeated_normal_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (visual_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visual);
      }
      if (Intersect != false) {
        size += 1 + 1;
      }
      if (Negative != false) {
        size += 1 + 1;
      }
      if (Positive != false) {
        size += 1 + 1;
      }
      size += center_.CalculateSize(_repeated_center_codec);
      size += normal_.CalculateSize(_repeated_normal_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SliceControl other) {
      if (other == null) {
        return;
      }
      if (other.visual_ != null) {
        if (visual_ == null) {
          Visual = new global::Messages.Visual();
        }
        Visual.MergeFrom(other.Visual);
      }
      if (other.Intersect != false) {
        Intersect = other.Intersect;
      }
      if (other.Negative != false) {
        Negative = other.Negative;
      }
      if (other.Positive != false) {
        Positive = other.Positive;
      }
      center_.Add(other.center_);
      normal_.Add(other.normal_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (visual_ == null) {
              Visual = new global::Messages.Visual();
            }
            input.ReadMessage(Visual);
            break;
          }
          case 24: {
            Intersect = input.ReadBool();
            break;
          }
          case 32: {
            Negative = input.ReadBool();
            break;
          }
          case 40: {
            Positive = input.ReadBool();
            break;
          }
          case 66:
          case 65: {
            center_.AddEntriesFrom(input, _repeated_center_codec);
            break;
          }
          case 74:
          case 73: {
            normal_.AddEntriesFrom(input, _repeated_normal_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TracersControl : pb::IMessage<TracersControl> {
    private static readonly pb::MessageParser<TracersControl> _parser = new pb::MessageParser<TracersControl>(() => new TracersControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TracersControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MetaReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracersControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracersControl(TracersControl other) : this() {
      visual_ = other.visual_ != null ? other.visual_.Clone() : null;
      particleCount_ = other.particleCount_;
      seed_ = other.seed_;
      spawnRegion_ = other.spawnRegion_.Clone();
      regenRegion_ = other.regenRegion_.Clone();
      userDefinedPositions_ = other.userDefinedPositions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracersControl Clone() {
      return new TracersControl(this);
    }

    /// <summary>Field number for the "visual" field.</summary>
    public const int VisualFieldNumber = 1;
    private global::Messages.Visual visual_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Visual Visual {
      get { return visual_; }
      set {
        visual_ = value;
      }
    }

    /// <summary>Field number for the "particle_count" field.</summary>
    public const int ParticleCountFieldNumber = 3;
    private long particleCount_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParticleCount {
      get { return particleCount_; }
      set {
        particleCount_ = value;
      }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 4;
    private long seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "spawn_region" field.</summary>
    public const int SpawnRegionFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_spawnRegion_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> spawnRegion_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpawnRegion {
      get { return spawnRegion_; }
    }

    /// <summary>Field number for the "regen_region" field.</summary>
    public const int RegenRegionFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_regenRegion_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> regenRegion_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RegenRegion {
      get { return regenRegion_; }
    }

    /// <summary>Field number for the "user_defined_positions" field.</summary>
    public const int UserDefinedPositionsFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_userDefinedPositions_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> userDefinedPositions_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> UserDefinedPositions {
      get { return userDefinedPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TracersControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TracersControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Visual, other.Visual)) return false;
      if (ParticleCount != other.ParticleCount) return false;
      if (Seed != other.Seed) return false;
      if(!spawnRegion_.Equals(other.spawnRegion_)) return false;
      if(!regenRegion_.Equals(other.regenRegion_)) return false;
      if(!userDefinedPositions_.Equals(other.userDefinedPositions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (visual_ != null) hash ^= Visual.GetHashCode();
      if (ParticleCount != 0L) hash ^= ParticleCount.GetHashCode();
      if (Seed != 0L) hash ^= Seed.GetHashCode();
      hash ^= spawnRegion_.GetHashCode();
      hash ^= regenRegion_.GetHashCode();
      hash ^= userDefinedPositions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (visual_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Visual);
      }
      if (ParticleCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ParticleCount);
      }
      if (Seed != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Seed);
      }
      spawnRegion_.WriteTo(output, _repeated_spawnRegion_codec);
      regenRegion_.WriteTo(output, _repeated_regenRegion_codec);
      userDefinedPositions_.WriteTo(output, _repeated_userDefinedPositions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (visual_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Visual);
      }
      if (ParticleCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParticleCount);
      }
      if (Seed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seed);
      }
      size += spawnRegion_.CalculateSize(_repeated_spawnRegion_codec);
      size += regenRegion_.CalculateSize(_repeated_regenRegion_codec);
      size += userDefinedPositions_.CalculateSize(_repeated_userDefinedPositions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TracersControl other) {
      if (other == null) {
        return;
      }
      if (other.visual_ != null) {
        if (visual_ == null) {
          Visual = new global::Messages.Visual();
        }
        Visual.MergeFrom(other.Visual);
      }
      if (other.ParticleCount != 0L) {
        ParticleCount = other.ParticleCount;
      }
      if (other.Seed != 0L) {
        Seed = other.Seed;
      }
      spawnRegion_.Add(other.spawnRegion_);
      regenRegion_.Add(other.regenRegion_);
      userDefinedPositions_.Add(other.userDefinedPositions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (visual_ == null) {
              Visual = new global::Messages.Visual();
            }
            input.ReadMessage(Visual);
            break;
          }
          case 24: {
            ParticleCount = input.ReadInt64();
            break;
          }
          case 32: {
            Seed = input.ReadInt64();
            break;
          }
          case 42:
          case 40: {
            spawnRegion_.AddEntriesFrom(input, _repeated_spawnRegion_codec);
            break;
          }
          case 50:
          case 48: {
            regenRegion_.AddEntriesFrom(input, _repeated_regenRegion_codec);
            break;
          }
          case 66:
          case 69: {
            userDefinedPositions_.AddEntriesFrom(input, _repeated_userDefinedPositions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///metaobject backbone -- created and staged in server visuals (for transmission) to populate client metaobjects
  /// </summary>
  public sealed partial class Meta : pb::IMessage<Meta> {
    private static readonly pb::MessageParser<Meta> _parser = new pb::MessageParser<Meta>(() => new Meta());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Meta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.MetaReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meta(Meta other) : this() {
      name_ = other.name_;
      icon_ = other.icon_;
      owner_ = other.owner_;
      comments_ = other.comments_;
      series_ = other.series_;
      sysInfo_ = other.sysInfo_;
      geomInfo_ = other.geomInfo_;
      directory_ = other.directory_;
      uid_ = other.uid_;
      parent_ = other.parent_;
      created_ = other.created_;
      saved_ = other.saved_;
      modified_ = other.modified_;
      iteration_ = other.iteration_;
      saveInterval_ = other.saveInterval_;
      enabled_ = other.enabled_;
      locked_ = other.locked_;
      autoSave_ = other.autoSave_;
      revision_ = other.revision_ != null ? other.revision_.Clone() : null;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
      appearance_ = other.appearance_ != null ? other.appearance_.Clone() : null;
      children_ = other.children_.Clone();
      groups_ = other.groups_.Clone();
      loops_ = other.loops_.Clone();
      surfaces_ = other.surfaces_.Clone();
      volumes_ = other.volumes_.Clone();
      modelTransform_ = other.modelTransform_.Clone();
      properties_ = other.properties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Meta Clone() {
      return new Meta(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///unique identifier that persists between sessions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private string owner_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 4;
    private string comments_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "series" field.</summary>
    public const int SeriesFieldNumber = 5;
    private string series_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Series {
      get { return series_; }
      set {
        series_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sys_info" field.</summary>
    public const int SysInfoFieldNumber = 6;
    private string sysInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SysInfo {
      get { return sysInfo_; }
      set {
        sysInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "geom_info" field.</summary>
    public const int GeomInfoFieldNumber = 7;
    private string geomInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GeomInfo {
      get { return geomInfo_; }
      set {
        geomInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "directory" field.</summary>
    public const int DirectoryFieldNumber = 8;
    private string directory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Directory {
      get { return directory_; }
      set {
        directory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 9;
    private long uid_;
    /// <summary>
    ///universal id for each system assigned, valid only within a given session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 10;
    private long parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 11;
    private long created_;
    /// <summary>
    ///unix time 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "saved" field.</summary>
    public const int SavedFieldNumber = 12;
    private long saved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Saved {
      get { return saved_; }
      set {
        saved_ = value;
      }
    }

    /// <summary>Field number for the "modified" field.</summary>
    public const int ModifiedFieldNumber = 13;
    private long modified_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Modified {
      get { return modified_; }
      set {
        modified_ = value;
      }
    }

    /// <summary>Field number for the "iteration" field.</summary>
    public const int IterationFieldNumber = 14;
    private long iteration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Iteration {
      get { return iteration_; }
      set {
        iteration_ = value;
      }
    }

    /// <summary>Field number for the "save_interval" field.</summary>
    public const int SaveIntervalFieldNumber = 15;
    private long saveInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SaveInterval {
      get { return saveInterval_; }
      set {
        saveInterval_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 16;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "locked" field.</summary>
    public const int LockedFieldNumber = 17;
    private bool locked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    /// <summary>Field number for the "auto_save" field.</summary>
    public const int AutoSaveFieldNumber = 18;
    private bool autoSave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoSave {
      get { return autoSave_; }
      set {
        autoSave_ = value;
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 20;
    private global::Messages.Revision revision_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Revision Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 21;
    private global::Messages.Revision version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Revision Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 22;
    private global::Messages.Extrema bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Extrema Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "appearance" field.</summary>
    public const int AppearanceFieldNumber = 24;
    private global::Messages.GraphicsControl appearance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.GraphicsControl Appearance {
      get { return appearance_; }
      set {
        appearance_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 25;
    private static readonly pb::FieldCodec<long> _repeated_children_codec
        = pb::FieldCodec.ForInt64(202);
    private readonly pbc::RepeatedField<long> children_ = new pbc::RepeatedField<long>();
    /// <summary>
    ///uid's (only good within a given session. see system.proto for persistent relationships)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 26;
    private static readonly pb::FieldCodec<int> _repeated_groups_codec
        = pb::FieldCodec.ForInt32(210);
    private readonly pbc::RepeatedField<int> groups_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "loops" field.</summary>
    public const int LoopsFieldNumber = 27;
    private static readonly pb::FieldCodec<int> _repeated_loops_codec
        = pb::FieldCodec.ForInt32(218);
    private readonly pbc::RepeatedField<int> loops_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Loops {
      get { return loops_; }
    }

    /// <summary>Field number for the "surfaces" field.</summary>
    public const int SurfacesFieldNumber = 28;
    private static readonly pb::FieldCodec<int> _repeated_surfaces_codec
        = pb::FieldCodec.ForInt32(226);
    private readonly pbc::RepeatedField<int> surfaces_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Surfaces {
      get { return surfaces_; }
    }

    /// <summary>Field number for the "volumes" field.</summary>
    public const int VolumesFieldNumber = 29;
    private static readonly pb::FieldCodec<int> _repeated_volumes_codec
        = pb::FieldCodec.ForInt32(234);
    private readonly pbc::RepeatedField<int> volumes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Volumes {
      get { return volumes_; }
    }

    /// <summary>Field number for the "model_transform" field.</summary>
    public const int ModelTransformFieldNumber = 30;
    private static readonly pb::FieldCodec<double> _repeated_modelTransform_codec
        = pb::FieldCodec.ForDouble(242);
    private readonly pbc::RepeatedField<double> modelTransform_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///dmat4 (aka MAT4 transformation matrix)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> ModelTransform {
      get { return modelTransform_; }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 31;
    private static readonly pb::FieldCodec<string> _repeated_properties_codec
        = pb::FieldCodec.ForString(250);
    private readonly pbc::RepeatedField<string> properties_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///serialized property-keys, used to request Vector32 or Vector64 data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Meta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Meta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      if (Owner != other.Owner) return false;
      if (Comments != other.Comments) return false;
      if (Series != other.Series) return false;
      if (SysInfo != other.SysInfo) return false;
      if (GeomInfo != other.GeomInfo) return false;
      if (Directory != other.Directory) return false;
      if (Uid != other.Uid) return false;
      if (Parent != other.Parent) return false;
      if (Created != other.Created) return false;
      if (Saved != other.Saved) return false;
      if (Modified != other.Modified) return false;
      if (Iteration != other.Iteration) return false;
      if (SaveInterval != other.SaveInterval) return false;
      if (Enabled != other.Enabled) return false;
      if (Locked != other.Locked) return false;
      if (AutoSave != other.AutoSave) return false;
      if (!object.Equals(Revision, other.Revision)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if (!object.Equals(Appearance, other.Appearance)) return false;
      if(!children_.Equals(other.children_)) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if(!loops_.Equals(other.loops_)) return false;
      if(!surfaces_.Equals(other.surfaces_)) return false;
      if(!volumes_.Equals(other.volumes_)) return false;
      if(!modelTransform_.Equals(other.modelTransform_)) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (Series.Length != 0) hash ^= Series.GetHashCode();
      if (SysInfo.Length != 0) hash ^= SysInfo.GetHashCode();
      if (GeomInfo.Length != 0) hash ^= GeomInfo.GetHashCode();
      if (Directory.Length != 0) hash ^= Directory.GetHashCode();
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Parent != 0L) hash ^= Parent.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (Saved != 0L) hash ^= Saved.GetHashCode();
      if (Modified != 0L) hash ^= Modified.GetHashCode();
      if (Iteration != 0L) hash ^= Iteration.GetHashCode();
      if (SaveInterval != 0L) hash ^= SaveInterval.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Locked != false) hash ^= Locked.GetHashCode();
      if (AutoSave != false) hash ^= AutoSave.GetHashCode();
      if (revision_ != null) hash ^= Revision.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (appearance_ != null) hash ^= Appearance.GetHashCode();
      hash ^= children_.GetHashCode();
      hash ^= groups_.GetHashCode();
      hash ^= loops_.GetHashCode();
      hash ^= surfaces_.GetHashCode();
      hash ^= volumes_.GetHashCode();
      hash ^= modelTransform_.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Owner);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Comments);
      }
      if (Series.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Series);
      }
      if (SysInfo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SysInfo);
      }
      if (GeomInfo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GeomInfo);
      }
      if (Directory.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Directory);
      }
      if (Uid != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Uid);
      }
      if (Parent != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Parent);
      }
      if (Created != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Created);
      }
      if (Saved != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(Saved);
      }
      if (Modified != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(Modified);
      }
      if (Iteration != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Iteration);
      }
      if (SaveInterval != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(SaveInterval);
      }
      if (Enabled != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Enabled);
      }
      if (Locked != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Locked);
      }
      if (AutoSave != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(AutoSave);
      }
      if (revision_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Revision);
      }
      if (version_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Version);
      }
      if (bounds_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Bounds);
      }
      if (appearance_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Appearance);
      }
      children_.WriteTo(output, _repeated_children_codec);
      groups_.WriteTo(output, _repeated_groups_codec);
      loops_.WriteTo(output, _repeated_loops_codec);
      surfaces_.WriteTo(output, _repeated_surfaces_codec);
      volumes_.WriteTo(output, _repeated_volumes_codec);
      modelTransform_.WriteTo(output, _repeated_modelTransform_codec);
      properties_.WriteTo(output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (Series.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Series);
      }
      if (SysInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SysInfo);
      }
      if (GeomInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GeomInfo);
      }
      if (Directory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Directory);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Parent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Parent);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (Saved != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Saved);
      }
      if (Modified != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Modified);
      }
      if (Iteration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Iteration);
      }
      if (SaveInterval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SaveInterval);
      }
      if (Enabled != false) {
        size += 2 + 1;
      }
      if (Locked != false) {
        size += 2 + 1;
      }
      if (AutoSave != false) {
        size += 2 + 1;
      }
      if (revision_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Revision);
      }
      if (version_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (bounds_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (appearance_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Appearance);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      size += groups_.CalculateSize(_repeated_groups_codec);
      size += loops_.CalculateSize(_repeated_loops_codec);
      size += surfaces_.CalculateSize(_repeated_surfaces_codec);
      size += volumes_.CalculateSize(_repeated_volumes_codec);
      size += modelTransform_.CalculateSize(_repeated_modelTransform_codec);
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Meta other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.Series.Length != 0) {
        Series = other.Series;
      }
      if (other.SysInfo.Length != 0) {
        SysInfo = other.SysInfo;
      }
      if (other.GeomInfo.Length != 0) {
        GeomInfo = other.GeomInfo;
      }
      if (other.Directory.Length != 0) {
        Directory = other.Directory;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Parent != 0L) {
        Parent = other.Parent;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.Saved != 0L) {
        Saved = other.Saved;
      }
      if (other.Modified != 0L) {
        Modified = other.Modified;
      }
      if (other.Iteration != 0L) {
        Iteration = other.Iteration;
      }
      if (other.SaveInterval != 0L) {
        SaveInterval = other.SaveInterval;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Locked != false) {
        Locked = other.Locked;
      }
      if (other.AutoSave != false) {
        AutoSave = other.AutoSave;
      }
      if (other.revision_ != null) {
        if (revision_ == null) {
          Revision = new global::Messages.Revision();
        }
        Revision.MergeFrom(other.Revision);
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Messages.Revision();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          Bounds = new global::Messages.Extrema();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      if (other.appearance_ != null) {
        if (appearance_ == null) {
          Appearance = new global::Messages.GraphicsControl();
        }
        Appearance.MergeFrom(other.Appearance);
      }
      children_.Add(other.children_);
      groups_.Add(other.groups_);
      loops_.Add(other.loops_);
      surfaces_.Add(other.surfaces_);
      volumes_.Add(other.volumes_);
      modelTransform_.Add(other.modelTransform_);
      properties_.Add(other.properties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
          case 26: {
            Owner = input.ReadString();
            break;
          }
          case 34: {
            Comments = input.ReadString();
            break;
          }
          case 42: {
            Series = input.ReadString();
            break;
          }
          case 50: {
            SysInfo = input.ReadString();
            break;
          }
          case 58: {
            GeomInfo = input.ReadString();
            break;
          }
          case 66: {
            Directory = input.ReadString();
            break;
          }
          case 72: {
            Uid = input.ReadInt64();
            break;
          }
          case 80: {
            Parent = input.ReadInt64();
            break;
          }
          case 88: {
            Created = input.ReadInt64();
            break;
          }
          case 96: {
            Saved = input.ReadInt64();
            break;
          }
          case 104: {
            Modified = input.ReadInt64();
            break;
          }
          case 112: {
            Iteration = input.ReadInt64();
            break;
          }
          case 120: {
            SaveInterval = input.ReadInt64();
            break;
          }
          case 128: {
            Enabled = input.ReadBool();
            break;
          }
          case 136: {
            Locked = input.ReadBool();
            break;
          }
          case 144: {
            AutoSave = input.ReadBool();
            break;
          }
          case 162: {
            if (revision_ == null) {
              Revision = new global::Messages.Revision();
            }
            input.ReadMessage(Revision);
            break;
          }
          case 170: {
            if (version_ == null) {
              Version = new global::Messages.Revision();
            }
            input.ReadMessage(Version);
            break;
          }
          case 178: {
            if (bounds_ == null) {
              Bounds = new global::Messages.Extrema();
            }
            input.ReadMessage(Bounds);
            break;
          }
          case 194: {
            if (appearance_ == null) {
              Appearance = new global::Messages.GraphicsControl();
            }
            input.ReadMessage(Appearance);
            break;
          }
          case 202:
          case 200: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 210:
          case 208: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 218:
          case 216: {
            loops_.AddEntriesFrom(input, _repeated_loops_codec);
            break;
          }
          case 226:
          case 224: {
            surfaces_.AddEntriesFrom(input, _repeated_surfaces_codec);
            break;
          }
          case 234:
          case 232: {
            volumes_.AddEntriesFrom(input, _repeated_volumes_codec);
            break;
          }
          case 242:
          case 241: {
            modelTransform_.AddEntriesFrom(input, _repeated_modelTransform_codec);
            break;
          }
          case 250: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
