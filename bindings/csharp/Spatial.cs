// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spatial.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Messages {

  /// <summary>Holder for reflection information generated from spatial.proto</summary>
  public static partial class SpatialReflection {

    #region Descriptor
    /// <summary>File descriptor for spatial.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpatialReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1zcGF0aWFsLnByb3RvEghNZXNzYWdlcxoMdmVjdG9yLnByb3RvItcBCgRa",
            "b25lEgwKBG5hbWUYASABKAkSCgoCaWQYAiABKAUSFgoOZGltZW5zaW9uYWxp",
            "dHkYAyABKAUSFAoMbnVtX2VsZW1lbnRzGAUgASgDEg4KBm9mZnNldBgGIAEo",
            "AxIQCghjb21tZW50cxgHIAEoCRIMCgRpbmZvGAggASgJEiEKBmJvdW5kcxgK",
            "IAEoCzIRLk1lc3NhZ2VzLkV4dHJlbWESGQoRdGVybWluYWxfcG9zaXRpb24Y",
            "CyADKAISGQoRc3BlY2lmaWNfZWxlbWVudHMYDCADKAUiqgQKCFRvcG9sb2d5",
            "EgwKBG5hbWUYASABKAkSDAoEdHlwZRgCIAEoBRIMCgRuZGltGAMgASgFEg0K",
            "BWJhc2lzGAQgASgFEhIKCnJlc29sdXRpb24YCCADKAESIAoEZGF0YRgJIAMo",
            "CzISLk1lc3NhZ2VzLlZlY3RvcjY0EiEKBW5vZGVzGAogASgLMhIuTWVzc2Fn",
            "ZXMuRWxlbWVudHMSIQoFZWRnZXMYCyABKAsyEi5NZXNzYWdlcy5FbGVtZW50",
            "cxIqCg5pbnRlcmlvcl9lZGdlcxgMIAEoCzISLk1lc3NhZ2VzLkVsZW1lbnRz",
            "EiEKBWZhY2VzGA0gASgLMhIuTWVzc2FnZXMuRWxlbWVudHMSKgoOaW50ZXJp",
            "b3JfZmFjZXMYDiABKAsyEi5NZXNzYWdlcy5FbGVtZW50cxIhCgVjZWxscxgP",
            "IAEoCzISLk1lc3NhZ2VzLkVsZW1lbnRzEh4KBmdyb3VwcxgUIAMoCzIOLk1l",
            "c3NhZ2VzLlpvbmUSHQoFbG9vcHMYFSADKAsyDi5NZXNzYWdlcy5ab25lEiAK",
            "CHN1cmZhY2VzGBYgAygLMg4uTWVzc2FnZXMuWm9uZRIfCgd2b2x1bWVzGBcg",
            "AygLMg4uTWVzc2FnZXMuWm9uZRIRCglsb2NhdGlvbnMYGiADKAUSEAoIZmls",
            "ZW5hbWUYHiABKAkSJAoIcmV2aXNpb24YHyABKAsyEi5NZXNzYWdlcy5SZXZp",
            "c2lvbiJvCgtHcmlkQ29udHJvbBINCgViYXNpcxgBIAEoBRIMCgRzaXplGAIg",
            "AygFEg8KB3NwYWNpbmcYAyADKAESDwoHZ3JhZGluZxgEIAMoARIhCgZib3Vu",
            "ZHMYCiABKAsyES5NZXNzYWdlcy5FeHRyZW1hIs4DCgtNZXNoQ29udHJvbBIQ",
            "Cgh0YXJnZXRfbhgBIAEoAxIWCg5tYXhfaXRlcmF0aW9ucxgCIAEoBRISCgpz",
            "aXplX3JhdGlvGAMgASgBEhIKCnNpemVfZGVjYXkYBCABKAESFQoNc2l6ZV9l",
            "eHBvbmVudBgFIAEoARISCgpjdXJ2X3JhdGlvGAYgASgBEhIKCmN1cnZfZGVj",
            "YXkYByABKAESFQoNY3Vydl9leHBvbmVudBgIIAEoARITCgtub2RlX3JhZGl1",
            "cxgJIAEoARIhCgZib3VuZHMYCiABKAsyES5NZXNzYWdlcy5FeHRyZW1hEhAK",
            "CGludGVyaW9yGAwgASgIEhAKCGV4dGVyaW9yGA0gASgIEg0KBXNoZWxsGA4g",
            "ASgIEhAKCGVxdWFsaXplGA8gASgIEg4KBnNtb290aBgQIAEoCBIaChJpbmNs",
            "dWRlX2JhY2tncm91bmQYEiABKAgSHAoUa2VlcF9leGlzdGluZ19wb2ludHMY",
            "EyABKAgSEgoKeF9zeW1tZXRyeRgYIAEoCBISCgp5X3N5bW1ldHJ5GBkgASgI",
            "EhIKCnpfc3ltbWV0cnkYGiABKAgSFAoMYmFja2dyb3VuZF9uGB4gASgDImgK",
            "C1RyZWVDb250cm9sEhEKCW1pbl9kZXB0aBgBIAEoBRIRCgltYXhfZGVwdGgY",
            "AiABKAUSEAoIbWF4X3NpemUYAyABKAMSIQoGYm91bmRzGAogASgLMhEuTWVz",
            "c2FnZXMuRXh0cmVtYSIQCg5OZXR3b3JrQ29udHJvbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Messages.VectorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Zone), global::Messages.Zone.Parser, new[]{ "Name", "Id", "Dimensionality", "NumElements", "Offset", "Comments", "Info", "Bounds", "TerminalPosition", "SpecificElements" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Topology), global::Messages.Topology.Parser, new[]{ "Name", "Type", "Ndim", "Basis", "Resolution", "Data", "Nodes", "Edges", "InteriorEdges", "Faces", "InteriorFaces", "Cells", "Groups", "Loops", "Surfaces", "Volumes", "Locations", "Filename", "Revision" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.GridControl), global::Messages.GridControl.Parser, new[]{ "Basis", "Size", "Spacing", "Grading", "Bounds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.MeshControl), global::Messages.MeshControl.Parser, new[]{ "TargetN", "MaxIterations", "SizeRatio", "SizeDecay", "SizeExponent", "CurvRatio", "CurvDecay", "CurvExponent", "NodeRadius", "Bounds", "Interior", "Exterior", "Shell", "Equalize", "Smooth", "IncludeBackground", "KeepExistingPoints", "XSymmetry", "YSymmetry", "ZSymmetry", "BackgroundN" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.TreeControl), global::Messages.TreeControl.Parser, new[]{ "MinDepth", "MaxDepth", "MaxSize", "Bounds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.NetworkControl), global::Messages.NetworkControl.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///compatible with xcompute Region
  /// </summary>
  public sealed partial class Zone : pb::IMessage<Zone> {
    private static readonly pb::MessageParser<Zone> _parser = new pb::MessageParser<Zone>(() => new Zone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Zone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SpatialReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Zone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Zone(Zone other) : this() {
      name_ = other.name_;
      id_ = other.id_;
      dimensionality_ = other.dimensionality_;
      numElements_ = other.numElements_;
      offset_ = other.offset_;
      comments_ = other.comments_;
      info_ = other.info_;
      bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
      terminalPosition_ = other.terminalPosition_.Clone();
      specificElements_ = other.specificElements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Zone Clone() {
      return new Zone(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "dimensionality" field.</summary>
    public const int DimensionalityFieldNumber = 3;
    private int dimensionality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dimensionality {
      get { return dimensionality_; }
      set {
        dimensionality_ = value;
      }
    }

    /// <summary>Field number for the "num_elements" field.</summary>
    public const int NumElementsFieldNumber = 5;
    private long numElements_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumElements {
      get { return numElements_; }
      set {
        numElements_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 6;
    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "comments" field.</summary>
    public const int CommentsFieldNumber = 7;
    private string comments_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comments {
      get { return comments_; }
      set {
        comments_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 8;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 10;
    private global::Messages.Extrema bounds_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Extrema Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "terminal_position" field.</summary>
    public const int TerminalPositionFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_terminalPosition_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> terminalPosition_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> TerminalPosition {
      get { return terminalPosition_; }
    }

    /// <summary>Field number for the "specific_elements" field.</summary>
    public const int SpecificElementsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_specificElements_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> specificElements_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///optional (if used, ignore offset)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SpecificElements {
      get { return specificElements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Zone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Zone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Id != other.Id) return false;
      if (Dimensionality != other.Dimensionality) return false;
      if (NumElements != other.NumElements) return false;
      if (Offset != other.Offset) return false;
      if (Comments != other.Comments) return false;
      if (Info != other.Info) return false;
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if(!terminalPosition_.Equals(other.terminalPosition_)) return false;
      if(!specificElements_.Equals(other.specificElements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Dimensionality != 0) hash ^= Dimensionality.GetHashCode();
      if (NumElements != 0L) hash ^= NumElements.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (Comments.Length != 0) hash ^= Comments.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      hash ^= terminalPosition_.GetHashCode();
      hash ^= specificElements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Dimensionality != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Dimensionality);
      }
      if (NumElements != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NumElements);
      }
      if (Offset != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Offset);
      }
      if (Comments.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Comments);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Info);
      }
      if (bounds_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Bounds);
      }
      terminalPosition_.WriteTo(output, _repeated_terminalPosition_codec);
      specificElements_.WriteTo(output, _repeated_specificElements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Dimensionality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dimensionality);
      }
      if (NumElements != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumElements);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (Comments.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comments);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      size += terminalPosition_.CalculateSize(_repeated_terminalPosition_codec);
      size += specificElements_.CalculateSize(_repeated_specificElements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Zone other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Dimensionality != 0) {
        Dimensionality = other.Dimensionality;
      }
      if (other.NumElements != 0L) {
        NumElements = other.NumElements;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      if (other.Comments.Length != 0) {
        Comments = other.Comments;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          Bounds = new global::Messages.Extrema();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      terminalPosition_.Add(other.terminalPosition_);
      specificElements_.Add(other.specificElements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Dimensionality = input.ReadInt32();
            break;
          }
          case 40: {
            NumElements = input.ReadInt64();
            break;
          }
          case 48: {
            Offset = input.ReadInt64();
            break;
          }
          case 58: {
            Comments = input.ReadString();
            break;
          }
          case 66: {
            Info = input.ReadString();
            break;
          }
          case 82: {
            if (bounds_ == null) {
              Bounds = new global::Messages.Extrema();
            }
            input.ReadMessage(Bounds);
            break;
          }
          case 90:
          case 93: {
            terminalPosition_.AddEntriesFrom(input, _repeated_terminalPosition_codec);
            break;
          }
          case 98:
          case 96: {
            specificElements_.AddEntriesFrom(input, _repeated_specificElements_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///compatible with xcompute Geometry
  /// </summary>
  public sealed partial class Topology : pb::IMessage<Topology> {
    private static readonly pb::MessageParser<Topology> _parser = new pb::MessageParser<Topology>(() => new Topology());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Topology> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SpatialReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Topology() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Topology(Topology other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      ndim_ = other.ndim_;
      basis_ = other.basis_;
      resolution_ = other.resolution_.Clone();
      data_ = other.data_.Clone();
      nodes_ = other.nodes_ != null ? other.nodes_.Clone() : null;
      edges_ = other.edges_ != null ? other.edges_.Clone() : null;
      interiorEdges_ = other.interiorEdges_ != null ? other.interiorEdges_.Clone() : null;
      faces_ = other.faces_ != null ? other.faces_.Clone() : null;
      interiorFaces_ = other.interiorFaces_ != null ? other.interiorFaces_.Clone() : null;
      cells_ = other.cells_ != null ? other.cells_.Clone() : null;
      groups_ = other.groups_.Clone();
      loops_ = other.loops_.Clone();
      surfaces_ = other.surfaces_.Clone();
      volumes_ = other.volumes_.Clone();
      locations_ = other.locations_.Clone();
      filename_ = other.filename_;
      revision_ = other.revision_ != null ? other.revision_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Topology Clone() {
      return new Topology(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "ndim" field.</summary>
    public const int NdimFieldNumber = 3;
    private int ndim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ndim {
      get { return ndim_; }
      set {
        ndim_ = value;
      }
    }

    /// <summary>Field number for the "basis" field.</summary>
    public const int BasisFieldNumber = 4;
    private int basis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Basis {
      get { return basis_; }
      set {
        basis_ = value;
      }
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_resolution_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> resolution_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Resolution {
      get { return resolution_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Messages.Vector64> _repeated_data_codec
        = pb::FieldCodec.ForMessage(74, global::Messages.Vector64.Parser);
    private readonly pbc::RepeatedField<global::Messages.Vector64> data_ = new pbc::RepeatedField<global::Messages.Vector64>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Vector64> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 10;
    private global::Messages.Elements nodes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Elements Nodes {
      get { return nodes_; }
      set {
        nodes_ = value;
      }
    }

    /// <summary>Field number for the "edges" field.</summary>
    public const int EdgesFieldNumber = 11;
    private global::Messages.Elements edges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Elements Edges {
      get { return edges_; }
      set {
        edges_ = value;
      }
    }

    /// <summary>Field number for the "interior_edges" field.</summary>
    public const int InteriorEdgesFieldNumber = 12;
    private global::Messages.Elements interiorEdges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Elements InteriorEdges {
      get { return interiorEdges_; }
      set {
        interiorEdges_ = value;
      }
    }

    /// <summary>Field number for the "faces" field.</summary>
    public const int FacesFieldNumber = 13;
    private global::Messages.Elements faces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Elements Faces {
      get { return faces_; }
      set {
        faces_ = value;
      }
    }

    /// <summary>Field number for the "interior_faces" field.</summary>
    public const int InteriorFacesFieldNumber = 14;
    private global::Messages.Elements interiorFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Elements InteriorFaces {
      get { return interiorFaces_; }
      set {
        interiorFaces_ = value;
      }
    }

    /// <summary>Field number for the "cells" field.</summary>
    public const int CellsFieldNumber = 15;
    private global::Messages.Elements cells_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Elements Cells {
      get { return cells_; }
      set {
        cells_ = value;
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Messages.Zone> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(162, global::Messages.Zone.Parser);
    private readonly pbc::RepeatedField<global::Messages.Zone> groups_ = new pbc::RepeatedField<global::Messages.Zone>();
    /// <summary>
    ///reserveed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Zone> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "loops" field.</summary>
    public const int LoopsFieldNumber = 21;
    private static readonly pb::FieldCodec<global::Messages.Zone> _repeated_loops_codec
        = pb::FieldCodec.ForMessage(170, global::Messages.Zone.Parser);
    private readonly pbc::RepeatedField<global::Messages.Zone> loops_ = new pbc::RepeatedField<global::Messages.Zone>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Zone> Loops {
      get { return loops_; }
    }

    /// <summary>Field number for the "surfaces" field.</summary>
    public const int SurfacesFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Messages.Zone> _repeated_surfaces_codec
        = pb::FieldCodec.ForMessage(178, global::Messages.Zone.Parser);
    private readonly pbc::RepeatedField<global::Messages.Zone> surfaces_ = new pbc::RepeatedField<global::Messages.Zone>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Zone> Surfaces {
      get { return surfaces_; }
    }

    /// <summary>Field number for the "volumes" field.</summary>
    public const int VolumesFieldNumber = 23;
    private static readonly pb::FieldCodec<global::Messages.Zone> _repeated_volumes_codec
        = pb::FieldCodec.ForMessage(186, global::Messages.Zone.Parser);
    private readonly pbc::RepeatedField<global::Messages.Zone> volumes_ = new pbc::RepeatedField<global::Messages.Zone>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Messages.Zone> Volumes {
      get { return volumes_; }
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 26;
    private static readonly pb::FieldCodec<int> _repeated_locations_codec
        = pb::FieldCodec.ForInt32(210);
    private readonly pbc::RepeatedField<int> locations_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Locations {
      get { return locations_; }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 30;
    private string filename_ = "";
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 31;
    private global::Messages.Revision revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Revision Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Topology);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Topology other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Ndim != other.Ndim) return false;
      if (Basis != other.Basis) return false;
      if(!resolution_.Equals(other.resolution_)) return false;
      if(!data_.Equals(other.data_)) return false;
      if (!object.Equals(Nodes, other.Nodes)) return false;
      if (!object.Equals(Edges, other.Edges)) return false;
      if (!object.Equals(InteriorEdges, other.InteriorEdges)) return false;
      if (!object.Equals(Faces, other.Faces)) return false;
      if (!object.Equals(InteriorFaces, other.InteriorFaces)) return false;
      if (!object.Equals(Cells, other.Cells)) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if(!loops_.Equals(other.loops_)) return false;
      if(!surfaces_.Equals(other.surfaces_)) return false;
      if(!volumes_.Equals(other.volumes_)) return false;
      if(!locations_.Equals(other.locations_)) return false;
      if (Filename != other.Filename) return false;
      if (!object.Equals(Revision, other.Revision)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Ndim != 0) hash ^= Ndim.GetHashCode();
      if (Basis != 0) hash ^= Basis.GetHashCode();
      hash ^= resolution_.GetHashCode();
      hash ^= data_.GetHashCode();
      if (nodes_ != null) hash ^= Nodes.GetHashCode();
      if (edges_ != null) hash ^= Edges.GetHashCode();
      if (interiorEdges_ != null) hash ^= InteriorEdges.GetHashCode();
      if (faces_ != null) hash ^= Faces.GetHashCode();
      if (interiorFaces_ != null) hash ^= InteriorFaces.GetHashCode();
      if (cells_ != null) hash ^= Cells.GetHashCode();
      hash ^= groups_.GetHashCode();
      hash ^= loops_.GetHashCode();
      hash ^= surfaces_.GetHashCode();
      hash ^= volumes_.GetHashCode();
      hash ^= locations_.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (revision_ != null) hash ^= Revision.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Ndim != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ndim);
      }
      if (Basis != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Basis);
      }
      resolution_.WriteTo(output, _repeated_resolution_codec);
      data_.WriteTo(output, _repeated_data_codec);
      if (nodes_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Nodes);
      }
      if (edges_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Edges);
      }
      if (interiorEdges_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(InteriorEdges);
      }
      if (faces_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Faces);
      }
      if (interiorFaces_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(InteriorFaces);
      }
      if (cells_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Cells);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
      loops_.WriteTo(output, _repeated_loops_codec);
      surfaces_.WriteTo(output, _repeated_surfaces_codec);
      volumes_.WriteTo(output, _repeated_volumes_codec);
      locations_.WriteTo(output, _repeated_locations_codec);
      if (Filename.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Filename);
      }
      if (revision_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(Revision);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Ndim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ndim);
      }
      if (Basis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Basis);
      }
      size += resolution_.CalculateSize(_repeated_resolution_codec);
      size += data_.CalculateSize(_repeated_data_codec);
      if (nodes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nodes);
      }
      if (edges_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Edges);
      }
      if (interiorEdges_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteriorEdges);
      }
      if (faces_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Faces);
      }
      if (interiorFaces_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InteriorFaces);
      }
      if (cells_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cells);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      size += loops_.CalculateSize(_repeated_loops_codec);
      size += surfaces_.CalculateSize(_repeated_surfaces_codec);
      size += volumes_.CalculateSize(_repeated_volumes_codec);
      size += locations_.CalculateSize(_repeated_locations_codec);
      if (Filename.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (revision_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Revision);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Topology other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Ndim != 0) {
        Ndim = other.Ndim;
      }
      if (other.Basis != 0) {
        Basis = other.Basis;
      }
      resolution_.Add(other.resolution_);
      data_.Add(other.data_);
      if (other.nodes_ != null) {
        if (nodes_ == null) {
          Nodes = new global::Messages.Elements();
        }
        Nodes.MergeFrom(other.Nodes);
      }
      if (other.edges_ != null) {
        if (edges_ == null) {
          Edges = new global::Messages.Elements();
        }
        Edges.MergeFrom(other.Edges);
      }
      if (other.interiorEdges_ != null) {
        if (interiorEdges_ == null) {
          InteriorEdges = new global::Messages.Elements();
        }
        InteriorEdges.MergeFrom(other.InteriorEdges);
      }
      if (other.faces_ != null) {
        if (faces_ == null) {
          Faces = new global::Messages.Elements();
        }
        Faces.MergeFrom(other.Faces);
      }
      if (other.interiorFaces_ != null) {
        if (interiorFaces_ == null) {
          InteriorFaces = new global::Messages.Elements();
        }
        InteriorFaces.MergeFrom(other.InteriorFaces);
      }
      if (other.cells_ != null) {
        if (cells_ == null) {
          Cells = new global::Messages.Elements();
        }
        Cells.MergeFrom(other.Cells);
      }
      groups_.Add(other.groups_);
      loops_.Add(other.loops_);
      surfaces_.Add(other.surfaces_);
      volumes_.Add(other.volumes_);
      locations_.Add(other.locations_);
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.revision_ != null) {
        if (revision_ == null) {
          Revision = new global::Messages.Revision();
        }
        Revision.MergeFrom(other.Revision);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Ndim = input.ReadInt32();
            break;
          }
          case 32: {
            Basis = input.ReadInt32();
            break;
          }
          case 66:
          case 65: {
            resolution_.AddEntriesFrom(input, _repeated_resolution_codec);
            break;
          }
          case 74: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 82: {
            if (nodes_ == null) {
              Nodes = new global::Messages.Elements();
            }
            input.ReadMessage(Nodes);
            break;
          }
          case 90: {
            if (edges_ == null) {
              Edges = new global::Messages.Elements();
            }
            input.ReadMessage(Edges);
            break;
          }
          case 98: {
            if (interiorEdges_ == null) {
              InteriorEdges = new global::Messages.Elements();
            }
            input.ReadMessage(InteriorEdges);
            break;
          }
          case 106: {
            if (faces_ == null) {
              Faces = new global::Messages.Elements();
            }
            input.ReadMessage(Faces);
            break;
          }
          case 114: {
            if (interiorFaces_ == null) {
              InteriorFaces = new global::Messages.Elements();
            }
            input.ReadMessage(InteriorFaces);
            break;
          }
          case 122: {
            if (cells_ == null) {
              Cells = new global::Messages.Elements();
            }
            input.ReadMessage(Cells);
            break;
          }
          case 162: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 170: {
            loops_.AddEntriesFrom(input, _repeated_loops_codec);
            break;
          }
          case 178: {
            surfaces_.AddEntriesFrom(input, _repeated_surfaces_codec);
            break;
          }
          case 186: {
            volumes_.AddEntriesFrom(input, _repeated_volumes_codec);
            break;
          }
          case 210:
          case 208: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
          case 242: {
            Filename = input.ReadString();
            break;
          }
          case 250: {
            if (revision_ == null) {
              Revision = new global::Messages.Revision();
            }
            input.ReadMessage(Revision);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GridControl : pb::IMessage<GridControl> {
    private static readonly pb::MessageParser<GridControl> _parser = new pb::MessageParser<GridControl>(() => new GridControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GridControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SpatialReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridControl(GridControl other) : this() {
      basis_ = other.basis_;
      size_ = other.size_.Clone();
      spacing_ = other.spacing_.Clone();
      grading_ = other.grading_.Clone();
      bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GridControl Clone() {
      return new GridControl(this);
    }

    /// <summary>Field number for the "basis" field.</summary>
    public const int BasisFieldNumber = 1;
    private int basis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Basis {
      get { return basis_; }
      set {
        basis_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_size_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> size_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Size {
      get { return size_; }
    }

    /// <summary>Field number for the "spacing" field.</summary>
    public const int SpacingFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_spacing_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> spacing_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Spacing {
      get { return spacing_; }
    }

    /// <summary>Field number for the "grading" field.</summary>
    public const int GradingFieldNumber = 4;
    private static readonly pb::FieldCodec<double> _repeated_grading_codec
        = pb::FieldCodec.ForDouble(34);
    private readonly pbc::RepeatedField<double> grading_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Grading {
      get { return grading_; }
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 10;
    private global::Messages.Extrema bounds_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Extrema Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GridControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GridControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Basis != other.Basis) return false;
      if(!size_.Equals(other.size_)) return false;
      if(!spacing_.Equals(other.spacing_)) return false;
      if(!grading_.Equals(other.grading_)) return false;
      if (!object.Equals(Bounds, other.Bounds)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Basis != 0) hash ^= Basis.GetHashCode();
      hash ^= size_.GetHashCode();
      hash ^= spacing_.GetHashCode();
      hash ^= grading_.GetHashCode();
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Basis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Basis);
      }
      size_.WriteTo(output, _repeated_size_codec);
      spacing_.WriteTo(output, _repeated_spacing_codec);
      grading_.WriteTo(output, _repeated_grading_codec);
      if (bounds_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Bounds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Basis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Basis);
      }
      size += size_.CalculateSize(_repeated_size_codec);
      size += spacing_.CalculateSize(_repeated_spacing_codec);
      size += grading_.CalculateSize(_repeated_grading_codec);
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GridControl other) {
      if (other == null) {
        return;
      }
      if (other.Basis != 0) {
        Basis = other.Basis;
      }
      size_.Add(other.size_);
      spacing_.Add(other.spacing_);
      grading_.Add(other.grading_);
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          Bounds = new global::Messages.Extrema();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Basis = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            size_.AddEntriesFrom(input, _repeated_size_codec);
            break;
          }
          case 26:
          case 25: {
            spacing_.AddEntriesFrom(input, _repeated_spacing_codec);
            break;
          }
          case 34:
          case 33: {
            grading_.AddEntriesFrom(input, _repeated_grading_codec);
            break;
          }
          case 82: {
            if (bounds_ == null) {
              Bounds = new global::Messages.Extrema();
            }
            input.ReadMessage(Bounds);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MeshControl : pb::IMessage<MeshControl> {
    private static readonly pb::MessageParser<MeshControl> _parser = new pb::MessageParser<MeshControl>(() => new MeshControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeshControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SpatialReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshControl(MeshControl other) : this() {
      targetN_ = other.targetN_;
      maxIterations_ = other.maxIterations_;
      sizeRatio_ = other.sizeRatio_;
      sizeDecay_ = other.sizeDecay_;
      sizeExponent_ = other.sizeExponent_;
      curvRatio_ = other.curvRatio_;
      curvDecay_ = other.curvDecay_;
      curvExponent_ = other.curvExponent_;
      nodeRadius_ = other.nodeRadius_;
      bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
      interior_ = other.interior_;
      exterior_ = other.exterior_;
      shell_ = other.shell_;
      equalize_ = other.equalize_;
      smooth_ = other.smooth_;
      includeBackground_ = other.includeBackground_;
      keepExistingPoints_ = other.keepExistingPoints_;
      xSymmetry_ = other.xSymmetry_;
      ySymmetry_ = other.ySymmetry_;
      zSymmetry_ = other.zSymmetry_;
      backgroundN_ = other.backgroundN_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeshControl Clone() {
      return new MeshControl(this);
    }

    /// <summary>Field number for the "target_n" field.</summary>
    public const int TargetNFieldNumber = 1;
    private long targetN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetN {
      get { return targetN_; }
      set {
        targetN_ = value;
      }
    }

    /// <summary>Field number for the "max_iterations" field.</summary>
    public const int MaxIterationsFieldNumber = 2;
    private int maxIterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxIterations {
      get { return maxIterations_; }
      set {
        maxIterations_ = value;
      }
    }

    /// <summary>Field number for the "size_ratio" field.</summary>
    public const int SizeRatioFieldNumber = 3;
    private double sizeRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SizeRatio {
      get { return sizeRatio_; }
      set {
        sizeRatio_ = value;
      }
    }

    /// <summary>Field number for the "size_decay" field.</summary>
    public const int SizeDecayFieldNumber = 4;
    private double sizeDecay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SizeDecay {
      get { return sizeDecay_; }
      set {
        sizeDecay_ = value;
      }
    }

    /// <summary>Field number for the "size_exponent" field.</summary>
    public const int SizeExponentFieldNumber = 5;
    private double sizeExponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SizeExponent {
      get { return sizeExponent_; }
      set {
        sizeExponent_ = value;
      }
    }

    /// <summary>Field number for the "curv_ratio" field.</summary>
    public const int CurvRatioFieldNumber = 6;
    private double curvRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurvRatio {
      get { return curvRatio_; }
      set {
        curvRatio_ = value;
      }
    }

    /// <summary>Field number for the "curv_decay" field.</summary>
    public const int CurvDecayFieldNumber = 7;
    private double curvDecay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurvDecay {
      get { return curvDecay_; }
      set {
        curvDecay_ = value;
      }
    }

    /// <summary>Field number for the "curv_exponent" field.</summary>
    public const int CurvExponentFieldNumber = 8;
    private double curvExponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurvExponent {
      get { return curvExponent_; }
      set {
        curvExponent_ = value;
      }
    }

    /// <summary>Field number for the "node_radius" field.</summary>
    public const int NodeRadiusFieldNumber = 9;
    private double nodeRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NodeRadius {
      get { return nodeRadius_; }
      set {
        nodeRadius_ = value;
      }
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 10;
    private global::Messages.Extrema bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Extrema Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "interior" field.</summary>
    public const int InteriorFieldNumber = 12;
    private bool interior_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Interior {
      get { return interior_; }
      set {
        interior_ = value;
      }
    }

    /// <summary>Field number for the "exterior" field.</summary>
    public const int ExteriorFieldNumber = 13;
    private bool exterior_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Exterior {
      get { return exterior_; }
      set {
        exterior_ = value;
      }
    }

    /// <summary>Field number for the "shell" field.</summary>
    public const int ShellFieldNumber = 14;
    private bool shell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shell {
      get { return shell_; }
      set {
        shell_ = value;
      }
    }

    /// <summary>Field number for the "equalize" field.</summary>
    public const int EqualizeFieldNumber = 15;
    private bool equalize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equalize {
      get { return equalize_; }
      set {
        equalize_ = value;
      }
    }

    /// <summary>Field number for the "smooth" field.</summary>
    public const int SmoothFieldNumber = 16;
    private bool smooth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Smooth {
      get { return smooth_; }
      set {
        smooth_ = value;
      }
    }

    /// <summary>Field number for the "include_background" field.</summary>
    public const int IncludeBackgroundFieldNumber = 18;
    private bool includeBackground_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeBackground {
      get { return includeBackground_; }
      set {
        includeBackground_ = value;
      }
    }

    /// <summary>Field number for the "keep_existing_points" field.</summary>
    public const int KeepExistingPointsFieldNumber = 19;
    private bool keepExistingPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepExistingPoints {
      get { return keepExistingPoints_; }
      set {
        keepExistingPoints_ = value;
      }
    }

    /// <summary>Field number for the "x_symmetry" field.</summary>
    public const int XSymmetryFieldNumber = 24;
    private bool xSymmetry_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XSymmetry {
      get { return xSymmetry_; }
      set {
        xSymmetry_ = value;
      }
    }

    /// <summary>Field number for the "y_symmetry" field.</summary>
    public const int YSymmetryFieldNumber = 25;
    private bool ySymmetry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool YSymmetry {
      get { return ySymmetry_; }
      set {
        ySymmetry_ = value;
      }
    }

    /// <summary>Field number for the "z_symmetry" field.</summary>
    public const int ZSymmetryFieldNumber = 26;
    private bool zSymmetry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ZSymmetry {
      get { return zSymmetry_; }
      set {
        zSymmetry_ = value;
      }
    }

    /// <summary>Field number for the "background_n" field.</summary>
    public const int BackgroundNFieldNumber = 30;
    private long backgroundN_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BackgroundN {
      get { return backgroundN_; }
      set {
        backgroundN_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeshControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeshControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetN != other.TargetN) return false;
      if (MaxIterations != other.MaxIterations) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SizeRatio, other.SizeRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SizeDecay, other.SizeDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SizeExponent, other.SizeExponent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurvRatio, other.CurvRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurvDecay, other.CurvDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurvExponent, other.CurvExponent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NodeRadius, other.NodeRadius)) return false;
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if (Interior != other.Interior) return false;
      if (Exterior != other.Exterior) return false;
      if (Shell != other.Shell) return false;
      if (Equalize != other.Equalize) return false;
      if (Smooth != other.Smooth) return false;
      if (IncludeBackground != other.IncludeBackground) return false;
      if (KeepExistingPoints != other.KeepExistingPoints) return false;
      if (XSymmetry != other.XSymmetry) return false;
      if (YSymmetry != other.YSymmetry) return false;
      if (ZSymmetry != other.ZSymmetry) return false;
      if (BackgroundN != other.BackgroundN) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetN != 0L) hash ^= TargetN.GetHashCode();
      if (MaxIterations != 0) hash ^= MaxIterations.GetHashCode();
      if (SizeRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SizeRatio);
      if (SizeDecay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SizeDecay);
      if (SizeExponent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SizeExponent);
      if (CurvRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurvRatio);
      if (CurvDecay != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurvDecay);
      if (CurvExponent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurvExponent);
      if (NodeRadius != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NodeRadius);
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (Interior != false) hash ^= Interior.GetHashCode();
      if (Exterior != false) hash ^= Exterior.GetHashCode();
      if (Shell != false) hash ^= Shell.GetHashCode();
      if (Equalize != false) hash ^= Equalize.GetHashCode();
      if (Smooth != false) hash ^= Smooth.GetHashCode();
      if (IncludeBackground != false) hash ^= IncludeBackground.GetHashCode();
      if (KeepExistingPoints != false) hash ^= KeepExistingPoints.GetHashCode();
      if (XSymmetry != false) hash ^= XSymmetry.GetHashCode();
      if (YSymmetry != false) hash ^= YSymmetry.GetHashCode();
      if (ZSymmetry != false) hash ^= ZSymmetry.GetHashCode();
      if (BackgroundN != 0L) hash ^= BackgroundN.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetN != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetN);
      }
      if (MaxIterations != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxIterations);
      }
      if (SizeRatio != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(SizeRatio);
      }
      if (SizeDecay != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SizeDecay);
      }
      if (SizeExponent != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SizeExponent);
      }
      if (CurvRatio != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CurvRatio);
      }
      if (CurvDecay != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(CurvDecay);
      }
      if (CurvExponent != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CurvExponent);
      }
      if (NodeRadius != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(NodeRadius);
      }
      if (bounds_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Bounds);
      }
      if (Interior != false) {
        output.WriteRawTag(96);
        output.WriteBool(Interior);
      }
      if (Exterior != false) {
        output.WriteRawTag(104);
        output.WriteBool(Exterior);
      }
      if (Shell != false) {
        output.WriteRawTag(112);
        output.WriteBool(Shell);
      }
      if (Equalize != false) {
        output.WriteRawTag(120);
        output.WriteBool(Equalize);
      }
      if (Smooth != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Smooth);
      }
      if (IncludeBackground != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IncludeBackground);
      }
      if (KeepExistingPoints != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(KeepExistingPoints);
      }
      if (XSymmetry != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(XSymmetry);
      }
      if (YSymmetry != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(YSymmetry);
      }
      if (ZSymmetry != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(ZSymmetry);
      }
      if (BackgroundN != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(BackgroundN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetN != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetN);
      }
      if (MaxIterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIterations);
      }
      if (SizeRatio != 0D) {
        size += 1 + 8;
      }
      if (SizeDecay != 0D) {
        size += 1 + 8;
      }
      if (SizeExponent != 0D) {
        size += 1 + 8;
      }
      if (CurvRatio != 0D) {
        size += 1 + 8;
      }
      if (CurvDecay != 0D) {
        size += 1 + 8;
      }
      if (CurvExponent != 0D) {
        size += 1 + 8;
      }
      if (NodeRadius != 0D) {
        size += 1 + 8;
      }
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (Interior != false) {
        size += 1 + 1;
      }
      if (Exterior != false) {
        size += 1 + 1;
      }
      if (Shell != false) {
        size += 1 + 1;
      }
      if (Equalize != false) {
        size += 1 + 1;
      }
      if (Smooth != false) {
        size += 2 + 1;
      }
      if (IncludeBackground != false) {
        size += 2 + 1;
      }
      if (KeepExistingPoints != false) {
        size += 2 + 1;
      }
      if (XSymmetry != false) {
        size += 2 + 1;
      }
      if (YSymmetry != false) {
        size += 2 + 1;
      }
      if (ZSymmetry != false) {
        size += 2 + 1;
      }
      if (BackgroundN != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BackgroundN);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeshControl other) {
      if (other == null) {
        return;
      }
      if (other.TargetN != 0L) {
        TargetN = other.TargetN;
      }
      if (other.MaxIterations != 0) {
        MaxIterations = other.MaxIterations;
      }
      if (other.SizeRatio != 0D) {
        SizeRatio = other.SizeRatio;
      }
      if (other.SizeDecay != 0D) {
        SizeDecay = other.SizeDecay;
      }
      if (other.SizeExponent != 0D) {
        SizeExponent = other.SizeExponent;
      }
      if (other.CurvRatio != 0D) {
        CurvRatio = other.CurvRatio;
      }
      if (other.CurvDecay != 0D) {
        CurvDecay = other.CurvDecay;
      }
      if (other.CurvExponent != 0D) {
        CurvExponent = other.CurvExponent;
      }
      if (other.NodeRadius != 0D) {
        NodeRadius = other.NodeRadius;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          Bounds = new global::Messages.Extrema();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      if (other.Interior != false) {
        Interior = other.Interior;
      }
      if (other.Exterior != false) {
        Exterior = other.Exterior;
      }
      if (other.Shell != false) {
        Shell = other.Shell;
      }
      if (other.Equalize != false) {
        Equalize = other.Equalize;
      }
      if (other.Smooth != false) {
        Smooth = other.Smooth;
      }
      if (other.IncludeBackground != false) {
        IncludeBackground = other.IncludeBackground;
      }
      if (other.KeepExistingPoints != false) {
        KeepExistingPoints = other.KeepExistingPoints;
      }
      if (other.XSymmetry != false) {
        XSymmetry = other.XSymmetry;
      }
      if (other.YSymmetry != false) {
        YSymmetry = other.YSymmetry;
      }
      if (other.ZSymmetry != false) {
        ZSymmetry = other.ZSymmetry;
      }
      if (other.BackgroundN != 0L) {
        BackgroundN = other.BackgroundN;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetN = input.ReadInt64();
            break;
          }
          case 16: {
            MaxIterations = input.ReadInt32();
            break;
          }
          case 25: {
            SizeRatio = input.ReadDouble();
            break;
          }
          case 33: {
            SizeDecay = input.ReadDouble();
            break;
          }
          case 41: {
            SizeExponent = input.ReadDouble();
            break;
          }
          case 49: {
            CurvRatio = input.ReadDouble();
            break;
          }
          case 57: {
            CurvDecay = input.ReadDouble();
            break;
          }
          case 65: {
            CurvExponent = input.ReadDouble();
            break;
          }
          case 73: {
            NodeRadius = input.ReadDouble();
            break;
          }
          case 82: {
            if (bounds_ == null) {
              Bounds = new global::Messages.Extrema();
            }
            input.ReadMessage(Bounds);
            break;
          }
          case 96: {
            Interior = input.ReadBool();
            break;
          }
          case 104: {
            Exterior = input.ReadBool();
            break;
          }
          case 112: {
            Shell = input.ReadBool();
            break;
          }
          case 120: {
            Equalize = input.ReadBool();
            break;
          }
          case 128: {
            Smooth = input.ReadBool();
            break;
          }
          case 144: {
            IncludeBackground = input.ReadBool();
            break;
          }
          case 152: {
            KeepExistingPoints = input.ReadBool();
            break;
          }
          case 192: {
            XSymmetry = input.ReadBool();
            break;
          }
          case 200: {
            YSymmetry = input.ReadBool();
            break;
          }
          case 208: {
            ZSymmetry = input.ReadBool();
            break;
          }
          case 240: {
            BackgroundN = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TreeControl : pb::IMessage<TreeControl> {
    private static readonly pb::MessageParser<TreeControl> _parser = new pb::MessageParser<TreeControl>(() => new TreeControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TreeControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SpatialReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeControl(TreeControl other) : this() {
      minDepth_ = other.minDepth_;
      maxDepth_ = other.maxDepth_;
      maxSize_ = other.maxSize_;
      bounds_ = other.bounds_ != null ? other.bounds_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TreeControl Clone() {
      return new TreeControl(this);
    }

    /// <summary>Field number for the "min_depth" field.</summary>
    public const int MinDepthFieldNumber = 1;
    private int minDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDepth {
      get { return minDepth_; }
      set {
        minDepth_ = value;
      }
    }

    /// <summary>Field number for the "max_depth" field.</summary>
    public const int MaxDepthFieldNumber = 2;
    private int maxDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDepth {
      get { return maxDepth_; }
      set {
        maxDepth_ = value;
      }
    }

    /// <summary>Field number for the "max_size" field.</summary>
    public const int MaxSizeFieldNumber = 3;
    private long maxSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxSize {
      get { return maxSize_; }
      set {
        maxSize_ = value;
      }
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 10;
    private global::Messages.Extrema bounds_;
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Extrema Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TreeControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TreeControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinDepth != other.MinDepth) return false;
      if (MaxDepth != other.MaxDepth) return false;
      if (MaxSize != other.MaxSize) return false;
      if (!object.Equals(Bounds, other.Bounds)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinDepth != 0) hash ^= MinDepth.GetHashCode();
      if (MaxDepth != 0) hash ^= MaxDepth.GetHashCode();
      if (MaxSize != 0L) hash ^= MaxSize.GetHashCode();
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinDepth != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinDepth);
      }
      if (MaxDepth != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxDepth);
      }
      if (MaxSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MaxSize);
      }
      if (bounds_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Bounds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinDepth);
      }
      if (MaxDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDepth);
      }
      if (MaxSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxSize);
      }
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TreeControl other) {
      if (other == null) {
        return;
      }
      if (other.MinDepth != 0) {
        MinDepth = other.MinDepth;
      }
      if (other.MaxDepth != 0) {
        MaxDepth = other.MaxDepth;
      }
      if (other.MaxSize != 0L) {
        MaxSize = other.MaxSize;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          Bounds = new global::Messages.Extrema();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinDepth = input.ReadInt32();
            break;
          }
          case 16: {
            MaxDepth = input.ReadInt32();
            break;
          }
          case 24: {
            MaxSize = input.ReadInt64();
            break;
          }
          case 82: {
            if (bounds_ == null) {
              Bounds = new global::Messages.Extrema();
            }
            input.ReadMessage(Bounds);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkControl : pb::IMessage<NetworkControl> {
    private static readonly pb::MessageParser<NetworkControl> _parser = new pb::MessageParser<NetworkControl>(() => new NetworkControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.SpatialReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkControl(NetworkControl other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkControl Clone() {
      return new NetworkControl(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkControl other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
