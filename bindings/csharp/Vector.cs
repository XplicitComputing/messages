// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vector.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Messages {

  /// <summary>Holder for reflection information generated from vector.proto</summary>
  public static partial class VectorReflection {

    #region Descriptor
    /// <summary>File descriptor for vector.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VectorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx2ZWN0b3IucHJvdG8SCE1lc3NhZ2VzIjAKCFJldmlzaW9uEhEKCW1ham9y",
            "X3JldhgBIAEoAxIRCgltaW5vcl9yZXYYAiABKAMiSQoHRXh0cmVtYRIMCgRk",
            "aW1zGAEgASgFEg8KA21pbhgCIAMoAUICEAESDwoDbWF4GAMgAygBQgIQARIO",
            "CgZpc19zZXQYBCABKAgiigEKCFZlY3RvcjMyEgwKBG5hbWUYASABKAkSEgoK",
            "Y29tcG9uZW50cxgCIAEoBRITCgtpbnRlcmxlYXZlZBgDIAEoCBIkCghyZXZp",
            "c2lvbhgEIAEoCzISLk1lc3NhZ2VzLlJldmlzaW9uEg0KBXVuaXRzGAUgASgJ",
            "EhIKBnZhbHVlcxgKIAMoAkICEAEiigEKCFZlY3RvcjY0EgwKBG5hbWUYASAB",
            "KAkSEgoKY29tcG9uZW50cxgCIAEoBRITCgtpbnRlcmxlYXZlZBgDIAEoCBIk",
            "CghyZXZpc2lvbhgEIAEoCzISLk1lc3NhZ2VzLlJldmlzaW9uEg0KBXVuaXRz",
            "GAUgASgJEhIKBnZhbHVlcxgKIAMoAUICEAEiKwoHSW5kaWNlcxIMCgRuYW1l",
            "GAEgASgJEhIKBnZhbHVlcxgCIAMoBUICEAEipQIKCEVsZW1lbnRzEhMKB2lu",
            "ZGljZXMYASADKAVCAhABEhMKB3N0cmlkZXMYAiADKAVCAhABEhMKB29mZnNl",
            "dHMYAyADKAVCAhABEhEKBXR5cGVzGAQgAygFQgIQARIPCgNpZHMYBSADKAVC",
            "AhABEhYKCmlkX29mZnNldHMYBiADKAVCAhABEiAKFG51bV9lbGVtZW50c193",
            "aXRoX2lkGAcgAygFQgIQARIXCgtpZF90b19pbmRleBgIIAMoBUICEAESEQoF",
            "ZmxhZ3MYCSADKAVCAhABEhMKB2NlbnRlcnMYCiADKAFCAhABEhMKB2xlbmd0",
            "aHMYCyADKAFCAhABEhEKBWFyZWFzGAwgAygBQgIQARITCgd2b2x1bWVzGA0g",
            "AygBQgIQAUID+AEBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Revision), global::Messages.Revision.Parser, new[]{ "MajorRev", "MinorRev" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Extrema), global::Messages.Extrema.Parser, new[]{ "Dims", "Min", "Max", "IsSet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Vector32), global::Messages.Vector32.Parser, new[]{ "Name", "Components", "Interleaved", "Revision", "Units", "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Vector64), global::Messages.Vector64.Parser, new[]{ "Name", "Components", "Interleaved", "Revision", "Units", "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Indices), global::Messages.Indices.Parser, new[]{ "Name", "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Messages.Elements), global::Messages.Elements.Parser, new[]{ "Indices", "Strides", "Offsets", "Types_", "Ids", "IdOffsets", "NumElementsWithId", "IdToIndex", "Flags", "Centers", "Lengths", "Areas", "Volumes" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Revision : pb::IMessage<Revision> {
    private static readonly pb::MessageParser<Revision> _parser = new pb::MessageParser<Revision>(() => new Revision());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Revision> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.VectorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Revision() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Revision(Revision other) : this() {
      majorRev_ = other.majorRev_;
      minorRev_ = other.minorRev_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Revision Clone() {
      return new Revision(this);
    }

    /// <summary>Field number for the "major_rev" field.</summary>
    public const int MajorRevFieldNumber = 1;
    private long majorRev_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MajorRev {
      get { return majorRev_; }
      set {
        majorRev_ = value;
      }
    }

    /// <summary>Field number for the "minor_rev" field.</summary>
    public const int MinorRevFieldNumber = 2;
    private long minorRev_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinorRev {
      get { return minorRev_; }
      set {
        minorRev_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Revision);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Revision other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MajorRev != other.MajorRev) return false;
      if (MinorRev != other.MinorRev) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MajorRev != 0L) hash ^= MajorRev.GetHashCode();
      if (MinorRev != 0L) hash ^= MinorRev.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MajorRev != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MajorRev);
      }
      if (MinorRev != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinorRev);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MajorRev != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MajorRev);
      }
      if (MinorRev != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinorRev);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Revision other) {
      if (other == null) {
        return;
      }
      if (other.MajorRev != 0L) {
        MajorRev = other.MajorRev;
      }
      if (other.MinorRev != 0L) {
        MinorRev = other.MinorRev;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MajorRev = input.ReadInt64();
            break;
          }
          case 16: {
            MinorRev = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Extrema : pb::IMessage<Extrema> {
    private static readonly pb::MessageParser<Extrema> _parser = new pb::MessageParser<Extrema>(() => new Extrema());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Extrema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.VectorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extrema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extrema(Extrema other) : this() {
      dims_ = other.dims_;
      min_ = other.min_.Clone();
      max_ = other.max_.Clone();
      isSet_ = other.isSet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Extrema Clone() {
      return new Extrema(this);
    }

    /// <summary>Field number for the "dims" field.</summary>
    public const int DimsFieldNumber = 1;
    private int dims_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dims {
      get { return dims_; }
      set {
        dims_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_min_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> min_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Min {
      get { return min_; }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_max_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> max_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Max {
      get { return max_; }
    }

    /// <summary>Field number for the "is_set" field.</summary>
    public const int IsSetFieldNumber = 4;
    private bool isSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSet {
      get { return isSet_; }
      set {
        isSet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Extrema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Extrema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dims != other.Dims) return false;
      if(!min_.Equals(other.min_)) return false;
      if(!max_.Equals(other.max_)) return false;
      if (IsSet != other.IsSet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dims != 0) hash ^= Dims.GetHashCode();
      hash ^= min_.GetHashCode();
      hash ^= max_.GetHashCode();
      if (IsSet != false) hash ^= IsSet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dims != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dims);
      }
      min_.WriteTo(output, _repeated_min_codec);
      max_.WriteTo(output, _repeated_max_codec);
      if (IsSet != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsSet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dims != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dims);
      }
      size += min_.CalculateSize(_repeated_min_codec);
      size += max_.CalculateSize(_repeated_max_codec);
      if (IsSet != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Extrema other) {
      if (other == null) {
        return;
      }
      if (other.Dims != 0) {
        Dims = other.Dims;
      }
      min_.Add(other.min_);
      max_.Add(other.max_);
      if (other.IsSet != false) {
        IsSet = other.IsSet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dims = input.ReadInt32();
            break;
          }
          case 18:
          case 17: {
            min_.AddEntriesFrom(input, _repeated_min_codec);
            break;
          }
          case 26:
          case 25: {
            max_.AddEntriesFrom(input, _repeated_max_codec);
            break;
          }
          case 32: {
            IsSet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector32 : pb::IMessage<Vector32> {
    private static readonly pb::MessageParser<Vector32> _parser = new pb::MessageParser<Vector32>(() => new Vector32());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector32> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.VectorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector32() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector32(Vector32 other) : this() {
      name_ = other.name_;
      components_ = other.components_;
      interleaved_ = other.interleaved_;
      revision_ = other.revision_ != null ? other.revision_.Clone() : null;
      units_ = other.units_;
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector32 Clone() {
      return new Vector32(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "components" field.</summary>
    public const int ComponentsFieldNumber = 2;
    private int components_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Components {
      get { return components_; }
      set {
        components_ = value;
      }
    }

    /// <summary>Field number for the "interleaved" field.</summary>
    public const int InterleavedFieldNumber = 3;
    private bool interleaved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Interleaved {
      get { return interleaved_; }
      set {
        interleaved_ = value;
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 4;
    private global::Messages.Revision revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Revision Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 5;
    private string units_ = "";
    /// <summary>
    ///kg m s^2 and such string literals
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Units {
      get { return units_; }
      set {
        units_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_values_codec
        = pb::FieldCodec.ForFloat(82);
    private readonly pbc::RepeatedField<float> values_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector32);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector32 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Components != other.Components) return false;
      if (Interleaved != other.Interleaved) return false;
      if (!object.Equals(Revision, other.Revision)) return false;
      if (Units != other.Units) return false;
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Components != 0) hash ^= Components.GetHashCode();
      if (Interleaved != false) hash ^= Interleaved.GetHashCode();
      if (revision_ != null) hash ^= Revision.GetHashCode();
      if (Units.Length != 0) hash ^= Units.GetHashCode();
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Components != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Components);
      }
      if (Interleaved != false) {
        output.WriteRawTag(24);
        output.WriteBool(Interleaved);
      }
      if (revision_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Revision);
      }
      if (Units.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Units);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Components != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Components);
      }
      if (Interleaved != false) {
        size += 1 + 1;
      }
      if (revision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Revision);
      }
      if (Units.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Units);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector32 other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Components != 0) {
        Components = other.Components;
      }
      if (other.Interleaved != false) {
        Interleaved = other.Interleaved;
      }
      if (other.revision_ != null) {
        if (revision_ == null) {
          Revision = new global::Messages.Revision();
        }
        Revision.MergeFrom(other.Revision);
      }
      if (other.Units.Length != 0) {
        Units = other.Units;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Components = input.ReadInt32();
            break;
          }
          case 24: {
            Interleaved = input.ReadBool();
            break;
          }
          case 34: {
            if (revision_ == null) {
              Revision = new global::Messages.Revision();
            }
            input.ReadMessage(Revision);
            break;
          }
          case 42: {
            Units = input.ReadString();
            break;
          }
          case 82:
          case 85: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector64 : pb::IMessage<Vector64> {
    private static readonly pb::MessageParser<Vector64> _parser = new pb::MessageParser<Vector64>(() => new Vector64());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector64> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.VectorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector64() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector64(Vector64 other) : this() {
      name_ = other.name_;
      components_ = other.components_;
      interleaved_ = other.interleaved_;
      revision_ = other.revision_ != null ? other.revision_.Clone() : null;
      units_ = other.units_;
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector64 Clone() {
      return new Vector64(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "components" field.</summary>
    public const int ComponentsFieldNumber = 2;
    private int components_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Components {
      get { return components_; }
      set {
        components_ = value;
      }
    }

    /// <summary>Field number for the "interleaved" field.</summary>
    public const int InterleavedFieldNumber = 3;
    private bool interleaved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Interleaved {
      get { return interleaved_; }
      set {
        interleaved_ = value;
      }
    }

    /// <summary>Field number for the "revision" field.</summary>
    public const int RevisionFieldNumber = 4;
    private global::Messages.Revision revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Messages.Revision Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 5;
    private string units_ = "";
    /// <summary>
    ///kg m s^2 and such string literals
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Units {
      get { return units_; }
      set {
        units_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 10;
    private static readonly pb::FieldCodec<double> _repeated_values_codec
        = pb::FieldCodec.ForDouble(82);
    private readonly pbc::RepeatedField<double> values_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///reserved
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector64);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector64 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Components != other.Components) return false;
      if (Interleaved != other.Interleaved) return false;
      if (!object.Equals(Revision, other.Revision)) return false;
      if (Units != other.Units) return false;
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Components != 0) hash ^= Components.GetHashCode();
      if (Interleaved != false) hash ^= Interleaved.GetHashCode();
      if (revision_ != null) hash ^= Revision.GetHashCode();
      if (Units.Length != 0) hash ^= Units.GetHashCode();
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Components != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Components);
      }
      if (Interleaved != false) {
        output.WriteRawTag(24);
        output.WriteBool(Interleaved);
      }
      if (revision_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Revision);
      }
      if (Units.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Units);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Components != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Components);
      }
      if (Interleaved != false) {
        size += 1 + 1;
      }
      if (revision_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Revision);
      }
      if (Units.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Units);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector64 other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Components != 0) {
        Components = other.Components;
      }
      if (other.Interleaved != false) {
        Interleaved = other.Interleaved;
      }
      if (other.revision_ != null) {
        if (revision_ == null) {
          Revision = new global::Messages.Revision();
        }
        Revision.MergeFrom(other.Revision);
      }
      if (other.Units.Length != 0) {
        Units = other.Units;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Components = input.ReadInt32();
            break;
          }
          case 24: {
            Interleaved = input.ReadBool();
            break;
          }
          case 34: {
            if (revision_ == null) {
              Revision = new global::Messages.Revision();
            }
            input.ReadMessage(Revision);
            break;
          }
          case 42: {
            Units = input.ReadString();
            break;
          }
          case 82:
          case 81: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Indices : pb::IMessage<Indices> {
    private static readonly pb::MessageParser<Indices> _parser = new pb::MessageParser<Indices>(() => new Indices());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Indices> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.VectorReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Indices() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Indices(Indices other) : this() {
      name_ = other.name_;
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Indices Clone() {
      return new Indices(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_values_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> values_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Indices);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Indices other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Indices other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///defined here to take advantage of packed arena allocation (only enabled within this proto file)
  /// </summary>
  public sealed partial class Elements : pb::IMessage<Elements> {
    private static readonly pb::MessageParser<Elements> _parser = new pb::MessageParser<Elements>(() => new Elements());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Elements> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Messages.VectorReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Elements() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Elements(Elements other) : this() {
      indices_ = other.indices_.Clone();
      strides_ = other.strides_.Clone();
      offsets_ = other.offsets_.Clone();
      types_ = other.types_.Clone();
      ids_ = other.ids_.Clone();
      idOffsets_ = other.idOffsets_.Clone();
      numElementsWithId_ = other.numElementsWithId_.Clone();
      idToIndex_ = other.idToIndex_.Clone();
      flags_ = other.flags_.Clone();
      centers_ = other.centers_.Clone();
      lengths_ = other.lengths_.Clone();
      areas_ = other.areas_.Clone();
      volumes_ = other.volumes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Elements Clone() {
      return new Elements(this);
    }

    /// <summary>Field number for the "indices" field.</summary>
    public const int IndicesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_indices_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> indices_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Indices {
      get { return indices_; }
    }

    /// <summary>Field number for the "strides" field.</summary>
    public const int StridesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_strides_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> strides_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Strides {
      get { return strides_; }
    }

    /// <summary>Field number for the "offsets" field.</summary>
    public const int OffsetsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_offsets_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> offsets_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Offsets {
      get { return offsets_; }
    }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_types_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> types_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Types_ {
      get { return types_; }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "id_offsets" field.</summary>
    public const int IdOffsetsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_idOffsets_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> idOffsets_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IdOffsets {
      get { return idOffsets_; }
    }

    /// <summary>Field number for the "num_elements_with_id" field.</summary>
    public const int NumElementsWithIdFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_numElementsWithId_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> numElementsWithId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NumElementsWithId {
      get { return numElementsWithId_; }
    }

    /// <summary>Field number for the "id_to_index" field.</summary>
    public const int IdToIndexFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_idToIndex_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> idToIndex_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IdToIndex {
      get { return idToIndex_; }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_flags_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> flags_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Flags {
      get { return flags_; }
    }

    /// <summary>Field number for the "centers" field.</summary>
    public const int CentersFieldNumber = 10;
    private static readonly pb::FieldCodec<double> _repeated_centers_codec
        = pb::FieldCodec.ForDouble(82);
    private readonly pbc::RepeatedField<double> centers_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Centers {
      get { return centers_; }
    }

    /// <summary>Field number for the "lengths" field.</summary>
    public const int LengthsFieldNumber = 11;
    private static readonly pb::FieldCodec<double> _repeated_lengths_codec
        = pb::FieldCodec.ForDouble(90);
    private readonly pbc::RepeatedField<double> lengths_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Lengths {
      get { return lengths_; }
    }

    /// <summary>Field number for the "areas" field.</summary>
    public const int AreasFieldNumber = 12;
    private static readonly pb::FieldCodec<double> _repeated_areas_codec
        = pb::FieldCodec.ForDouble(98);
    private readonly pbc::RepeatedField<double> areas_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Areas {
      get { return areas_; }
    }

    /// <summary>Field number for the "volumes" field.</summary>
    public const int VolumesFieldNumber = 13;
    private static readonly pb::FieldCodec<double> _repeated_volumes_codec
        = pb::FieldCodec.ForDouble(106);
    private readonly pbc::RepeatedField<double> volumes_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Volumes {
      get { return volumes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Elements);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Elements other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!indices_.Equals(other.indices_)) return false;
      if(!strides_.Equals(other.strides_)) return false;
      if(!offsets_.Equals(other.offsets_)) return false;
      if(!types_.Equals(other.types_)) return false;
      if(!ids_.Equals(other.ids_)) return false;
      if(!idOffsets_.Equals(other.idOffsets_)) return false;
      if(!numElementsWithId_.Equals(other.numElementsWithId_)) return false;
      if(!idToIndex_.Equals(other.idToIndex_)) return false;
      if(!flags_.Equals(other.flags_)) return false;
      if(!centers_.Equals(other.centers_)) return false;
      if(!lengths_.Equals(other.lengths_)) return false;
      if(!areas_.Equals(other.areas_)) return false;
      if(!volumes_.Equals(other.volumes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= indices_.GetHashCode();
      hash ^= strides_.GetHashCode();
      hash ^= offsets_.GetHashCode();
      hash ^= types_.GetHashCode();
      hash ^= ids_.GetHashCode();
      hash ^= idOffsets_.GetHashCode();
      hash ^= numElementsWithId_.GetHashCode();
      hash ^= idToIndex_.GetHashCode();
      hash ^= flags_.GetHashCode();
      hash ^= centers_.GetHashCode();
      hash ^= lengths_.GetHashCode();
      hash ^= areas_.GetHashCode();
      hash ^= volumes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      indices_.WriteTo(output, _repeated_indices_codec);
      strides_.WriteTo(output, _repeated_strides_codec);
      offsets_.WriteTo(output, _repeated_offsets_codec);
      types_.WriteTo(output, _repeated_types_codec);
      ids_.WriteTo(output, _repeated_ids_codec);
      idOffsets_.WriteTo(output, _repeated_idOffsets_codec);
      numElementsWithId_.WriteTo(output, _repeated_numElementsWithId_codec);
      idToIndex_.WriteTo(output, _repeated_idToIndex_codec);
      flags_.WriteTo(output, _repeated_flags_codec);
      centers_.WriteTo(output, _repeated_centers_codec);
      lengths_.WriteTo(output, _repeated_lengths_codec);
      areas_.WriteTo(output, _repeated_areas_codec);
      volumes_.WriteTo(output, _repeated_volumes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += indices_.CalculateSize(_repeated_indices_codec);
      size += strides_.CalculateSize(_repeated_strides_codec);
      size += offsets_.CalculateSize(_repeated_offsets_codec);
      size += types_.CalculateSize(_repeated_types_codec);
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += idOffsets_.CalculateSize(_repeated_idOffsets_codec);
      size += numElementsWithId_.CalculateSize(_repeated_numElementsWithId_codec);
      size += idToIndex_.CalculateSize(_repeated_idToIndex_codec);
      size += flags_.CalculateSize(_repeated_flags_codec);
      size += centers_.CalculateSize(_repeated_centers_codec);
      size += lengths_.CalculateSize(_repeated_lengths_codec);
      size += areas_.CalculateSize(_repeated_areas_codec);
      size += volumes_.CalculateSize(_repeated_volumes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Elements other) {
      if (other == null) {
        return;
      }
      indices_.Add(other.indices_);
      strides_.Add(other.strides_);
      offsets_.Add(other.offsets_);
      types_.Add(other.types_);
      ids_.Add(other.ids_);
      idOffsets_.Add(other.idOffsets_);
      numElementsWithId_.Add(other.numElementsWithId_);
      idToIndex_.Add(other.idToIndex_);
      flags_.Add(other.flags_);
      centers_.Add(other.centers_);
      lengths_.Add(other.lengths_);
      areas_.Add(other.areas_);
      volumes_.Add(other.volumes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            indices_.AddEntriesFrom(input, _repeated_indices_codec);
            break;
          }
          case 18:
          case 16: {
            strides_.AddEntriesFrom(input, _repeated_strides_codec);
            break;
          }
          case 26:
          case 24: {
            offsets_.AddEntriesFrom(input, _repeated_offsets_codec);
            break;
          }
          case 34:
          case 32: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
          case 42:
          case 40: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 50:
          case 48: {
            idOffsets_.AddEntriesFrom(input, _repeated_idOffsets_codec);
            break;
          }
          case 58:
          case 56: {
            numElementsWithId_.AddEntriesFrom(input, _repeated_numElementsWithId_codec);
            break;
          }
          case 66:
          case 64: {
            idToIndex_.AddEntriesFrom(input, _repeated_idToIndex_codec);
            break;
          }
          case 74:
          case 72: {
            flags_.AddEntriesFrom(input, _repeated_flags_codec);
            break;
          }
          case 82:
          case 81: {
            centers_.AddEntriesFrom(input, _repeated_centers_codec);
            break;
          }
          case 90:
          case 89: {
            lengths_.AddEntriesFrom(input, _repeated_lengths_codec);
            break;
          }
          case 98:
          case 97: {
            areas_.AddEntriesFrom(input, _repeated_areas_codec);
            break;
          }
          case 106:
          case 105: {
            volumes_.AddEntriesFrom(input, _repeated_volumes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
