// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Command;
@class Function;
@class Meta;
@class Model;
@class Rule;
@class Script;
@class Variables;
@class Vector64;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - SystemRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface SystemRoot : GPBRootObject
@end

#pragma mark - Variables

typedef GPB_ENUM(Variables_FieldNumber) {
  Variables_FieldNumber_IntNamesArray = 2,
  Variables_FieldNumber_IntValuesArray = 3,
  Variables_FieldNumber_IntDescriptionsArray = 4,
  Variables_FieldNumber_BoolNamesArray = 6,
  Variables_FieldNumber_BoolValuesArray = 7,
  Variables_FieldNumber_BoolDescriptionsArray = 8,
  Variables_FieldNumber_DoubleNamesArray = 10,
  Variables_FieldNumber_DoubleValuesArray = 11,
  Variables_FieldNumber_DoubleDescriptionsArray = 12,
  Variables_FieldNumber_StringNamesArray = 14,
  Variables_FieldNumber_StringValuesArray = 15,
  Variables_FieldNumber_StringDescriptionsArray = 16,
};

/**
 * compatible with xcompute *.cfg files via machinery defined in config.hpp/config.cpp
 **/
GPB_FINAL @interface Variables : GPBMessage

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *intNamesArray;
/** The number of items in @c intNamesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger intNamesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *intValuesArray;
/** The number of items in @c intValuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger intValuesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *intDescriptionsArray;
/** The number of items in @c intDescriptionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger intDescriptionsArray_Count;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *boolNamesArray;
/** The number of items in @c boolNamesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger boolNamesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBBoolArray *boolValuesArray;
/** The number of items in @c boolValuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger boolValuesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *boolDescriptionsArray;
/** The number of items in @c boolDescriptionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger boolDescriptionsArray_Count;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *doubleNamesArray;
/** The number of items in @c doubleNamesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger doubleNamesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *doubleValuesArray;
/** The number of items in @c doubleValuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger doubleValuesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *doubleDescriptionsArray;
/** The number of items in @c doubleDescriptionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger doubleDescriptionsArray_Count;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *stringNamesArray;
/** The number of items in @c stringNamesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger stringNamesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *stringValuesArray;
/** The number of items in @c stringValuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger stringValuesArray_Count;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *stringDescriptionsArray;
/** The number of items in @c stringDescriptionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger stringDescriptionsArray_Count;

@end

#pragma mark - Function

typedef GPB_ENUM(Function_FieldNumber) {
  Function_FieldNumber_Name = 1,
  Function_FieldNumber_ArgumentTypesArray = 2,
  Function_FieldNumber_ArgumentDescriptionsArray = 3,
  Function_FieldNumber_InputsArray = 4,
  Function_FieldNumber_OutputsArray = 5,
  Function_FieldNumber_ConstantsArray = 6,
  Function_FieldNumber_ToBeDefinedArray = 7,
  Function_FieldNumber_DataArray = 8,
  Function_FieldNumber_CpuCapable = 10,
  Function_FieldNumber_GpuCapable = 11,
  Function_FieldNumber_IncludeAsPreprocessor = 12,
  Function_FieldNumber_OmitFromMainLoop = 13,
  Function_FieldNumber_IncludeAsPostprocessor = 14,
  Function_FieldNumber_MutuallyExclusive = 15,
  Function_FieldNumber_OnlyOnce = 16,
  Function_FieldNumber_PushFront = 17,
  Function_FieldNumber_DontFlatten = 18,
};

/**
 * compatible with xcompute algorithm (operation/code that has not been bound yet)
 **/
GPB_FINAL @interface Function : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** argument object binding requirements: */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *argumentTypesArray;
/** The number of items in @c argumentTypesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger argumentTypesArray_Count;

/** matching argument descriptions (used by UI) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *argumentDescriptionsArray;
/** The number of items in @c argumentDescriptionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger argumentDescriptionsArray_Count;

/** PK's required for algorithm inputs (user inputs) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *inputsArray;
/** The number of items in @c inputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inputsArray_Count;

/** PK's required for algorithm outputs */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *outputsArray;
/** The number of items in @c outputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outputsArray_Count;

/** PK's for uniform values across all nodes */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *constantsArray;
/** The number of items in @c constantsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger constantsArray_Count;

/** PK's for to be set by user in UI (end-user inputs) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *toBeDefinedArray;
/** The number of items in @c toBeDefinedArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger toBeDefinedArray_Count;

/** local data relevant to this algorithm (coefficients, etc) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Vector64*> *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

/** reserved */
@property(nonatomic, readwrite) BOOL cpuCapable;

@property(nonatomic, readwrite) BOOL gpuCapable;

@property(nonatomic, readwrite) BOOL includeAsPreprocessor;

@property(nonatomic, readwrite) BOOL omitFromMainLoop;

@property(nonatomic, readwrite) BOOL includeAsPostprocessor;

@property(nonatomic, readwrite) BOOL mutuallyExclusive;

@property(nonatomic, readwrite) BOOL onlyOnce;

@property(nonatomic, readwrite) BOOL pushFront;

/** reserved */
@property(nonatomic, readwrite) BOOL dontFlatten;

@end

#pragma mark - Command

typedef GPB_ENUM(Command_FieldNumber) {
  Command_FieldNumber_Function = 1,
  Command_FieldNumber_ArgsAreSet = 2,
  Command_FieldNumber_KernelReady = 3,
  Command_FieldNumber_ExecCount = 4,
  Command_FieldNumber_EffectiveSize = 5,
  Command_FieldNumber_Version = 6,
  Command_FieldNumber_Id_p = 7,
  Command_FieldNumber_NKernel = 8,
  Command_FieldNumber_Progress = 9,
  Command_FieldNumber_Msg = 10,
  Command_FieldNumber_DataArray = 12,
  Command_FieldNumber_BeforeArray = 13,
  Command_FieldNumber_AfterArray = 14,
  Command_FieldNumber_RegionTypeArray = 15,
  Command_FieldNumber_RegionIdArray = 16,
  Command_FieldNumber_ArgumentTypesArray = 17,
  Command_FieldNumber_ArgumentDescriptionsArray = 18,
};

/**
 * compatible with xcompute instruction  (a function instance bound to arguments... data, regions, etc)
 **/
GPB_FINAL @interface Command : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Function *function;
/** Test to see if @c function has been set. */
@property(nonatomic, readwrite) BOOL hasFunction;

@property(nonatomic, readwrite) BOOL argsAreSet;

@property(nonatomic, readwrite) BOOL kernelReady;

@property(nonatomic, readwrite) int64_t execCount;

@property(nonatomic, readwrite) int64_t effectiveSize;

@property(nonatomic, readwrite) int64_t version;

/** unique runtime identifier (assigned and only valid within a server session) */
@property(nonatomic, readwrite) int64_t id_p;

@property(nonatomic, readwrite) int64_t nKernel;

@property(nonatomic, readwrite) float progress;

@property(nonatomic, readwrite, copy, null_resettable) NSString *msg;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Vector64*> *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

/** optional, to be called from within bound function */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Command*> *beforeArray;
/** The number of items in @c beforeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger beforeArray_Count;

/** optional, to be called from within bound function */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Command*> *afterArray;
/** The number of items in @c afterArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger afterArray_Count;

/** if assigned, used to indentify specific zones for conditions, etc */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *regionTypeArray;
/** The number of items in @c regionTypeArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger regionTypeArray_Count;

/** if assigned, used to indentify specific zones for conditions, etc */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *regionIdArray;
/** The number of items in @c regionIdArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger regionIdArray_Count;

/** bound argument type names to operate (name of class or type) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *argumentTypesArray;
/** The number of items in @c argumentTypesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger argumentTypesArray_Count;

/** matching argument type descriptions (used by UI) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *argumentDescriptionsArray;
/** The number of items in @c argumentDescriptionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger argumentDescriptionsArray_Count;

@end

#pragma mark - Script

typedef GPB_ENUM(Script_FieldNumber) {
  Script_FieldNumber_Name = 1,
  Script_FieldNumber_Msg = 2,
  Script_FieldNumber_SourceCode = 3,
  Script_FieldNumber_Uid = 4,
  Script_FieldNumber_Device = 5,
  Script_FieldNumber_Status = 6,
  Script_FieldNumber_Order = 7,
  Script_FieldNumber_Progress = 8,
  Script_FieldNumber_Variables = 10,
  Script_FieldNumber_SequenceArray = 12,
  Script_FieldNumber_Before = 14,
  Script_FieldNumber_After = 15,
};

/**
 * compatible with xcompute solver
 **/
GPB_FINAL @interface Script : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *msg;

@property(nonatomic, readwrite, copy, null_resettable) NSString *sourceCode;

/** same as system uid, if assigned */
@property(nonatomic, readwrite) int64_t uid;

@property(nonatomic, readwrite) int32_t device;

@property(nonatomic, readwrite) int32_t status;

@property(nonatomic, readwrite) int32_t order;

@property(nonatomic, readwrite) float progress;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) Variables *variables;
/** Test to see if @c variables has been set. */
@property(nonatomic, readwrite) BOOL hasVariables;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Command*> *sequenceArray;
/** The number of items in @c sequenceArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger sequenceArray_Count;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) Script *before;
/** Test to see if @c before has been set. */
@property(nonatomic, readwrite) BOOL hasBefore;

@property(nonatomic, readwrite, strong, null_resettable) Script *after;
/** Test to see if @c after has been set. */
@property(nonatomic, readwrite) BOOL hasAfter;

@end

#pragma mark - Rule

typedef GPB_ENUM(Rule_FieldNumber) {
  Rule_FieldNumber_Pk = 1,
  Rule_FieldNumber_AlgorithmsArray = 2,
  Rule_FieldNumber_PriorityArray = 3,
};

GPB_FINAL @interface Rule : GPBMessage

/** serialized property-key <property \\t modifier \\t ...> */
@property(nonatomic, readwrite, copy, null_resettable) NSString *pk;

/** names of algorithms to be associated */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *algorithmsArray;
/** The number of items in @c algorithmsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger algorithmsArray_Count;

/** optional - larger numbers are more important */
@property(nonatomic, readwrite, strong, null_resettable) GPBInt32Array *priorityArray;
/** The number of items in @c priorityArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger priorityArray_Count;

@end

#pragma mark - Model

typedef GPB_ENUM(Model_FieldNumber) {
  Model_FieldNumber_Name = 1,
  Model_FieldNumber_DofsArray = 3,
  Model_FieldNumber_AlgorithmsArray = 4,
  Model_FieldNumber_AvailableOutputsArray = 5,
  Model_FieldNumber_ExtraPropertiesArray = 6,
  Model_FieldNumber_CompatibleConditionsArray = 7,
  Model_FieldNumber_CompatibleScriptsArray = 8,
  Model_FieldNumber_SubModelsArray = 9,
  Model_FieldNumber_DataArray = 10,
  Model_FieldNumber_RulesArray = 11,
  Model_FieldNumber_MutexStackArray = 12,
};

/**
 * compatible with xcompute model
 **/
GPB_FINAL @interface Model : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *dofsArray;
/** The number of items in @c dofsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dofsArray_Count;

/** ordered algorithms (by name) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *algorithmsArray;
/** The number of items in @c algorithmsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger algorithmsArray_Count;

/** serialized property-keys */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *availableOutputsArray;
/** The number of items in @c availableOutputsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger availableOutputsArray_Count;

/** some pk's are not recorded by default as an optimization. they can be added */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *extraPropertiesArray;
/** The number of items in @c extraPropertiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger extraPropertiesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *compatibleConditionsArray;
/** The number of items in @c compatibleConditionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger compatibleConditionsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *compatibleScriptsArray;
/** The number of items in @c compatibleScriptsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger compatibleScriptsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Model*> *subModelsArray;
/** The number of items in @c subModelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger subModelsArray_Count;

/** high-level constants manpulated by user */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Vector64*> *dataArray;
/** The number of items in @c dataArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dataArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Rule*> *rulesArray;
/** The number of items in @c rulesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger rulesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Rule*> *mutexStackArray;
/** The number of items in @c mutexStackArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger mutexStackArray_Count;

@end

#pragma mark - System

typedef GPB_ENUM(System_FieldNumber) {
  System_FieldNumber_Meta = 1,
  System_FieldNumber_Script = 2,
  System_FieldNumber_Geometry = 8,
  System_FieldNumber_ModelsArray = 10,
  System_FieldNumber_ConstantsArray = 11,
  System_FieldNumber_ConditionsArray = 12,
  System_FieldNumber_ChildrenArray = 13,
  System_FieldNumber_ReferencesArray = 14,
  System_FieldNumber_AttachmentsArray = 15,
};

/**
 * compatible with xcompute system
 **/
GPB_FINAL @interface System : GPBMessage

/** name and other basic info, some of which is non-persistent */
@property(nonatomic, readwrite, strong, null_resettable) Meta *meta;
/** Test to see if @c meta has been set. */
@property(nonatomic, readwrite) BOOL hasMeta;

/** serialized solver */
@property(nonatomic, readwrite, strong, null_resettable) Script *script;
/** Test to see if @c script has been set. */
@property(nonatomic, readwrite) BOOL hasScript;

/** reserved */
@property(nonatomic, readwrite, copy, null_resettable) NSString *geometry;

/** reserved */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Model*> *modelsArray;
/** The number of items in @c modelsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger modelsArray_Count;

/** physics.data */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Vector64*> *constantsArray;
/** The number of items in @c constantsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger constantsArray_Count;

/** special commands applied as contraints and conditions */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Command*> *conditionsArray;
/** The number of items in @c conditionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger conditionsArray_Count;

/** sub-system names (exact matches) */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *childrenArray;
/** The number of items in @c childrenArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger childrenArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *referencesArray;
/** The number of items in @c referencesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger referencesArray_Count;

/** external files such as pdf that users can attach to each system */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *attachmentsArray;
/** The number of items in @c attachmentsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger attachmentsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
