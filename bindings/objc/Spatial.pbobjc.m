// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spatial.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Spatial.pbobjc.h"
#import "Vector.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SpatialRoot

@implementation SpatialRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SpatialRoot_FileDescriptor

static GPBFileDescriptor *SpatialRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Messages"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Zone

@implementation Zone

@dynamic name;
@dynamic id_p;
@dynamic dimensionality;
@dynamic numElements;
@dynamic offset;
@dynamic comments;
@dynamic info;
@dynamic hasBounds, bounds;
@dynamic terminalPositionArray, terminalPositionArray_Count;
@dynamic specificElementsArray, specificElementsArray_Count;

typedef struct Zone__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  int32_t dimensionality;
  NSString *name;
  NSString *comments;
  NSString *info;
  Extrema *bounds;
  GPBFloatArray *terminalPositionArray;
  GPBInt32Array *specificElementsArray;
  int64_t numElements;
  int64_t offset;
} Zone__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Zone__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Zone__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dimensionality",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_Dimensionality,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Zone__storage_, dimensionality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "numElements",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_NumElements,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Zone__storage_, numElements),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_Offset,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Zone__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "comments",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_Comments,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Zone__storage_, comments),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "info",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_Info,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Zone__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bounds",
        .dataTypeSpecific.className = GPBStringifySymbol(Extrema),
        .number = Zone_FieldNumber_Bounds,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Zone__storage_, bounds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "terminalPositionArray",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_TerminalPositionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Zone__storage_, terminalPositionArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "specificElementsArray",
        .dataTypeSpecific.className = NULL,
        .number = Zone_FieldNumber_SpecificElementsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Zone__storage_, specificElementsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Zone class]
                                     rootClass:[SpatialRoot class]
                                          file:SpatialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Zone__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Topology

@implementation Topology

@dynamic name;
@dynamic type;
@dynamic ndim;
@dynamic basis;
@dynamic resolutionArray, resolutionArray_Count;
@dynamic dataArray, dataArray_Count;
@dynamic hasNodes, nodes;
@dynamic hasEdges, edges;
@dynamic hasInteriorEdges, interiorEdges;
@dynamic hasFaces, faces;
@dynamic hasInteriorFaces, interiorFaces;
@dynamic hasCells, cells;
@dynamic groupsArray, groupsArray_Count;
@dynamic loopsArray, loopsArray_Count;
@dynamic surfacesArray, surfacesArray_Count;
@dynamic volumesArray, volumesArray_Count;
@dynamic locationsArray, locationsArray_Count;
@dynamic filename;
@dynamic hasRevision, revision;

typedef struct Topology__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t ndim;
  int32_t basis;
  NSString *name;
  GPBDoubleArray *resolutionArray;
  NSMutableArray *dataArray;
  Elements *nodes;
  Elements *edges;
  Elements *interiorEdges;
  Elements *faces;
  Elements *interiorFaces;
  Elements *cells;
  NSMutableArray *groupsArray;
  NSMutableArray *loopsArray;
  NSMutableArray *surfacesArray;
  NSMutableArray *volumesArray;
  GPBInt32Array *locationsArray;
  NSString *filename;
  Revision *revision;
} Topology__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Topology_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Topology__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = Topology_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Topology__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "ndim",
        .dataTypeSpecific.className = NULL,
        .number = Topology_FieldNumber_Ndim,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Topology__storage_, ndim),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "basis",
        .dataTypeSpecific.className = NULL,
        .number = Topology_FieldNumber_Basis,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Topology__storage_, basis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resolutionArray",
        .dataTypeSpecific.className = NULL,
        .number = Topology_FieldNumber_ResolutionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Topology__storage_, resolutionArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Vector64),
        .number = Topology_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Topology__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nodes",
        .dataTypeSpecific.className = GPBStringifySymbol(Elements),
        .number = Topology_FieldNumber_Nodes,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Topology__storage_, nodes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "edges",
        .dataTypeSpecific.className = GPBStringifySymbol(Elements),
        .number = Topology_FieldNumber_Edges,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Topology__storage_, edges),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interiorEdges",
        .dataTypeSpecific.className = GPBStringifySymbol(Elements),
        .number = Topology_FieldNumber_InteriorEdges,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Topology__storage_, interiorEdges),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "faces",
        .dataTypeSpecific.className = GPBStringifySymbol(Elements),
        .number = Topology_FieldNumber_Faces,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Topology__storage_, faces),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interiorFaces",
        .dataTypeSpecific.className = GPBStringifySymbol(Elements),
        .number = Topology_FieldNumber_InteriorFaces,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Topology__storage_, interiorFaces),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cells",
        .dataTypeSpecific.className = GPBStringifySymbol(Elements),
        .number = Topology_FieldNumber_Cells,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Topology__storage_, cells),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Zone),
        .number = Topology_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Topology__storage_, groupsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "loopsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Zone),
        .number = Topology_FieldNumber_LoopsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Topology__storage_, loopsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "surfacesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Zone),
        .number = Topology_FieldNumber_SurfacesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Topology__storage_, surfacesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "volumesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Zone),
        .number = Topology_FieldNumber_VolumesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Topology__storage_, volumesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "locationsArray",
        .dataTypeSpecific.className = NULL,
        .number = Topology_FieldNumber_LocationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Topology__storage_, locationsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "filename",
        .dataTypeSpecific.className = NULL,
        .number = Topology_FieldNumber_Filename,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Topology__storage_, filename),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "revision",
        .dataTypeSpecific.className = GPBStringifySymbol(Revision),
        .number = Topology_FieldNumber_Revision,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Topology__storage_, revision),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Topology class]
                                     rootClass:[SpatialRoot class]
                                          file:SpatialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Topology__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GridControl

@implementation GridControl

@dynamic basis;
@dynamic sizeArray, sizeArray_Count;
@dynamic spacingArray, spacingArray_Count;
@dynamic gradingArray, gradingArray_Count;
@dynamic hasBounds, bounds;

typedef struct GridControl__storage_ {
  uint32_t _has_storage_[1];
  int32_t basis;
  GPBInt32Array *sizeArray;
  GPBDoubleArray *spacingArray;
  GPBDoubleArray *gradingArray;
  Extrema *bounds;
} GridControl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "basis",
        .dataTypeSpecific.className = NULL,
        .number = GridControl_FieldNumber_Basis,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GridControl__storage_, basis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sizeArray",
        .dataTypeSpecific.className = NULL,
        .number = GridControl_FieldNumber_SizeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GridControl__storage_, sizeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "spacingArray",
        .dataTypeSpecific.className = NULL,
        .number = GridControl_FieldNumber_SpacingArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GridControl__storage_, spacingArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "gradingArray",
        .dataTypeSpecific.className = NULL,
        .number = GridControl_FieldNumber_GradingArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GridControl__storage_, gradingArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bounds",
        .dataTypeSpecific.className = GPBStringifySymbol(Extrema),
        .number = GridControl_FieldNumber_Bounds,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GridControl__storage_, bounds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GridControl class]
                                     rootClass:[SpatialRoot class]
                                          file:SpatialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GridControl__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MeshControl

@implementation MeshControl

@dynamic targetN;
@dynamic maxIterations;
@dynamic sizeRatio;
@dynamic sizeDecay;
@dynamic sizeExponent;
@dynamic curvRatio;
@dynamic curvDecay;
@dynamic curvExponent;
@dynamic nodeRadius;
@dynamic hasBounds, bounds;
@dynamic interior;
@dynamic exterior;
@dynamic shell;
@dynamic equalize;
@dynamic smooth;
@dynamic includeBackground;
@dynamic keepExistingPoints;
@dynamic xSymmetry;
@dynamic ySymmetry;
@dynamic zSymmetry;
@dynamic backgroundN;

typedef struct MeshControl__storage_ {
  uint32_t _has_storage_[1];
  int32_t maxIterations;
  Extrema *bounds;
  int64_t targetN;
  double sizeRatio;
  double sizeDecay;
  double sizeExponent;
  double curvRatio;
  double curvDecay;
  double curvExponent;
  double nodeRadius;
  int64_t backgroundN;
} MeshControl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetN",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_TargetN,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MeshControl__storage_, targetN),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maxIterations",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_MaxIterations,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MeshControl__storage_, maxIterations),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sizeRatio",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_SizeRatio,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MeshControl__storage_, sizeRatio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sizeDecay",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_SizeDecay,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MeshControl__storage_, sizeDecay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sizeExponent",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_SizeExponent,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MeshControl__storage_, sizeExponent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "curvRatio",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_CurvRatio,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MeshControl__storage_, curvRatio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "curvDecay",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_CurvDecay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MeshControl__storage_, curvDecay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "curvExponent",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_CurvExponent,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MeshControl__storage_, curvExponent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "nodeRadius",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_NodeRadius,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MeshControl__storage_, nodeRadius),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bounds",
        .dataTypeSpecific.className = GPBStringifySymbol(Extrema),
        .number = MeshControl_FieldNumber_Bounds,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MeshControl__storage_, bounds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "interior",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_Interior,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "exterior",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_Exterior,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "shell",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_Shell,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "equalize",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_Equalize,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "smooth",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_Smooth,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "includeBackground",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_IncludeBackground,
        .hasIndex = 20,
        .offset = 21,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "keepExistingPoints",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_KeepExistingPoints,
        .hasIndex = 22,
        .offset = 23,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "xSymmetry",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_XSymmetry,
        .hasIndex = 24,
        .offset = 25,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "ySymmetry",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_YSymmetry,
        .hasIndex = 26,
        .offset = 27,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "zSymmetry",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_ZSymmetry,
        .hasIndex = 28,
        .offset = 29,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "backgroundN",
        .dataTypeSpecific.className = NULL,
        .number = MeshControl_FieldNumber_BackgroundN,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(MeshControl__storage_, backgroundN),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MeshControl class]
                                     rootClass:[SpatialRoot class]
                                          file:SpatialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MeshControl__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TreeControl

@implementation TreeControl

@dynamic minDepth;
@dynamic maxDepth;
@dynamic maxSize;
@dynamic hasBounds, bounds;

typedef struct TreeControl__storage_ {
  uint32_t _has_storage_[1];
  int32_t minDepth;
  int32_t maxDepth;
  Extrema *bounds;
  int64_t maxSize;
} TreeControl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minDepth",
        .dataTypeSpecific.className = NULL,
        .number = TreeControl_FieldNumber_MinDepth,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TreeControl__storage_, minDepth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxDepth",
        .dataTypeSpecific.className = NULL,
        .number = TreeControl_FieldNumber_MaxDepth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TreeControl__storage_, maxDepth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxSize",
        .dataTypeSpecific.className = NULL,
        .number = TreeControl_FieldNumber_MaxSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TreeControl__storage_, maxSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bounds",
        .dataTypeSpecific.className = GPBStringifySymbol(Extrema),
        .number = TreeControl_FieldNumber_Bounds,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TreeControl__storage_, bounds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TreeControl class]
                                     rootClass:[SpatialRoot class]
                                          file:SpatialRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TreeControl__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NetworkControl

@implementation NetworkControl


typedef struct NetworkControl__storage_ {
  uint32_t _has_storage_[1];
} NetworkControl__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NetworkControl class]
                                     rootClass:[SpatialRoot class]
                                          file:SpatialRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(NetworkControl__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
