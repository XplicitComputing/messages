// source: vector.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Messages.Elements', null, global);
goog.exportSymbol('proto.Messages.Extrema', null, global);
goog.exportSymbol('proto.Messages.Indices', null, global);
goog.exportSymbol('proto.Messages.Revision', null, global);
goog.exportSymbol('proto.Messages.Vector32', null, global);
goog.exportSymbol('proto.Messages.Vector64', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messages.Revision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Messages.Revision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messages.Revision.displayName = 'proto.Messages.Revision';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messages.Extrema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messages.Extrema.repeatedFields_, null);
};
goog.inherits(proto.Messages.Extrema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messages.Extrema.displayName = 'proto.Messages.Extrema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messages.Vector32 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messages.Vector32.repeatedFields_, null);
};
goog.inherits(proto.Messages.Vector32, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messages.Vector32.displayName = 'proto.Messages.Vector32';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messages.Vector64 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messages.Vector64.repeatedFields_, null);
};
goog.inherits(proto.Messages.Vector64, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messages.Vector64.displayName = 'proto.Messages.Vector64';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messages.Indices = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messages.Indices.repeatedFields_, null);
};
goog.inherits(proto.Messages.Indices, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messages.Indices.displayName = 'proto.Messages.Indices';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Messages.Elements = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Messages.Elements.repeatedFields_, null);
};
goog.inherits(proto.Messages.Elements, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Messages.Elements.displayName = 'proto.Messages.Elements';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messages.Revision.prototype.toObject = function(opt_includeInstance) {
  return proto.Messages.Revision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messages.Revision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Revision.toObject = function(includeInstance, msg) {
  var f, obj = {
    majorRev: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minorRev: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messages.Revision}
 */
proto.Messages.Revision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messages.Revision;
  return proto.Messages.Revision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messages.Revision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messages.Revision}
 */
proto.Messages.Revision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMajorRev(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinorRev(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messages.Revision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messages.Revision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messages.Revision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Revision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajorRev();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMinorRev();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 major_rev = 1;
 * @return {number}
 */
proto.Messages.Revision.prototype.getMajorRev = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messages.Revision} returns this
 */
proto.Messages.Revision.prototype.setMajorRev = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 minor_rev = 2;
 * @return {number}
 */
proto.Messages.Revision.prototype.getMinorRev = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messages.Revision} returns this
 */
proto.Messages.Revision.prototype.setMinorRev = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messages.Extrema.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messages.Extrema.prototype.toObject = function(opt_includeInstance) {
  return proto.Messages.Extrema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messages.Extrema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Extrema.toObject = function(includeInstance, msg) {
  var f, obj = {
    dims: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    maxList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 3)) == null ? undefined : f,
    isSet: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messages.Extrema}
 */
proto.Messages.Extrema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messages.Extrema;
  return proto.Messages.Extrema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messages.Extrema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messages.Extrema}
 */
proto.Messages.Extrema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDims(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setMinList(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setMaxList(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messages.Extrema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messages.Extrema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messages.Extrema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Extrema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDims();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMinList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
  f = message.getMaxList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getIsSet();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 dims = 1;
 * @return {number}
 */
proto.Messages.Extrema.prototype.getDims = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messages.Extrema} returns this
 */
proto.Messages.Extrema.prototype.setDims = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated double min = 2;
 * @return {!Array<number>}
 */
proto.Messages.Extrema.prototype.getMinList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Extrema} returns this
 */
proto.Messages.Extrema.prototype.setMinList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Extrema} returns this
 */
proto.Messages.Extrema.prototype.addMin = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Extrema} returns this
 */
proto.Messages.Extrema.prototype.clearMinList = function() {
  return this.setMinList([]);
};


/**
 * repeated double max = 3;
 * @return {!Array<number>}
 */
proto.Messages.Extrema.prototype.getMaxList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Extrema} returns this
 */
proto.Messages.Extrema.prototype.setMaxList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Extrema} returns this
 */
proto.Messages.Extrema.prototype.addMax = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Extrema} returns this
 */
proto.Messages.Extrema.prototype.clearMaxList = function() {
  return this.setMaxList([]);
};


/**
 * optional bool is_set = 4;
 * @return {boolean}
 */
proto.Messages.Extrema.prototype.getIsSet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messages.Extrema} returns this
 */
proto.Messages.Extrema.prototype.setIsSet = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messages.Vector32.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messages.Vector32.prototype.toObject = function(opt_includeInstance) {
  return proto.Messages.Vector32.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messages.Vector32} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Vector32.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    components: jspb.Message.getFieldWithDefault(msg, 2, 0),
    interleaved: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    revision: (f = msg.getRevision()) && proto.Messages.Revision.toObject(includeInstance, f),
    units: jspb.Message.getFieldWithDefault(msg, 5, ""),
    valuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messages.Vector32}
 */
proto.Messages.Vector32.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messages.Vector32;
  return proto.Messages.Vector32.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messages.Vector32} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messages.Vector32}
 */
proto.Messages.Vector32.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComponents(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInterleaved(value);
      break;
    case 4:
      var value = new proto.Messages.Revision;
      reader.readMessage(value,proto.Messages.Revision.deserializeBinaryFromReader);
      msg.setRevision(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnits(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messages.Vector32.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messages.Vector32.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messages.Vector32} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Vector32.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComponents();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInterleaved();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRevision();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Messages.Revision.serializeBinaryToWriter
    );
  }
  f = message.getUnits();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Messages.Vector32.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messages.Vector32} returns this
 */
proto.Messages.Vector32.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 components = 2;
 * @return {number}
 */
proto.Messages.Vector32.prototype.getComponents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messages.Vector32} returns this
 */
proto.Messages.Vector32.prototype.setComponents = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool interleaved = 3;
 * @return {boolean}
 */
proto.Messages.Vector32.prototype.getInterleaved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messages.Vector32} returns this
 */
proto.Messages.Vector32.prototype.setInterleaved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Revision revision = 4;
 * @return {?proto.Messages.Revision}
 */
proto.Messages.Vector32.prototype.getRevision = function() {
  return /** @type{?proto.Messages.Revision} */ (
    jspb.Message.getWrapperField(this, proto.Messages.Revision, 4));
};


/**
 * @param {?proto.Messages.Revision|undefined} value
 * @return {!proto.Messages.Vector32} returns this
*/
proto.Messages.Vector32.prototype.setRevision = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messages.Vector32} returns this
 */
proto.Messages.Vector32.prototype.clearRevision = function() {
  return this.setRevision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messages.Vector32.prototype.hasRevision = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string units = 5;
 * @return {string}
 */
proto.Messages.Vector32.prototype.getUnits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messages.Vector32} returns this
 */
proto.Messages.Vector32.prototype.setUnits = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated float values = 10;
 * @return {!Array<number>}
 */
proto.Messages.Vector32.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Vector32} returns this
 */
proto.Messages.Vector32.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Vector32} returns this
 */
proto.Messages.Vector32.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Vector32} returns this
 */
proto.Messages.Vector32.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messages.Vector64.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messages.Vector64.prototype.toObject = function(opt_includeInstance) {
  return proto.Messages.Vector64.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messages.Vector64} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Vector64.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    components: jspb.Message.getFieldWithDefault(msg, 2, 0),
    interleaved: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    revision: (f = msg.getRevision()) && proto.Messages.Revision.toObject(includeInstance, f),
    units: jspb.Message.getFieldWithDefault(msg, 5, ""),
    valuesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messages.Vector64}
 */
proto.Messages.Vector64.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messages.Vector64;
  return proto.Messages.Vector64.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messages.Vector64} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messages.Vector64}
 */
proto.Messages.Vector64.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setComponents(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInterleaved(value);
      break;
    case 4:
      var value = new proto.Messages.Revision;
      reader.readMessage(value,proto.Messages.Revision.deserializeBinaryFromReader);
      msg.setRevision(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnits(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messages.Vector64.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messages.Vector64.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messages.Vector64} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Vector64.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getComponents();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInterleaved();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRevision();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Messages.Revision.serializeBinaryToWriter
    );
  }
  f = message.getUnits();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Messages.Vector64.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messages.Vector64} returns this
 */
proto.Messages.Vector64.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 components = 2;
 * @return {number}
 */
proto.Messages.Vector64.prototype.getComponents = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Messages.Vector64} returns this
 */
proto.Messages.Vector64.prototype.setComponents = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool interleaved = 3;
 * @return {boolean}
 */
proto.Messages.Vector64.prototype.getInterleaved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Messages.Vector64} returns this
 */
proto.Messages.Vector64.prototype.setInterleaved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Revision revision = 4;
 * @return {?proto.Messages.Revision}
 */
proto.Messages.Vector64.prototype.getRevision = function() {
  return /** @type{?proto.Messages.Revision} */ (
    jspb.Message.getWrapperField(this, proto.Messages.Revision, 4));
};


/**
 * @param {?proto.Messages.Revision|undefined} value
 * @return {!proto.Messages.Vector64} returns this
*/
proto.Messages.Vector64.prototype.setRevision = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Messages.Vector64} returns this
 */
proto.Messages.Vector64.prototype.clearRevision = function() {
  return this.setRevision(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Messages.Vector64.prototype.hasRevision = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string units = 5;
 * @return {string}
 */
proto.Messages.Vector64.prototype.getUnits = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messages.Vector64} returns this
 */
proto.Messages.Vector64.prototype.setUnits = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated double values = 10;
 * @return {!Array<number>}
 */
proto.Messages.Vector64.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Vector64} returns this
 */
proto.Messages.Vector64.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Vector64} returns this
 */
proto.Messages.Vector64.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Vector64} returns this
 */
proto.Messages.Vector64.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messages.Indices.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messages.Indices.prototype.toObject = function(opt_includeInstance) {
  return proto.Messages.Indices.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messages.Indices} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Indices.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messages.Indices}
 */
proto.Messages.Indices.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messages.Indices;
  return proto.Messages.Indices.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messages.Indices} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messages.Indices}
 */
proto.Messages.Indices.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messages.Indices.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messages.Indices.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messages.Indices} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Indices.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Messages.Indices.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Messages.Indices} returns this
 */
proto.Messages.Indices.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated int32 values = 2;
 * @return {!Array<number>}
 */
proto.Messages.Indices.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Indices} returns this
 */
proto.Messages.Indices.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Indices} returns this
 */
proto.Messages.Indices.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Indices} returns this
 */
proto.Messages.Indices.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Messages.Elements.repeatedFields_ = [1,2,3,4,5,6,7,8,9,10,11,12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Messages.Elements.prototype.toObject = function(opt_includeInstance) {
  return proto.Messages.Elements.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Messages.Elements} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Elements.toObject = function(includeInstance, msg) {
  var f, obj = {
    indicesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    stridesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    offsetsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    typesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    idsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    idOffsetsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    numElementsWithIdList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    idToIndexList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    flagsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    centersList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 10)) == null ? undefined : f,
    lengthsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 11)) == null ? undefined : f,
    areasList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 12)) == null ? undefined : f,
    volumesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 13)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Messages.Elements}
 */
proto.Messages.Elements.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Messages.Elements;
  return proto.Messages.Elements.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Messages.Elements} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Messages.Elements}
 */
proto.Messages.Elements.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setIndicesList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setStridesList(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setOffsetsList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setTypesList(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setIdsList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setIdOffsetsList(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setNumElementsWithIdList(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setIdToIndexList(value);
      break;
    case 9:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setFlagsList(value);
      break;
    case 10:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setCentersList(value);
      break;
    case 11:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setLengthsList(value);
      break;
    case 12:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setAreasList(value);
      break;
    case 13:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setVolumesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Messages.Elements.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Messages.Elements.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Messages.Elements} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Messages.Elements.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndicesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getStridesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getOffsetsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getTypesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      4,
      f
    );
  }
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getIdOffsetsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getNumElementsWithIdList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getIdToIndexList();
  if (f.length > 0) {
    writer.writePackedInt32(
      8,
      f
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      9,
      f
    );
  }
  f = message.getCentersList();
  if (f.length > 0) {
    writer.writePackedDouble(
      10,
      f
    );
  }
  f = message.getLengthsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      11,
      f
    );
  }
  f = message.getAreasList();
  if (f.length > 0) {
    writer.writePackedDouble(
      12,
      f
    );
  }
  f = message.getVolumesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      13,
      f
    );
  }
};


/**
 * repeated int32 indices = 1;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getIndicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setIndicesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addIndices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearIndicesList = function() {
  return this.setIndicesList([]);
};


/**
 * repeated int32 strides = 2;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getStridesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setStridesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addStrides = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearStridesList = function() {
  return this.setStridesList([]);
};


/**
 * repeated int32 offsets = 3;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getOffsetsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setOffsetsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addOffsets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearOffsetsList = function() {
  return this.setOffsetsList([]);
};


/**
 * repeated int32 types = 4;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getTypesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setTypesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearTypesList = function() {
  return this.setTypesList([]);
};


/**
 * repeated int32 ids = 5;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearIdsList = function() {
  return this.setIdsList([]);
};


/**
 * repeated int32 id_offsets = 6;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getIdOffsetsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setIdOffsetsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addIdOffsets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearIdOffsetsList = function() {
  return this.setIdOffsetsList([]);
};


/**
 * repeated int32 num_elements_with_id = 7;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getNumElementsWithIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setNumElementsWithIdList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addNumElementsWithId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearNumElementsWithIdList = function() {
  return this.setNumElementsWithIdList([]);
};


/**
 * repeated int32 id_to_index = 8;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getIdToIndexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setIdToIndexList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addIdToIndex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearIdToIndexList = function() {
  return this.setIdToIndexList([]);
};


/**
 * repeated int32 flags = 9;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getFlagsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setFlagsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addFlags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearFlagsList = function() {
  return this.setFlagsList([]);
};


/**
 * repeated double centers = 10;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getCentersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setCentersList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addCenters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearCentersList = function() {
  return this.setCentersList([]);
};


/**
 * repeated double lengths = 11;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getLengthsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 11));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setLengthsList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addLengths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearLengthsList = function() {
  return this.setLengthsList([]);
};


/**
 * repeated double areas = 12;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getAreasList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 12));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setAreasList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addAreas = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearAreasList = function() {
  return this.setAreasList([]);
};


/**
 * repeated double volumes = 13;
 * @return {!Array<number>}
 */
proto.Messages.Elements.prototype.getVolumesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 13));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.setVolumesList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.addVolumes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Messages.Elements} returns this
 */
proto.Messages.Elements.prototype.clearVolumesList = function() {
  return this.setVolumesList([]);
};


goog.object.extend(exports, proto.Messages);
