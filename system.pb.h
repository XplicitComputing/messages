// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_system_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_system_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector.pb.h"
#include "meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_system_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_system_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_system_2eproto;
namespace Messages {
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Function;
class FunctionDefaultTypeInternal;
extern FunctionDefaultTypeInternal _Function_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class Rule;
class RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
class Script;
class ScriptDefaultTypeInternal;
extern ScriptDefaultTypeInternal _Script_default_instance_;
class System;
class SystemDefaultTypeInternal;
extern SystemDefaultTypeInternal _System_default_instance_;
class Variables;
class VariablesDefaultTypeInternal;
extern VariablesDefaultTypeInternal _Variables_default_instance_;
}  // namespace Messages
PROTOBUF_NAMESPACE_OPEN
template<> ::Messages::Command* Arena::CreateMaybeMessage<::Messages::Command>(Arena*);
template<> ::Messages::Function* Arena::CreateMaybeMessage<::Messages::Function>(Arena*);
template<> ::Messages::Model* Arena::CreateMaybeMessage<::Messages::Model>(Arena*);
template<> ::Messages::Rule* Arena::CreateMaybeMessage<::Messages::Rule>(Arena*);
template<> ::Messages::Script* Arena::CreateMaybeMessage<::Messages::Script>(Arena*);
template<> ::Messages::System* Arena::CreateMaybeMessage<::Messages::System>(Arena*);
template<> ::Messages::Variables* Arena::CreateMaybeMessage<::Messages::Variables>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Messages {

// ===================================================================

class Variables :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Variables) */ {
 public:
  Variables();
  virtual ~Variables();

  Variables(const Variables& from);
  Variables(Variables&& from) noexcept
    : Variables() {
    *this = ::std::move(from);
  }

  inline Variables& operator=(const Variables& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variables& operator=(Variables&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Variables& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variables* internal_default_instance() {
    return reinterpret_cast<const Variables*>(
               &_Variables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Variables* other);
  friend void swap(Variables& a, Variables& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variables* New() const final {
    return CreateMaybeMessage<Variables>(nullptr);
  }

  Variables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variables>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variables& from);
  void MergeFrom(const Variables& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variables* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Variables";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2eproto);
    return ::descriptor_table_system_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string int_names = 2;
  int int_names_size() const;
  void clear_int_names();
  static const int kIntNamesFieldNumber = 2;
  const std::string& int_names(int index) const;
  std::string* mutable_int_names(int index);
  void set_int_names(int index, const std::string& value);
  void set_int_names(int index, std::string&& value);
  void set_int_names(int index, const char* value);
  void set_int_names(int index, const char* value, size_t size);
  std::string* add_int_names();
  void add_int_names(const std::string& value);
  void add_int_names(std::string&& value);
  void add_int_names(const char* value);
  void add_int_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& int_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_int_names();

  // repeated int32 int_values = 3;
  int int_values_size() const;
  void clear_int_values();
  static const int kIntValuesFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 int_values(int index) const;
  void set_int_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int_values(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int_values();

  // repeated string int_descriptions = 4;
  int int_descriptions_size() const;
  void clear_int_descriptions();
  static const int kIntDescriptionsFieldNumber = 4;
  const std::string& int_descriptions(int index) const;
  std::string* mutable_int_descriptions(int index);
  void set_int_descriptions(int index, const std::string& value);
  void set_int_descriptions(int index, std::string&& value);
  void set_int_descriptions(int index, const char* value);
  void set_int_descriptions(int index, const char* value, size_t size);
  std::string* add_int_descriptions();
  void add_int_descriptions(const std::string& value);
  void add_int_descriptions(std::string&& value);
  void add_int_descriptions(const char* value);
  void add_int_descriptions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& int_descriptions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_int_descriptions();

  // repeated string bool_names = 6;
  int bool_names_size() const;
  void clear_bool_names();
  static const int kBoolNamesFieldNumber = 6;
  const std::string& bool_names(int index) const;
  std::string* mutable_bool_names(int index);
  void set_bool_names(int index, const std::string& value);
  void set_bool_names(int index, std::string&& value);
  void set_bool_names(int index, const char* value);
  void set_bool_names(int index, const char* value, size_t size);
  std::string* add_bool_names();
  void add_bool_names(const std::string& value);
  void add_bool_names(std::string&& value);
  void add_bool_names(const char* value);
  void add_bool_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bool_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bool_names();

  // repeated bool bool_values = 7;
  int bool_values_size() const;
  void clear_bool_values();
  static const int kBoolValuesFieldNumber = 7;
  bool bool_values(int index) const;
  void set_bool_values(int index, bool value);
  void add_bool_values(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_values();

  // repeated string bool_descriptions = 8;
  int bool_descriptions_size() const;
  void clear_bool_descriptions();
  static const int kBoolDescriptionsFieldNumber = 8;
  const std::string& bool_descriptions(int index) const;
  std::string* mutable_bool_descriptions(int index);
  void set_bool_descriptions(int index, const std::string& value);
  void set_bool_descriptions(int index, std::string&& value);
  void set_bool_descriptions(int index, const char* value);
  void set_bool_descriptions(int index, const char* value, size_t size);
  std::string* add_bool_descriptions();
  void add_bool_descriptions(const std::string& value);
  void add_bool_descriptions(std::string&& value);
  void add_bool_descriptions(const char* value);
  void add_bool_descriptions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bool_descriptions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bool_descriptions();

  // repeated string double_names = 10;
  int double_names_size() const;
  void clear_double_names();
  static const int kDoubleNamesFieldNumber = 10;
  const std::string& double_names(int index) const;
  std::string* mutable_double_names(int index);
  void set_double_names(int index, const std::string& value);
  void set_double_names(int index, std::string&& value);
  void set_double_names(int index, const char* value);
  void set_double_names(int index, const char* value, size_t size);
  std::string* add_double_names();
  void add_double_names(const std::string& value);
  void add_double_names(std::string&& value);
  void add_double_names(const char* value);
  void add_double_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& double_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_double_names();

  // repeated double double_values = 11;
  int double_values_size() const;
  void clear_double_values();
  static const int kDoubleValuesFieldNumber = 11;
  double double_values(int index) const;
  void set_double_values(int index, double value);
  void add_double_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_values();

  // repeated string double_descriptions = 12;
  int double_descriptions_size() const;
  void clear_double_descriptions();
  static const int kDoubleDescriptionsFieldNumber = 12;
  const std::string& double_descriptions(int index) const;
  std::string* mutable_double_descriptions(int index);
  void set_double_descriptions(int index, const std::string& value);
  void set_double_descriptions(int index, std::string&& value);
  void set_double_descriptions(int index, const char* value);
  void set_double_descriptions(int index, const char* value, size_t size);
  std::string* add_double_descriptions();
  void add_double_descriptions(const std::string& value);
  void add_double_descriptions(std::string&& value);
  void add_double_descriptions(const char* value);
  void add_double_descriptions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& double_descriptions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_double_descriptions();

  // repeated string string_names = 14;
  int string_names_size() const;
  void clear_string_names();
  static const int kStringNamesFieldNumber = 14;
  const std::string& string_names(int index) const;
  std::string* mutable_string_names(int index);
  void set_string_names(int index, const std::string& value);
  void set_string_names(int index, std::string&& value);
  void set_string_names(int index, const char* value);
  void set_string_names(int index, const char* value, size_t size);
  std::string* add_string_names();
  void add_string_names(const std::string& value);
  void add_string_names(std::string&& value);
  void add_string_names(const char* value);
  void add_string_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_names();

  // repeated string string_values = 15;
  int string_values_size() const;
  void clear_string_values();
  static const int kStringValuesFieldNumber = 15;
  const std::string& string_values(int index) const;
  std::string* mutable_string_values(int index);
  void set_string_values(int index, const std::string& value);
  void set_string_values(int index, std::string&& value);
  void set_string_values(int index, const char* value);
  void set_string_values(int index, const char* value, size_t size);
  std::string* add_string_values();
  void add_string_values(const std::string& value);
  void add_string_values(std::string&& value);
  void add_string_values(const char* value);
  void add_string_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_values();

  // repeated string string_descriptions = 16;
  int string_descriptions_size() const;
  void clear_string_descriptions();
  static const int kStringDescriptionsFieldNumber = 16;
  const std::string& string_descriptions(int index) const;
  std::string* mutable_string_descriptions(int index);
  void set_string_descriptions(int index, const std::string& value);
  void set_string_descriptions(int index, std::string&& value);
  void set_string_descriptions(int index, const char* value);
  void set_string_descriptions(int index, const char* value, size_t size);
  std::string* add_string_descriptions();
  void add_string_descriptions(const std::string& value);
  void add_string_descriptions(std::string&& value);
  void add_string_descriptions(const char* value);
  void add_string_descriptions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_descriptions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_descriptions();

  // @@protoc_insertion_point(class_scope:Messages.Variables)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> int_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int_values_;
  mutable std::atomic<int> _int_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> int_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bool_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_values_;
  mutable std::atomic<int> _bool_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bool_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> double_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_values_;
  mutable std::atomic<int> _double_values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> double_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_descriptions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class Function :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Function) */ {
 public:
  Function();
  virtual ~Function();

  Function(const Function& from);
  Function(Function&& from) noexcept
    : Function() {
    *this = ::std::move(from);
  }

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  inline Function& operator=(Function&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Function& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
               &_Function_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Function* other);
  friend void swap(Function& a, Function& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Function* New() const final {
    return CreateMaybeMessage<Function>(nullptr);
  }

  Function* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Function>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Function* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Function";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2eproto);
    return ::descriptor_table_system_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string argument_types = 2;
  int argument_types_size() const;
  void clear_argument_types();
  static const int kArgumentTypesFieldNumber = 2;
  const std::string& argument_types(int index) const;
  std::string* mutable_argument_types(int index);
  void set_argument_types(int index, const std::string& value);
  void set_argument_types(int index, std::string&& value);
  void set_argument_types(int index, const char* value);
  void set_argument_types(int index, const char* value, size_t size);
  std::string* add_argument_types();
  void add_argument_types(const std::string& value);
  void add_argument_types(std::string&& value);
  void add_argument_types(const char* value);
  void add_argument_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& argument_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_argument_types();

  // repeated string argument_descriptions = 3;
  int argument_descriptions_size() const;
  void clear_argument_descriptions();
  static const int kArgumentDescriptionsFieldNumber = 3;
  const std::string& argument_descriptions(int index) const;
  std::string* mutable_argument_descriptions(int index);
  void set_argument_descriptions(int index, const std::string& value);
  void set_argument_descriptions(int index, std::string&& value);
  void set_argument_descriptions(int index, const char* value);
  void set_argument_descriptions(int index, const char* value, size_t size);
  std::string* add_argument_descriptions();
  void add_argument_descriptions(const std::string& value);
  void add_argument_descriptions(std::string&& value);
  void add_argument_descriptions(const char* value);
  void add_argument_descriptions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& argument_descriptions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_argument_descriptions();

  // repeated string inputs = 4;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 4;
  const std::string& inputs(int index) const;
  std::string* mutable_inputs(int index);
  void set_inputs(int index, const std::string& value);
  void set_inputs(int index, std::string&& value);
  void set_inputs(int index, const char* value);
  void set_inputs(int index, const char* value, size_t size);
  std::string* add_inputs();
  void add_inputs(const std::string& value);
  void add_inputs(std::string&& value);
  void add_inputs(const char* value);
  void add_inputs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inputs();

  // repeated string outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 5;
  const std::string& outputs(int index) const;
  std::string* mutable_outputs(int index);
  void set_outputs(int index, const std::string& value);
  void set_outputs(int index, std::string&& value);
  void set_outputs(int index, const char* value);
  void set_outputs(int index, const char* value, size_t size);
  std::string* add_outputs();
  void add_outputs(const std::string& value);
  void add_outputs(std::string&& value);
  void add_outputs(const char* value);
  void add_outputs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& outputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_outputs();

  // repeated string constants = 6;
  int constants_size() const;
  void clear_constants();
  static const int kConstantsFieldNumber = 6;
  const std::string& constants(int index) const;
  std::string* mutable_constants(int index);
  void set_constants(int index, const std::string& value);
  void set_constants(int index, std::string&& value);
  void set_constants(int index, const char* value);
  void set_constants(int index, const char* value, size_t size);
  std::string* add_constants();
  void add_constants(const std::string& value);
  void add_constants(std::string&& value);
  void add_constants(const char* value);
  void add_constants(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& constants() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_constants();

  // repeated string to_be_defined = 7;
  int to_be_defined_size() const;
  void clear_to_be_defined();
  static const int kToBeDefinedFieldNumber = 7;
  const std::string& to_be_defined(int index) const;
  std::string* mutable_to_be_defined(int index);
  void set_to_be_defined(int index, const std::string& value);
  void set_to_be_defined(int index, std::string&& value);
  void set_to_be_defined(int index, const char* value);
  void set_to_be_defined(int index, const char* value, size_t size);
  std::string* add_to_be_defined();
  void add_to_be_defined(const std::string& value);
  void add_to_be_defined(std::string&& value);
  void add_to_be_defined(const char* value);
  void add_to_be_defined(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& to_be_defined() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_to_be_defined();

  // repeated .Messages.Vector64 data = 8;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 8;
  ::Messages::Vector64* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
      mutable_data();
  const ::Messages::Vector64& data(int index) const;
  ::Messages::Vector64* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
      data() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bool cpu_capable = 10;
  void clear_cpu_capable();
  static const int kCpuCapableFieldNumber = 10;
  bool cpu_capable() const;
  void set_cpu_capable(bool value);

  // bool gpu_capable = 11;
  void clear_gpu_capable();
  static const int kGpuCapableFieldNumber = 11;
  bool gpu_capable() const;
  void set_gpu_capable(bool value);

  // bool include_as_preprocessor = 12;
  void clear_include_as_preprocessor();
  static const int kIncludeAsPreprocessorFieldNumber = 12;
  bool include_as_preprocessor() const;
  void set_include_as_preprocessor(bool value);

  // bool omit_from_main_loop = 13;
  void clear_omit_from_main_loop();
  static const int kOmitFromMainLoopFieldNumber = 13;
  bool omit_from_main_loop() const;
  void set_omit_from_main_loop(bool value);

  // bool include_as_postprocessor = 14;
  void clear_include_as_postprocessor();
  static const int kIncludeAsPostprocessorFieldNumber = 14;
  bool include_as_postprocessor() const;
  void set_include_as_postprocessor(bool value);

  // bool mutually_exclusive = 15;
  void clear_mutually_exclusive();
  static const int kMutuallyExclusiveFieldNumber = 15;
  bool mutually_exclusive() const;
  void set_mutually_exclusive(bool value);

  // bool only_once = 16;
  void clear_only_once();
  static const int kOnlyOnceFieldNumber = 16;
  bool only_once() const;
  void set_only_once(bool value);

  // bool push_front = 17;
  void clear_push_front();
  static const int kPushFrontFieldNumber = 17;
  bool push_front() const;
  void set_push_front(bool value);

  // bool dont_flatten = 18;
  void clear_dont_flatten();
  static const int kDontFlattenFieldNumber = 18;
  bool dont_flatten() const;
  void set_dont_flatten(bool value);

  // @@protoc_insertion_point(class_scope:Messages.Function)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> argument_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> argument_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> constants_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> to_be_defined_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool cpu_capable_;
  bool gpu_capable_;
  bool include_as_preprocessor_;
  bool omit_from_main_loop_;
  bool include_as_postprocessor_;
  bool mutually_exclusive_;
  bool only_once_;
  bool push_front_;
  bool dont_flatten_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class Command :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Command* other);
  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Command";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2eproto);
    return ::descriptor_table_system_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Messages.Vector64 data = 12;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 12;
  ::Messages::Vector64* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
      mutable_data();
  const ::Messages::Vector64& data(int index) const;
  ::Messages::Vector64* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
      data() const;

  // repeated .Messages.Command before = 13;
  int before_size() const;
  void clear_before();
  static const int kBeforeFieldNumber = 13;
  ::Messages::Command* mutable_before(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >*
      mutable_before();
  const ::Messages::Command& before(int index) const;
  ::Messages::Command* add_before();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >&
      before() const;

  // repeated .Messages.Command after = 14;
  int after_size() const;
  void clear_after();
  static const int kAfterFieldNumber = 14;
  ::Messages::Command* mutable_after(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >*
      mutable_after();
  const ::Messages::Command& after(int index) const;
  ::Messages::Command* add_after();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >&
      after() const;

  // repeated int32 region_type = 15;
  int region_type_size() const;
  void clear_region_type();
  static const int kRegionTypeFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 region_type(int index) const;
  void set_region_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_region_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      region_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_region_type();

  // repeated int32 region_id = 16;
  int region_id_size() const;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int32 region_id(int index) const;
  void set_region_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      region_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_region_id();

  // repeated string argument_types = 17;
  int argument_types_size() const;
  void clear_argument_types();
  static const int kArgumentTypesFieldNumber = 17;
  const std::string& argument_types(int index) const;
  std::string* mutable_argument_types(int index);
  void set_argument_types(int index, const std::string& value);
  void set_argument_types(int index, std::string&& value);
  void set_argument_types(int index, const char* value);
  void set_argument_types(int index, const char* value, size_t size);
  std::string* add_argument_types();
  void add_argument_types(const std::string& value);
  void add_argument_types(std::string&& value);
  void add_argument_types(const char* value);
  void add_argument_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& argument_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_argument_types();

  // repeated string argument_descriptions = 18;
  int argument_descriptions_size() const;
  void clear_argument_descriptions();
  static const int kArgumentDescriptionsFieldNumber = 18;
  const std::string& argument_descriptions(int index) const;
  std::string* mutable_argument_descriptions(int index);
  void set_argument_descriptions(int index, const std::string& value);
  void set_argument_descriptions(int index, std::string&& value);
  void set_argument_descriptions(int index, const char* value);
  void set_argument_descriptions(int index, const char* value, size_t size);
  std::string* add_argument_descriptions();
  void add_argument_descriptions(const std::string& value);
  void add_argument_descriptions(std::string&& value);
  void add_argument_descriptions(const char* value);
  void add_argument_descriptions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& argument_descriptions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_argument_descriptions();

  // string msg = 10;
  void clear_msg();
  static const int kMsgFieldNumber = 10;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // .Messages.Function function = 1;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::Messages::Function& function() const;
  ::Messages::Function* release_function();
  ::Messages::Function* mutable_function();
  void set_allocated_function(::Messages::Function* function);

  // int64 exec_count = 4;
  void clear_exec_count();
  static const int kExecCountFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 exec_count() const;
  void set_exec_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool args_are_set = 2;
  void clear_args_are_set();
  static const int kArgsAreSetFieldNumber = 2;
  bool args_are_set() const;
  void set_args_are_set(bool value);

  // bool kernel_ready = 3;
  void clear_kernel_ready();
  static const int kKernelReadyFieldNumber = 3;
  bool kernel_ready() const;
  void set_kernel_ready(bool value);

  // float progress = 9;
  void clear_progress();
  static const int kProgressFieldNumber = 9;
  float progress() const;
  void set_progress(float value);

  // int64 effective_size = 5;
  void clear_effective_size();
  static const int kEffectiveSizeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 effective_size() const;
  void set_effective_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 version = 6;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 id = 7;
  void clear_id();
  static const int kIdFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 n_kernel = 8;
  void clear_n_kernel();
  static const int kNKernelFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 n_kernel() const;
  void set_n_kernel(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Messages.Command)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command > before_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command > after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > region_type_;
  mutable std::atomic<int> _region_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > region_id_;
  mutable std::atomic<int> _region_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> argument_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> argument_descriptions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::Messages::Function* function_;
  ::PROTOBUF_NAMESPACE_ID::int64 exec_count_;
  bool args_are_set_;
  bool kernel_ready_;
  float progress_;
  ::PROTOBUF_NAMESPACE_ID::int64 effective_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 n_kernel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class Script :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Script) */ {
 public:
  Script();
  virtual ~Script();

  Script(const Script& from);
  Script(Script&& from) noexcept
    : Script() {
    *this = ::std::move(from);
  }

  inline Script& operator=(const Script& from) {
    CopyFrom(from);
    return *this;
  }
  inline Script& operator=(Script&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Script& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Script* internal_default_instance() {
    return reinterpret_cast<const Script*>(
               &_Script_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Script* other);
  friend void swap(Script& a, Script& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Script* New() const final {
    return CreateMaybeMessage<Script>(nullptr);
  }

  Script* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Script>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Script& from);
  void MergeFrom(const Script& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Script* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Script";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2eproto);
    return ::descriptor_table_system_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Messages.Command sequence = 12;
  int sequence_size() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 12;
  ::Messages::Command* mutable_sequence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >*
      mutable_sequence();
  const ::Messages::Command& sequence(int index) const;
  ::Messages::Command* add_sequence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >&
      sequence() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // string source_code = 3;
  void clear_source_code();
  static const int kSourceCodeFieldNumber = 3;
  const std::string& source_code() const;
  void set_source_code(const std::string& value);
  void set_source_code(std::string&& value);
  void set_source_code(const char* value);
  void set_source_code(const char* value, size_t size);
  std::string* mutable_source_code();
  std::string* release_source_code();
  void set_allocated_source_code(std::string* source_code);

  // .Messages.Variables variables = 10;
  bool has_variables() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 10;
  const ::Messages::Variables& variables() const;
  ::Messages::Variables* release_variables();
  ::Messages::Variables* mutable_variables();
  void set_allocated_variables(::Messages::Variables* variables);

  // .Messages.Script before = 14;
  bool has_before() const;
  void clear_before();
  static const int kBeforeFieldNumber = 14;
  const ::Messages::Script& before() const;
  ::Messages::Script* release_before();
  ::Messages::Script* mutable_before();
  void set_allocated_before(::Messages::Script* before);

  // .Messages.Script after = 15;
  bool has_after() const;
  void clear_after();
  static const int kAfterFieldNumber = 15;
  const ::Messages::Script& after() const;
  ::Messages::Script* release_after();
  ::Messages::Script* mutable_after();
  void set_allocated_after(::Messages::Script* after);

  // int64 uid = 4;
  void clear_uid();
  static const int kUidFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 device = 5;
  void clear_device();
  static const int kDeviceFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 device() const;
  void set_device(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 order = 7;
  void clear_order();
  static const int kOrderFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float progress = 8;
  void clear_progress();
  static const int kProgressFieldNumber = 8;
  float progress() const;
  void set_progress(float value);

  // @@protoc_insertion_point(class_scope:Messages.Script)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command > sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_code_;
  ::Messages::Variables* variables_;
  ::Messages::Script* before_;
  ::Messages::Script* after_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  float progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class Rule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Rule) */ {
 public:
  Rule();
  virtual ~Rule();

  Rule(const Rule& from);
  Rule(Rule&& from) noexcept
    : Rule() {
    *this = ::std::move(from);
  }

  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
               &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Rule* other);
  friend void swap(Rule& a, Rule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rule* New() const final {
    return CreateMaybeMessage<Rule>(nullptr);
  }

  Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rule& from);
  void MergeFrom(const Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Rule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2eproto);
    return ::descriptor_table_system_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string algorithms = 2;
  int algorithms_size() const;
  void clear_algorithms();
  static const int kAlgorithmsFieldNumber = 2;
  const std::string& algorithms(int index) const;
  std::string* mutable_algorithms(int index);
  void set_algorithms(int index, const std::string& value);
  void set_algorithms(int index, std::string&& value);
  void set_algorithms(int index, const char* value);
  void set_algorithms(int index, const char* value, size_t size);
  std::string* add_algorithms();
  void add_algorithms(const std::string& value);
  void add_algorithms(std::string&& value);
  void add_algorithms(const char* value);
  void add_algorithms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& algorithms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_algorithms();

  // repeated int32 priority = 3;
  int priority_size() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 priority(int index) const;
  void set_priority(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      priority() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_priority();

  // string pk = 1;
  void clear_pk();
  static const int kPkFieldNumber = 1;
  const std::string& pk() const;
  void set_pk(const std::string& value);
  void set_pk(std::string&& value);
  void set_pk(const char* value);
  void set_pk(const char* value, size_t size);
  std::string* mutable_pk();
  std::string* release_pk();
  void set_allocated_pk(std::string* pk);

  // @@protoc_insertion_point(class_scope:Messages.Rule)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> algorithms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > priority_;
  mutable std::atomic<int> _priority_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class Model :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Model* other);
  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const final {
    return CreateMaybeMessage<Model>(nullptr);
  }

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.Model";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2eproto);
    return ::descriptor_table_system_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dofs = 3;
  int dofs_size() const;
  void clear_dofs();
  static const int kDofsFieldNumber = 3;
  const std::string& dofs(int index) const;
  std::string* mutable_dofs(int index);
  void set_dofs(int index, const std::string& value);
  void set_dofs(int index, std::string&& value);
  void set_dofs(int index, const char* value);
  void set_dofs(int index, const char* value, size_t size);
  std::string* add_dofs();
  void add_dofs(const std::string& value);
  void add_dofs(std::string&& value);
  void add_dofs(const char* value);
  void add_dofs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dofs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dofs();

  // repeated string algorithms = 4;
  int algorithms_size() const;
  void clear_algorithms();
  static const int kAlgorithmsFieldNumber = 4;
  const std::string& algorithms(int index) const;
  std::string* mutable_algorithms(int index);
  void set_algorithms(int index, const std::string& value);
  void set_algorithms(int index, std::string&& value);
  void set_algorithms(int index, const char* value);
  void set_algorithms(int index, const char* value, size_t size);
  std::string* add_algorithms();
  void add_algorithms(const std::string& value);
  void add_algorithms(std::string&& value);
  void add_algorithms(const char* value);
  void add_algorithms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& algorithms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_algorithms();

  // repeated string available_outputs = 5;
  int available_outputs_size() const;
  void clear_available_outputs();
  static const int kAvailableOutputsFieldNumber = 5;
  const std::string& available_outputs(int index) const;
  std::string* mutable_available_outputs(int index);
  void set_available_outputs(int index, const std::string& value);
  void set_available_outputs(int index, std::string&& value);
  void set_available_outputs(int index, const char* value);
  void set_available_outputs(int index, const char* value, size_t size);
  std::string* add_available_outputs();
  void add_available_outputs(const std::string& value);
  void add_available_outputs(std::string&& value);
  void add_available_outputs(const char* value);
  void add_available_outputs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& available_outputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_available_outputs();

  // repeated string extra_properties = 6;
  int extra_properties_size() const;
  void clear_extra_properties();
  static const int kExtraPropertiesFieldNumber = 6;
  const std::string& extra_properties(int index) const;
  std::string* mutable_extra_properties(int index);
  void set_extra_properties(int index, const std::string& value);
  void set_extra_properties(int index, std::string&& value);
  void set_extra_properties(int index, const char* value);
  void set_extra_properties(int index, const char* value, size_t size);
  std::string* add_extra_properties();
  void add_extra_properties(const std::string& value);
  void add_extra_properties(std::string&& value);
  void add_extra_properties(const char* value);
  void add_extra_properties(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& extra_properties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_extra_properties();

  // repeated string compatible_conditions = 7;
  int compatible_conditions_size() const;
  void clear_compatible_conditions();
  static const int kCompatibleConditionsFieldNumber = 7;
  const std::string& compatible_conditions(int index) const;
  std::string* mutable_compatible_conditions(int index);
  void set_compatible_conditions(int index, const std::string& value);
  void set_compatible_conditions(int index, std::string&& value);
  void set_compatible_conditions(int index, const char* value);
  void set_compatible_conditions(int index, const char* value, size_t size);
  std::string* add_compatible_conditions();
  void add_compatible_conditions(const std::string& value);
  void add_compatible_conditions(std::string&& value);
  void add_compatible_conditions(const char* value);
  void add_compatible_conditions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& compatible_conditions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_compatible_conditions();

  // repeated string compatible_scripts = 8;
  int compatible_scripts_size() const;
  void clear_compatible_scripts();
  static const int kCompatibleScriptsFieldNumber = 8;
  const std::string& compatible_scripts(int index) const;
  std::string* mutable_compatible_scripts(int index);
  void set_compatible_scripts(int index, const std::string& value);
  void set_compatible_scripts(int index, std::string&& value);
  void set_compatible_scripts(int index, const char* value);
  void set_compatible_scripts(int index, const char* value, size_t size);
  std::string* add_compatible_scripts();
  void add_compatible_scripts(const std::string& value);
  void add_compatible_scripts(std::string&& value);
  void add_compatible_scripts(const char* value);
  void add_compatible_scripts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& compatible_scripts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_compatible_scripts();

  // repeated .Messages.Model sub_models = 9;
  int sub_models_size() const;
  void clear_sub_models();
  static const int kSubModelsFieldNumber = 9;
  ::Messages::Model* mutable_sub_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model >*
      mutable_sub_models();
  const ::Messages::Model& sub_models(int index) const;
  ::Messages::Model* add_sub_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model >&
      sub_models() const;

  // repeated .Messages.Vector64 data = 10;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 10;
  ::Messages::Vector64* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
      mutable_data();
  const ::Messages::Vector64& data(int index) const;
  ::Messages::Vector64* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
      data() const;

  // repeated .Messages.Rule rules = 11;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 11;
  ::Messages::Rule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule >*
      mutable_rules();
  const ::Messages::Rule& rules(int index) const;
  ::Messages::Rule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule >&
      rules() const;

  // repeated .Messages.Rule mutex_stack = 12;
  int mutex_stack_size() const;
  void clear_mutex_stack();
  static const int kMutexStackFieldNumber = 12;
  ::Messages::Rule* mutable_mutex_stack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule >*
      mutable_mutex_stack();
  const ::Messages::Rule& mutex_stack(int index) const;
  ::Messages::Rule* add_mutex_stack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule >&
      mutex_stack() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:Messages.Model)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dofs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> algorithms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> available_outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> extra_properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> compatible_conditions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> compatible_scripts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model > sub_models_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule > rules_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule > mutex_stack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2eproto;
};
// -------------------------------------------------------------------

class System :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Messages.System) */ {
 public:
  System();
  virtual ~System();

  System(const System& from);
  System(System&& from) noexcept
    : System() {
    *this = ::std::move(from);
  }

  inline System& operator=(const System& from) {
    CopyFrom(from);
    return *this;
  }
  inline System& operator=(System&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const System& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const System* internal_default_instance() {
    return reinterpret_cast<const System*>(
               &_System_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(System* other);
  friend void swap(System& a, System& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline System* New() const final {
    return CreateMaybeMessage<System>(nullptr);
  }

  System* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<System>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const System& from);
  void MergeFrom(const System& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(System* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Messages.System";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_system_2eproto);
    return ::descriptor_table_system_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Messages.Model models = 10;
  int models_size() const;
  void clear_models();
  static const int kModelsFieldNumber = 10;
  ::Messages::Model* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model >*
      mutable_models();
  const ::Messages::Model& models(int index) const;
  ::Messages::Model* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model >&
      models() const;

  // repeated .Messages.Vector64 constants = 11;
  int constants_size() const;
  void clear_constants();
  static const int kConstantsFieldNumber = 11;
  ::Messages::Vector64* mutable_constants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
      mutable_constants();
  const ::Messages::Vector64& constants(int index) const;
  ::Messages::Vector64* add_constants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
      constants() const;

  // repeated .Messages.Command conditions = 12;
  int conditions_size() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 12;
  ::Messages::Command* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >*
      mutable_conditions();
  const ::Messages::Command& conditions(int index) const;
  ::Messages::Command* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >&
      conditions() const;

  // repeated string children = 13;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 13;
  const std::string& children(int index) const;
  std::string* mutable_children(int index);
  void set_children(int index, const std::string& value);
  void set_children(int index, std::string&& value);
  void set_children(int index, const char* value);
  void set_children(int index, const char* value, size_t size);
  std::string* add_children();
  void add_children(const std::string& value);
  void add_children(std::string&& value);
  void add_children(const char* value);
  void add_children(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_children();

  // repeated string references = 14;
  int references_size() const;
  void clear_references();
  static const int kReferencesFieldNumber = 14;
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const char* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();

  // repeated string attachments = 15;
  int attachments_size() const;
  void clear_attachments();
  static const int kAttachmentsFieldNumber = 15;
  const std::string& attachments(int index) const;
  std::string* mutable_attachments(int index);
  void set_attachments(int index, const std::string& value);
  void set_attachments(int index, std::string&& value);
  void set_attachments(int index, const char* value);
  void set_attachments(int index, const char* value, size_t size);
  std::string* add_attachments();
  void add_attachments(const std::string& value);
  void add_attachments(std::string&& value);
  void add_attachments(const char* value);
  void add_attachments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attachments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attachments();

  // string geometry = 8;
  void clear_geometry();
  static const int kGeometryFieldNumber = 8;
  const std::string& geometry() const;
  void set_geometry(const std::string& value);
  void set_geometry(std::string&& value);
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  std::string* mutable_geometry();
  std::string* release_geometry();
  void set_allocated_geometry(std::string* geometry);

  // .Messages.Meta meta = 1;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 1;
  const ::Messages::Meta& meta() const;
  ::Messages::Meta* release_meta();
  ::Messages::Meta* mutable_meta();
  void set_allocated_meta(::Messages::Meta* meta);

  // .Messages.Script script = 2;
  bool has_script() const;
  void clear_script();
  static const int kScriptFieldNumber = 2;
  const ::Messages::Script& script() const;
  ::Messages::Script* release_script();
  ::Messages::Script* mutable_script();
  void set_allocated_script(::Messages::Script* script);

  // @@protoc_insertion_point(class_scope:Messages.System)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model > models_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 > constants_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command > conditions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> children_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attachments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geometry_;
  ::Messages::Meta* meta_;
  ::Messages::Script* script_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_system_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variables

// repeated string int_names = 2;
inline int Variables::int_names_size() const {
  return int_names_.size();
}
inline void Variables::clear_int_names() {
  int_names_.Clear();
}
inline const std::string& Variables::int_names(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.int_names)
  return int_names_.Get(index);
}
inline std::string* Variables::mutable_int_names(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.int_names)
  return int_names_.Mutable(index);
}
inline void Variables::set_int_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.int_names)
  int_names_.Mutable(index)->assign(value);
}
inline void Variables::set_int_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.int_names)
  int_names_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_int_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  int_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.int_names)
}
inline void Variables::set_int_names(int index, const char* value, size_t size) {
  int_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.int_names)
}
inline std::string* Variables::add_int_names() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.int_names)
  return int_names_.Add();
}
inline void Variables::add_int_names(const std::string& value) {
  int_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.int_names)
}
inline void Variables::add_int_names(std::string&& value) {
  int_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.int_names)
}
inline void Variables::add_int_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  int_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.int_names)
}
inline void Variables::add_int_names(const char* value, size_t size) {
  int_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.int_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::int_names() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.int_names)
  return int_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_int_names() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.int_names)
  return &int_names_;
}

// repeated int32 int_values = 3;
inline int Variables::int_values_size() const {
  return int_values_.size();
}
inline void Variables::clear_int_values() {
  int_values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Variables::int_values(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.int_values)
  return int_values_.Get(index);
}
inline void Variables::set_int_values(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Variables.int_values)
}
inline void Variables::add_int_values(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_values_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.int_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Variables::int_values() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.int_values)
  return int_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Variables::mutable_int_values() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.int_values)
  return &int_values_;
}

// repeated string int_descriptions = 4;
inline int Variables::int_descriptions_size() const {
  return int_descriptions_.size();
}
inline void Variables::clear_int_descriptions() {
  int_descriptions_.Clear();
}
inline const std::string& Variables::int_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.int_descriptions)
  return int_descriptions_.Get(index);
}
inline std::string* Variables::mutable_int_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.int_descriptions)
  return int_descriptions_.Mutable(index);
}
inline void Variables::set_int_descriptions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.int_descriptions)
  int_descriptions_.Mutable(index)->assign(value);
}
inline void Variables::set_int_descriptions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.int_descriptions)
  int_descriptions_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_int_descriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  int_descriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.int_descriptions)
}
inline void Variables::set_int_descriptions(int index, const char* value, size_t size) {
  int_descriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.int_descriptions)
}
inline std::string* Variables::add_int_descriptions() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.int_descriptions)
  return int_descriptions_.Add();
}
inline void Variables::add_int_descriptions(const std::string& value) {
  int_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.int_descriptions)
}
inline void Variables::add_int_descriptions(std::string&& value) {
  int_descriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.int_descriptions)
}
inline void Variables::add_int_descriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  int_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.int_descriptions)
}
inline void Variables::add_int_descriptions(const char* value, size_t size) {
  int_descriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.int_descriptions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::int_descriptions() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.int_descriptions)
  return int_descriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_int_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.int_descriptions)
  return &int_descriptions_;
}

// repeated string bool_names = 6;
inline int Variables::bool_names_size() const {
  return bool_names_.size();
}
inline void Variables::clear_bool_names() {
  bool_names_.Clear();
}
inline const std::string& Variables::bool_names(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.bool_names)
  return bool_names_.Get(index);
}
inline std::string* Variables::mutable_bool_names(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.bool_names)
  return bool_names_.Mutable(index);
}
inline void Variables::set_bool_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.bool_names)
  bool_names_.Mutable(index)->assign(value);
}
inline void Variables::set_bool_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.bool_names)
  bool_names_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_bool_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bool_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.bool_names)
}
inline void Variables::set_bool_names(int index, const char* value, size_t size) {
  bool_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.bool_names)
}
inline std::string* Variables::add_bool_names() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.bool_names)
  return bool_names_.Add();
}
inline void Variables::add_bool_names(const std::string& value) {
  bool_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.bool_names)
}
inline void Variables::add_bool_names(std::string&& value) {
  bool_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.bool_names)
}
inline void Variables::add_bool_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bool_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.bool_names)
}
inline void Variables::add_bool_names(const char* value, size_t size) {
  bool_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.bool_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::bool_names() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.bool_names)
  return bool_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_bool_names() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.bool_names)
  return &bool_names_;
}

// repeated bool bool_values = 7;
inline int Variables::bool_values_size() const {
  return bool_values_.size();
}
inline void Variables::clear_bool_values() {
  bool_values_.Clear();
}
inline bool Variables::bool_values(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.bool_values)
  return bool_values_.Get(index);
}
inline void Variables::set_bool_values(int index, bool value) {
  bool_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Variables.bool_values)
}
inline void Variables::add_bool_values(bool value) {
  bool_values_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.bool_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Variables::bool_values() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.bool_values)
  return bool_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Variables::mutable_bool_values() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.bool_values)
  return &bool_values_;
}

// repeated string bool_descriptions = 8;
inline int Variables::bool_descriptions_size() const {
  return bool_descriptions_.size();
}
inline void Variables::clear_bool_descriptions() {
  bool_descriptions_.Clear();
}
inline const std::string& Variables::bool_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.bool_descriptions)
  return bool_descriptions_.Get(index);
}
inline std::string* Variables::mutable_bool_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.bool_descriptions)
  return bool_descriptions_.Mutable(index);
}
inline void Variables::set_bool_descriptions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.bool_descriptions)
  bool_descriptions_.Mutable(index)->assign(value);
}
inline void Variables::set_bool_descriptions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.bool_descriptions)
  bool_descriptions_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_bool_descriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bool_descriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.bool_descriptions)
}
inline void Variables::set_bool_descriptions(int index, const char* value, size_t size) {
  bool_descriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.bool_descriptions)
}
inline std::string* Variables::add_bool_descriptions() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.bool_descriptions)
  return bool_descriptions_.Add();
}
inline void Variables::add_bool_descriptions(const std::string& value) {
  bool_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.bool_descriptions)
}
inline void Variables::add_bool_descriptions(std::string&& value) {
  bool_descriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.bool_descriptions)
}
inline void Variables::add_bool_descriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bool_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.bool_descriptions)
}
inline void Variables::add_bool_descriptions(const char* value, size_t size) {
  bool_descriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.bool_descriptions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::bool_descriptions() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.bool_descriptions)
  return bool_descriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_bool_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.bool_descriptions)
  return &bool_descriptions_;
}

// repeated string double_names = 10;
inline int Variables::double_names_size() const {
  return double_names_.size();
}
inline void Variables::clear_double_names() {
  double_names_.Clear();
}
inline const std::string& Variables::double_names(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.double_names)
  return double_names_.Get(index);
}
inline std::string* Variables::mutable_double_names(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.double_names)
  return double_names_.Mutable(index);
}
inline void Variables::set_double_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.double_names)
  double_names_.Mutable(index)->assign(value);
}
inline void Variables::set_double_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.double_names)
  double_names_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_double_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  double_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.double_names)
}
inline void Variables::set_double_names(int index, const char* value, size_t size) {
  double_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.double_names)
}
inline std::string* Variables::add_double_names() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.double_names)
  return double_names_.Add();
}
inline void Variables::add_double_names(const std::string& value) {
  double_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.double_names)
}
inline void Variables::add_double_names(std::string&& value) {
  double_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.double_names)
}
inline void Variables::add_double_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  double_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.double_names)
}
inline void Variables::add_double_names(const char* value, size_t size) {
  double_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.double_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::double_names() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.double_names)
  return double_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_double_names() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.double_names)
  return &double_names_;
}

// repeated double double_values = 11;
inline int Variables::double_values_size() const {
  return double_values_.size();
}
inline void Variables::clear_double_values() {
  double_values_.Clear();
}
inline double Variables::double_values(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.double_values)
  return double_values_.Get(index);
}
inline void Variables::set_double_values(int index, double value) {
  double_values_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Variables.double_values)
}
inline void Variables::add_double_values(double value) {
  double_values_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.double_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Variables::double_values() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.double_values)
  return double_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Variables::mutable_double_values() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.double_values)
  return &double_values_;
}

// repeated string double_descriptions = 12;
inline int Variables::double_descriptions_size() const {
  return double_descriptions_.size();
}
inline void Variables::clear_double_descriptions() {
  double_descriptions_.Clear();
}
inline const std::string& Variables::double_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.double_descriptions)
  return double_descriptions_.Get(index);
}
inline std::string* Variables::mutable_double_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.double_descriptions)
  return double_descriptions_.Mutable(index);
}
inline void Variables::set_double_descriptions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.double_descriptions)
  double_descriptions_.Mutable(index)->assign(value);
}
inline void Variables::set_double_descriptions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.double_descriptions)
  double_descriptions_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_double_descriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  double_descriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.double_descriptions)
}
inline void Variables::set_double_descriptions(int index, const char* value, size_t size) {
  double_descriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.double_descriptions)
}
inline std::string* Variables::add_double_descriptions() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.double_descriptions)
  return double_descriptions_.Add();
}
inline void Variables::add_double_descriptions(const std::string& value) {
  double_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.double_descriptions)
}
inline void Variables::add_double_descriptions(std::string&& value) {
  double_descriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.double_descriptions)
}
inline void Variables::add_double_descriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  double_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.double_descriptions)
}
inline void Variables::add_double_descriptions(const char* value, size_t size) {
  double_descriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.double_descriptions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::double_descriptions() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.double_descriptions)
  return double_descriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_double_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.double_descriptions)
  return &double_descriptions_;
}

// repeated string string_names = 14;
inline int Variables::string_names_size() const {
  return string_names_.size();
}
inline void Variables::clear_string_names() {
  string_names_.Clear();
}
inline const std::string& Variables::string_names(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.string_names)
  return string_names_.Get(index);
}
inline std::string* Variables::mutable_string_names(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.string_names)
  return string_names_.Mutable(index);
}
inline void Variables::set_string_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.string_names)
  string_names_.Mutable(index)->assign(value);
}
inline void Variables::set_string_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.string_names)
  string_names_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_string_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.string_names)
}
inline void Variables::set_string_names(int index, const char* value, size_t size) {
  string_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.string_names)
}
inline std::string* Variables::add_string_names() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.string_names)
  return string_names_.Add();
}
inline void Variables::add_string_names(const std::string& value) {
  string_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.string_names)
}
inline void Variables::add_string_names(std::string&& value) {
  string_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.string_names)
}
inline void Variables::add_string_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.string_names)
}
inline void Variables::add_string_names(const char* value, size_t size) {
  string_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.string_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::string_names() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.string_names)
  return string_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_string_names() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.string_names)
  return &string_names_;
}

// repeated string string_values = 15;
inline int Variables::string_values_size() const {
  return string_values_.size();
}
inline void Variables::clear_string_values() {
  string_values_.Clear();
}
inline const std::string& Variables::string_values(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.string_values)
  return string_values_.Get(index);
}
inline std::string* Variables::mutable_string_values(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.string_values)
  return string_values_.Mutable(index);
}
inline void Variables::set_string_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.string_values)
  string_values_.Mutable(index)->assign(value);
}
inline void Variables::set_string_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.string_values)
  string_values_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_string_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.string_values)
}
inline void Variables::set_string_values(int index, const char* value, size_t size) {
  string_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.string_values)
}
inline std::string* Variables::add_string_values() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.string_values)
  return string_values_.Add();
}
inline void Variables::add_string_values(const std::string& value) {
  string_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.string_values)
}
inline void Variables::add_string_values(std::string&& value) {
  string_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.string_values)
}
inline void Variables::add_string_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.string_values)
}
inline void Variables::add_string_values(const char* value, size_t size) {
  string_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.string_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::string_values() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.string_values)
  return string_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_string_values() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.string_values)
  return &string_values_;
}

// repeated string string_descriptions = 16;
inline int Variables::string_descriptions_size() const {
  return string_descriptions_.size();
}
inline void Variables::clear_string_descriptions() {
  string_descriptions_.Clear();
}
inline const std::string& Variables::string_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Variables.string_descriptions)
  return string_descriptions_.Get(index);
}
inline std::string* Variables::mutable_string_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Variables.string_descriptions)
  return string_descriptions_.Mutable(index);
}
inline void Variables::set_string_descriptions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.string_descriptions)
  string_descriptions_.Mutable(index)->assign(value);
}
inline void Variables::set_string_descriptions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Variables.string_descriptions)
  string_descriptions_.Mutable(index)->assign(std::move(value));
}
inline void Variables::set_string_descriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_descriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Variables.string_descriptions)
}
inline void Variables::set_string_descriptions(int index, const char* value, size_t size) {
  string_descriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Variables.string_descriptions)
}
inline std::string* Variables::add_string_descriptions() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Variables.string_descriptions)
  return string_descriptions_.Add();
}
inline void Variables::add_string_descriptions(const std::string& value) {
  string_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Variables.string_descriptions)
}
inline void Variables::add_string_descriptions(std::string&& value) {
  string_descriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Variables.string_descriptions)
}
inline void Variables::add_string_descriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Variables.string_descriptions)
}
inline void Variables::add_string_descriptions(const char* value, size_t size) {
  string_descriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Variables.string_descriptions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variables::string_descriptions() const {
  // @@protoc_insertion_point(field_list:Messages.Variables.string_descriptions)
  return string_descriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variables::mutable_string_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Variables.string_descriptions)
  return &string_descriptions_;
}

// -------------------------------------------------------------------

// Function

// string name = 1;
inline void Function::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Function::name() const {
  // @@protoc_insertion_point(field_get:Messages.Function.name)
  return name_.GetNoArena();
}
inline void Function::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Function.name)
}
inline void Function::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Function.name)
}
inline void Function::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Function.name)
}
inline void Function::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Function.name)
}
inline std::string* Function::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Function.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Function::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Function.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Function::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Messages.Function.name)
}

// repeated string argument_types = 2;
inline int Function::argument_types_size() const {
  return argument_types_.size();
}
inline void Function::clear_argument_types() {
  argument_types_.Clear();
}
inline const std::string& Function::argument_types(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Function.argument_types)
  return argument_types_.Get(index);
}
inline std::string* Function::mutable_argument_types(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Function.argument_types)
  return argument_types_.Mutable(index);
}
inline void Function::set_argument_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.argument_types)
  argument_types_.Mutable(index)->assign(value);
}
inline void Function::set_argument_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.argument_types)
  argument_types_.Mutable(index)->assign(std::move(value));
}
inline void Function::set_argument_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argument_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Function.argument_types)
}
inline void Function::set_argument_types(int index, const char* value, size_t size) {
  argument_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Function.argument_types)
}
inline std::string* Function::add_argument_types() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Function.argument_types)
  return argument_types_.Add();
}
inline void Function::add_argument_types(const std::string& value) {
  argument_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Function.argument_types)
}
inline void Function::add_argument_types(std::string&& value) {
  argument_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Function.argument_types)
}
inline void Function::add_argument_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argument_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Function.argument_types)
}
inline void Function::add_argument_types(const char* value, size_t size) {
  argument_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Function.argument_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Function::argument_types() const {
  // @@protoc_insertion_point(field_list:Messages.Function.argument_types)
  return argument_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Function::mutable_argument_types() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Function.argument_types)
  return &argument_types_;
}

// repeated string argument_descriptions = 3;
inline int Function::argument_descriptions_size() const {
  return argument_descriptions_.size();
}
inline void Function::clear_argument_descriptions() {
  argument_descriptions_.Clear();
}
inline const std::string& Function::argument_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Function.argument_descriptions)
  return argument_descriptions_.Get(index);
}
inline std::string* Function::mutable_argument_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Function.argument_descriptions)
  return argument_descriptions_.Mutable(index);
}
inline void Function::set_argument_descriptions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.argument_descriptions)
  argument_descriptions_.Mutable(index)->assign(value);
}
inline void Function::set_argument_descriptions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.argument_descriptions)
  argument_descriptions_.Mutable(index)->assign(std::move(value));
}
inline void Function::set_argument_descriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argument_descriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Function.argument_descriptions)
}
inline void Function::set_argument_descriptions(int index, const char* value, size_t size) {
  argument_descriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Function.argument_descriptions)
}
inline std::string* Function::add_argument_descriptions() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Function.argument_descriptions)
  return argument_descriptions_.Add();
}
inline void Function::add_argument_descriptions(const std::string& value) {
  argument_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Function.argument_descriptions)
}
inline void Function::add_argument_descriptions(std::string&& value) {
  argument_descriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Function.argument_descriptions)
}
inline void Function::add_argument_descriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argument_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Function.argument_descriptions)
}
inline void Function::add_argument_descriptions(const char* value, size_t size) {
  argument_descriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Function.argument_descriptions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Function::argument_descriptions() const {
  // @@protoc_insertion_point(field_list:Messages.Function.argument_descriptions)
  return argument_descriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Function::mutable_argument_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Function.argument_descriptions)
  return &argument_descriptions_;
}

// repeated string inputs = 4;
inline int Function::inputs_size() const {
  return inputs_.size();
}
inline void Function::clear_inputs() {
  inputs_.Clear();
}
inline const std::string& Function::inputs(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Function.inputs)
  return inputs_.Get(index);
}
inline std::string* Function::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Function.inputs)
  return inputs_.Mutable(index);
}
inline void Function::set_inputs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.inputs)
  inputs_.Mutable(index)->assign(value);
}
inline void Function::set_inputs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.inputs)
  inputs_.Mutable(index)->assign(std::move(value));
}
inline void Function::set_inputs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Function.inputs)
}
inline void Function::set_inputs(int index, const char* value, size_t size) {
  inputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Function.inputs)
}
inline std::string* Function::add_inputs() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Function.inputs)
  return inputs_.Add();
}
inline void Function::add_inputs(const std::string& value) {
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Function.inputs)
}
inline void Function::add_inputs(std::string&& value) {
  inputs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Function.inputs)
}
inline void Function::add_inputs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Function.inputs)
}
inline void Function::add_inputs(const char* value, size_t size) {
  inputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Function.inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Function::inputs() const {
  // @@protoc_insertion_point(field_list:Messages.Function.inputs)
  return inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Function::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Function.inputs)
  return &inputs_;
}

// repeated string outputs = 5;
inline int Function::outputs_size() const {
  return outputs_.size();
}
inline void Function::clear_outputs() {
  outputs_.Clear();
}
inline const std::string& Function::outputs(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Function.outputs)
  return outputs_.Get(index);
}
inline std::string* Function::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Function.outputs)
  return outputs_.Mutable(index);
}
inline void Function::set_outputs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.outputs)
  outputs_.Mutable(index)->assign(value);
}
inline void Function::set_outputs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.outputs)
  outputs_.Mutable(index)->assign(std::move(value));
}
inline void Function::set_outputs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Function.outputs)
}
inline void Function::set_outputs(int index, const char* value, size_t size) {
  outputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Function.outputs)
}
inline std::string* Function::add_outputs() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Function.outputs)
  return outputs_.Add();
}
inline void Function::add_outputs(const std::string& value) {
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Function.outputs)
}
inline void Function::add_outputs(std::string&& value) {
  outputs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Function.outputs)
}
inline void Function::add_outputs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Function.outputs)
}
inline void Function::add_outputs(const char* value, size_t size) {
  outputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Function.outputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Function::outputs() const {
  // @@protoc_insertion_point(field_list:Messages.Function.outputs)
  return outputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Function::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Function.outputs)
  return &outputs_;
}

// repeated string constants = 6;
inline int Function::constants_size() const {
  return constants_.size();
}
inline void Function::clear_constants() {
  constants_.Clear();
}
inline const std::string& Function::constants(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Function.constants)
  return constants_.Get(index);
}
inline std::string* Function::mutable_constants(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Function.constants)
  return constants_.Mutable(index);
}
inline void Function::set_constants(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.constants)
  constants_.Mutable(index)->assign(value);
}
inline void Function::set_constants(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.constants)
  constants_.Mutable(index)->assign(std::move(value));
}
inline void Function::set_constants(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  constants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Function.constants)
}
inline void Function::set_constants(int index, const char* value, size_t size) {
  constants_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Function.constants)
}
inline std::string* Function::add_constants() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Function.constants)
  return constants_.Add();
}
inline void Function::add_constants(const std::string& value) {
  constants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Function.constants)
}
inline void Function::add_constants(std::string&& value) {
  constants_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Function.constants)
}
inline void Function::add_constants(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  constants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Function.constants)
}
inline void Function::add_constants(const char* value, size_t size) {
  constants_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Function.constants)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Function::constants() const {
  // @@protoc_insertion_point(field_list:Messages.Function.constants)
  return constants_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Function::mutable_constants() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Function.constants)
  return &constants_;
}

// repeated string to_be_defined = 7;
inline int Function::to_be_defined_size() const {
  return to_be_defined_.size();
}
inline void Function::clear_to_be_defined() {
  to_be_defined_.Clear();
}
inline const std::string& Function::to_be_defined(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Function.to_be_defined)
  return to_be_defined_.Get(index);
}
inline std::string* Function::mutable_to_be_defined(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Function.to_be_defined)
  return to_be_defined_.Mutable(index);
}
inline void Function::set_to_be_defined(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.to_be_defined)
  to_be_defined_.Mutable(index)->assign(value);
}
inline void Function::set_to_be_defined(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Function.to_be_defined)
  to_be_defined_.Mutable(index)->assign(std::move(value));
}
inline void Function::set_to_be_defined(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_be_defined_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Function.to_be_defined)
}
inline void Function::set_to_be_defined(int index, const char* value, size_t size) {
  to_be_defined_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Function.to_be_defined)
}
inline std::string* Function::add_to_be_defined() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Function.to_be_defined)
  return to_be_defined_.Add();
}
inline void Function::add_to_be_defined(const std::string& value) {
  to_be_defined_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Function.to_be_defined)
}
inline void Function::add_to_be_defined(std::string&& value) {
  to_be_defined_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Function.to_be_defined)
}
inline void Function::add_to_be_defined(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  to_be_defined_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Function.to_be_defined)
}
inline void Function::add_to_be_defined(const char* value, size_t size) {
  to_be_defined_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Function.to_be_defined)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Function::to_be_defined() const {
  // @@protoc_insertion_point(field_list:Messages.Function.to_be_defined)
  return to_be_defined_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Function::mutable_to_be_defined() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Function.to_be_defined)
  return &to_be_defined_;
}

// repeated .Messages.Vector64 data = 8;
inline int Function::data_size() const {
  return data_.size();
}
inline ::Messages::Vector64* Function::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Function.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
Function::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Function.data)
  return &data_;
}
inline const ::Messages::Vector64& Function::data(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Function.data)
  return data_.Get(index);
}
inline ::Messages::Vector64* Function::add_data() {
  // @@protoc_insertion_point(field_add:Messages.Function.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
Function::data() const {
  // @@protoc_insertion_point(field_list:Messages.Function.data)
  return data_;
}

// bool cpu_capable = 10;
inline void Function::clear_cpu_capable() {
  cpu_capable_ = false;
}
inline bool Function::cpu_capable() const {
  // @@protoc_insertion_point(field_get:Messages.Function.cpu_capable)
  return cpu_capable_;
}
inline void Function::set_cpu_capable(bool value) {
  
  cpu_capable_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.cpu_capable)
}

// bool gpu_capable = 11;
inline void Function::clear_gpu_capable() {
  gpu_capable_ = false;
}
inline bool Function::gpu_capable() const {
  // @@protoc_insertion_point(field_get:Messages.Function.gpu_capable)
  return gpu_capable_;
}
inline void Function::set_gpu_capable(bool value) {
  
  gpu_capable_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.gpu_capable)
}

// bool include_as_preprocessor = 12;
inline void Function::clear_include_as_preprocessor() {
  include_as_preprocessor_ = false;
}
inline bool Function::include_as_preprocessor() const {
  // @@protoc_insertion_point(field_get:Messages.Function.include_as_preprocessor)
  return include_as_preprocessor_;
}
inline void Function::set_include_as_preprocessor(bool value) {
  
  include_as_preprocessor_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.include_as_preprocessor)
}

// bool omit_from_main_loop = 13;
inline void Function::clear_omit_from_main_loop() {
  omit_from_main_loop_ = false;
}
inline bool Function::omit_from_main_loop() const {
  // @@protoc_insertion_point(field_get:Messages.Function.omit_from_main_loop)
  return omit_from_main_loop_;
}
inline void Function::set_omit_from_main_loop(bool value) {
  
  omit_from_main_loop_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.omit_from_main_loop)
}

// bool include_as_postprocessor = 14;
inline void Function::clear_include_as_postprocessor() {
  include_as_postprocessor_ = false;
}
inline bool Function::include_as_postprocessor() const {
  // @@protoc_insertion_point(field_get:Messages.Function.include_as_postprocessor)
  return include_as_postprocessor_;
}
inline void Function::set_include_as_postprocessor(bool value) {
  
  include_as_postprocessor_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.include_as_postprocessor)
}

// bool mutually_exclusive = 15;
inline void Function::clear_mutually_exclusive() {
  mutually_exclusive_ = false;
}
inline bool Function::mutually_exclusive() const {
  // @@protoc_insertion_point(field_get:Messages.Function.mutually_exclusive)
  return mutually_exclusive_;
}
inline void Function::set_mutually_exclusive(bool value) {
  
  mutually_exclusive_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.mutually_exclusive)
}

// bool only_once = 16;
inline void Function::clear_only_once() {
  only_once_ = false;
}
inline bool Function::only_once() const {
  // @@protoc_insertion_point(field_get:Messages.Function.only_once)
  return only_once_;
}
inline void Function::set_only_once(bool value) {
  
  only_once_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.only_once)
}

// bool push_front = 17;
inline void Function::clear_push_front() {
  push_front_ = false;
}
inline bool Function::push_front() const {
  // @@protoc_insertion_point(field_get:Messages.Function.push_front)
  return push_front_;
}
inline void Function::set_push_front(bool value) {
  
  push_front_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.push_front)
}

// bool dont_flatten = 18;
inline void Function::clear_dont_flatten() {
  dont_flatten_ = false;
}
inline bool Function::dont_flatten() const {
  // @@protoc_insertion_point(field_get:Messages.Function.dont_flatten)
  return dont_flatten_;
}
inline void Function::set_dont_flatten(bool value) {
  
  dont_flatten_ = value;
  // @@protoc_insertion_point(field_set:Messages.Function.dont_flatten)
}

// -------------------------------------------------------------------

// Command

// .Messages.Function function = 1;
inline bool Command::has_function() const {
  return this != internal_default_instance() && function_ != nullptr;
}
inline void Command::clear_function() {
  if (GetArenaNoVirtual() == nullptr && function_ != nullptr) {
    delete function_;
  }
  function_ = nullptr;
}
inline const ::Messages::Function& Command::function() const {
  const ::Messages::Function* p = function_;
  // @@protoc_insertion_point(field_get:Messages.Command.function)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Function*>(
      &::Messages::_Function_default_instance_);
}
inline ::Messages::Function* Command::release_function() {
  // @@protoc_insertion_point(field_release:Messages.Command.function)
  
  ::Messages::Function* temp = function_;
  function_ = nullptr;
  return temp;
}
inline ::Messages::Function* Command::mutable_function() {
  
  if (function_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Function>(GetArenaNoVirtual());
    function_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Command.function)
  return function_;
}
inline void Command::set_allocated_function(::Messages::Function* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete function_;
  }
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    
  } else {
    
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:Messages.Command.function)
}

// bool args_are_set = 2;
inline void Command::clear_args_are_set() {
  args_are_set_ = false;
}
inline bool Command::args_are_set() const {
  // @@protoc_insertion_point(field_get:Messages.Command.args_are_set)
  return args_are_set_;
}
inline void Command::set_args_are_set(bool value) {
  
  args_are_set_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.args_are_set)
}

// bool kernel_ready = 3;
inline void Command::clear_kernel_ready() {
  kernel_ready_ = false;
}
inline bool Command::kernel_ready() const {
  // @@protoc_insertion_point(field_get:Messages.Command.kernel_ready)
  return kernel_ready_;
}
inline void Command::set_kernel_ready(bool value) {
  
  kernel_ready_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.kernel_ready)
}

// int64 exec_count = 4;
inline void Command::clear_exec_count() {
  exec_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::exec_count() const {
  // @@protoc_insertion_point(field_get:Messages.Command.exec_count)
  return exec_count_;
}
inline void Command::set_exec_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exec_count_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.exec_count)
}

// int64 effective_size = 5;
inline void Command::clear_effective_size() {
  effective_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::effective_size() const {
  // @@protoc_insertion_point(field_get:Messages.Command.effective_size)
  return effective_size_;
}
inline void Command::set_effective_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  effective_size_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.effective_size)
}

// int64 version = 6;
inline void Command::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::version() const {
  // @@protoc_insertion_point(field_get:Messages.Command.version)
  return version_;
}
inline void Command::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.version)
}

// int64 id = 7;
inline void Command::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::id() const {
  // @@protoc_insertion_point(field_get:Messages.Command.id)
  return id_;
}
inline void Command::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.id)
}

// int64 n_kernel = 8;
inline void Command::clear_n_kernel() {
  n_kernel_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Command::n_kernel() const {
  // @@protoc_insertion_point(field_get:Messages.Command.n_kernel)
  return n_kernel_;
}
inline void Command::set_n_kernel(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  n_kernel_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.n_kernel)
}

// float progress = 9;
inline void Command::clear_progress() {
  progress_ = 0;
}
inline float Command::progress() const {
  // @@protoc_insertion_point(field_get:Messages.Command.progress)
  return progress_;
}
inline void Command::set_progress(float value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:Messages.Command.progress)
}

// string msg = 10;
inline void Command::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Command::msg() const {
  // @@protoc_insertion_point(field_get:Messages.Command.msg)
  return msg_.GetNoArena();
}
inline void Command::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Command.msg)
}
inline void Command::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Command.msg)
}
inline void Command::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Command.msg)
}
inline void Command::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Command.msg)
}
inline std::string* Command::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Command.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Command::release_msg() {
  // @@protoc_insertion_point(field_release:Messages.Command.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Messages.Command.msg)
}

// repeated .Messages.Vector64 data = 12;
inline int Command::data_size() const {
  return data_.size();
}
inline ::Messages::Vector64* Command::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Command.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
Command::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.data)
  return &data_;
}
inline const ::Messages::Vector64& Command::data(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.data)
  return data_.Get(index);
}
inline ::Messages::Vector64* Command::add_data() {
  // @@protoc_insertion_point(field_add:Messages.Command.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
Command::data() const {
  // @@protoc_insertion_point(field_list:Messages.Command.data)
  return data_;
}

// repeated .Messages.Command before = 13;
inline int Command::before_size() const {
  return before_.size();
}
inline void Command::clear_before() {
  before_.Clear();
}
inline ::Messages::Command* Command::mutable_before(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Command.before)
  return before_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >*
Command::mutable_before() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.before)
  return &before_;
}
inline const ::Messages::Command& Command::before(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.before)
  return before_.Get(index);
}
inline ::Messages::Command* Command::add_before() {
  // @@protoc_insertion_point(field_add:Messages.Command.before)
  return before_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >&
Command::before() const {
  // @@protoc_insertion_point(field_list:Messages.Command.before)
  return before_;
}

// repeated .Messages.Command after = 14;
inline int Command::after_size() const {
  return after_.size();
}
inline void Command::clear_after() {
  after_.Clear();
}
inline ::Messages::Command* Command::mutable_after(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Command.after)
  return after_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >*
Command::mutable_after() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.after)
  return &after_;
}
inline const ::Messages::Command& Command::after(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.after)
  return after_.Get(index);
}
inline ::Messages::Command* Command::add_after() {
  // @@protoc_insertion_point(field_add:Messages.Command.after)
  return after_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >&
Command::after() const {
  // @@protoc_insertion_point(field_list:Messages.Command.after)
  return after_;
}

// repeated int32 region_type = 15;
inline int Command::region_type_size() const {
  return region_type_.size();
}
inline void Command::clear_region_type() {
  region_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::region_type(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.region_type)
  return region_type_.Get(index);
}
inline void Command::set_region_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  region_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Command.region_type)
}
inline void Command::add_region_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  region_type_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Command.region_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Command::region_type() const {
  // @@protoc_insertion_point(field_list:Messages.Command.region_type)
  return region_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Command::mutable_region_type() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.region_type)
  return &region_type_;
}

// repeated int32 region_id = 16;
inline int Command::region_id_size() const {
  return region_id_.size();
}
inline void Command::clear_region_id() {
  region_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::region_id(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.region_id)
  return region_id_.Get(index);
}
inline void Command::set_region_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  region_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Command.region_id)
}
inline void Command::add_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  region_id_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Command.region_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Command::region_id() const {
  // @@protoc_insertion_point(field_list:Messages.Command.region_id)
  return region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Command::mutable_region_id() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.region_id)
  return &region_id_;
}

// repeated string argument_types = 17;
inline int Command::argument_types_size() const {
  return argument_types_.size();
}
inline void Command::clear_argument_types() {
  argument_types_.Clear();
}
inline const std::string& Command::argument_types(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.argument_types)
  return argument_types_.Get(index);
}
inline std::string* Command::mutable_argument_types(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Command.argument_types)
  return argument_types_.Mutable(index);
}
inline void Command::set_argument_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Command.argument_types)
  argument_types_.Mutable(index)->assign(value);
}
inline void Command::set_argument_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Command.argument_types)
  argument_types_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_argument_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argument_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Command.argument_types)
}
inline void Command::set_argument_types(int index, const char* value, size_t size) {
  argument_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Command.argument_types)
}
inline std::string* Command::add_argument_types() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Command.argument_types)
  return argument_types_.Add();
}
inline void Command::add_argument_types(const std::string& value) {
  argument_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Command.argument_types)
}
inline void Command::add_argument_types(std::string&& value) {
  argument_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Command.argument_types)
}
inline void Command::add_argument_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argument_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Command.argument_types)
}
inline void Command::add_argument_types(const char* value, size_t size) {
  argument_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Command.argument_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::argument_types() const {
  // @@protoc_insertion_point(field_list:Messages.Command.argument_types)
  return argument_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_argument_types() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.argument_types)
  return &argument_types_;
}

// repeated string argument_descriptions = 18;
inline int Command::argument_descriptions_size() const {
  return argument_descriptions_.size();
}
inline void Command::clear_argument_descriptions() {
  argument_descriptions_.Clear();
}
inline const std::string& Command::argument_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Command.argument_descriptions)
  return argument_descriptions_.Get(index);
}
inline std::string* Command::mutable_argument_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Command.argument_descriptions)
  return argument_descriptions_.Mutable(index);
}
inline void Command::set_argument_descriptions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Command.argument_descriptions)
  argument_descriptions_.Mutable(index)->assign(value);
}
inline void Command::set_argument_descriptions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Command.argument_descriptions)
  argument_descriptions_.Mutable(index)->assign(std::move(value));
}
inline void Command::set_argument_descriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argument_descriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Command.argument_descriptions)
}
inline void Command::set_argument_descriptions(int index, const char* value, size_t size) {
  argument_descriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Command.argument_descriptions)
}
inline std::string* Command::add_argument_descriptions() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Command.argument_descriptions)
  return argument_descriptions_.Add();
}
inline void Command::add_argument_descriptions(const std::string& value) {
  argument_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Command.argument_descriptions)
}
inline void Command::add_argument_descriptions(std::string&& value) {
  argument_descriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Command.argument_descriptions)
}
inline void Command::add_argument_descriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  argument_descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Command.argument_descriptions)
}
inline void Command::add_argument_descriptions(const char* value, size_t size) {
  argument_descriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Command.argument_descriptions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Command::argument_descriptions() const {
  // @@protoc_insertion_point(field_list:Messages.Command.argument_descriptions)
  return argument_descriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Command::mutable_argument_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Command.argument_descriptions)
  return &argument_descriptions_;
}

// -------------------------------------------------------------------

// Script

// string name = 1;
inline void Script::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Script::name() const {
  // @@protoc_insertion_point(field_get:Messages.Script.name)
  return name_.GetNoArena();
}
inline void Script::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Script.name)
}
inline void Script::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Script.name)
}
inline void Script::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Script.name)
}
inline void Script::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Script.name)
}
inline std::string* Script::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Script.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Script::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Script.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Script::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Messages.Script.name)
}

// string msg = 2;
inline void Script::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Script::msg() const {
  // @@protoc_insertion_point(field_get:Messages.Script.msg)
  return msg_.GetNoArena();
}
inline void Script::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Script.msg)
}
inline void Script::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Script.msg)
}
inline void Script::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Script.msg)
}
inline void Script::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Script.msg)
}
inline std::string* Script::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Script.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Script::release_msg() {
  // @@protoc_insertion_point(field_release:Messages.Script.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Script::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Messages.Script.msg)
}

// string source_code = 3;
inline void Script::clear_source_code() {
  source_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Script::source_code() const {
  // @@protoc_insertion_point(field_get:Messages.Script.source_code)
  return source_code_.GetNoArena();
}
inline void Script::set_source_code(const std::string& value) {
  
  source_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Script.source_code)
}
inline void Script::set_source_code(std::string&& value) {
  
  source_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Script.source_code)
}
inline void Script::set_source_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Script.source_code)
}
inline void Script::set_source_code(const char* value, size_t size) {
  
  source_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Script.source_code)
}
inline std::string* Script::mutable_source_code() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Script.source_code)
  return source_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Script::release_source_code() {
  // @@protoc_insertion_point(field_release:Messages.Script.source_code)
  
  return source_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Script::set_allocated_source_code(std::string* source_code) {
  if (source_code != nullptr) {
    
  } else {
    
  }
  source_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_code);
  // @@protoc_insertion_point(field_set_allocated:Messages.Script.source_code)
}

// int64 uid = 4;
inline void Script::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Script::uid() const {
  // @@protoc_insertion_point(field_get:Messages.Script.uid)
  return uid_;
}
inline void Script::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Messages.Script.uid)
}

// int32 device = 5;
inline void Script::clear_device() {
  device_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Script::device() const {
  // @@protoc_insertion_point(field_get:Messages.Script.device)
  return device_;
}
inline void Script::set_device(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  device_ = value;
  // @@protoc_insertion_point(field_set:Messages.Script.device)
}

// int32 status = 6;
inline void Script::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Script::status() const {
  // @@protoc_insertion_point(field_get:Messages.Script.status)
  return status_;
}
inline void Script::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Messages.Script.status)
}

// int32 order = 7;
inline void Script::clear_order() {
  order_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Script::order() const {
  // @@protoc_insertion_point(field_get:Messages.Script.order)
  return order_;
}
inline void Script::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:Messages.Script.order)
}

// float progress = 8;
inline void Script::clear_progress() {
  progress_ = 0;
}
inline float Script::progress() const {
  // @@protoc_insertion_point(field_get:Messages.Script.progress)
  return progress_;
}
inline void Script::set_progress(float value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:Messages.Script.progress)
}

// .Messages.Variables variables = 10;
inline bool Script::has_variables() const {
  return this != internal_default_instance() && variables_ != nullptr;
}
inline void Script::clear_variables() {
  if (GetArenaNoVirtual() == nullptr && variables_ != nullptr) {
    delete variables_;
  }
  variables_ = nullptr;
}
inline const ::Messages::Variables& Script::variables() const {
  const ::Messages::Variables* p = variables_;
  // @@protoc_insertion_point(field_get:Messages.Script.variables)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Variables*>(
      &::Messages::_Variables_default_instance_);
}
inline ::Messages::Variables* Script::release_variables() {
  // @@protoc_insertion_point(field_release:Messages.Script.variables)
  
  ::Messages::Variables* temp = variables_;
  variables_ = nullptr;
  return temp;
}
inline ::Messages::Variables* Script::mutable_variables() {
  
  if (variables_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Variables>(GetArenaNoVirtual());
    variables_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Script.variables)
  return variables_;
}
inline void Script::set_allocated_variables(::Messages::Variables* variables) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete variables_;
  }
  if (variables) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      variables = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variables, submessage_arena);
    }
    
  } else {
    
  }
  variables_ = variables;
  // @@protoc_insertion_point(field_set_allocated:Messages.Script.variables)
}

// repeated .Messages.Command sequence = 12;
inline int Script::sequence_size() const {
  return sequence_.size();
}
inline void Script::clear_sequence() {
  sequence_.Clear();
}
inline ::Messages::Command* Script::mutable_sequence(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Script.sequence)
  return sequence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >*
Script::mutable_sequence() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Script.sequence)
  return &sequence_;
}
inline const ::Messages::Command& Script::sequence(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Script.sequence)
  return sequence_.Get(index);
}
inline ::Messages::Command* Script::add_sequence() {
  // @@protoc_insertion_point(field_add:Messages.Script.sequence)
  return sequence_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >&
Script::sequence() const {
  // @@protoc_insertion_point(field_list:Messages.Script.sequence)
  return sequence_;
}

// .Messages.Script before = 14;
inline bool Script::has_before() const {
  return this != internal_default_instance() && before_ != nullptr;
}
inline void Script::clear_before() {
  if (GetArenaNoVirtual() == nullptr && before_ != nullptr) {
    delete before_;
  }
  before_ = nullptr;
}
inline const ::Messages::Script& Script::before() const {
  const ::Messages::Script* p = before_;
  // @@protoc_insertion_point(field_get:Messages.Script.before)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Script*>(
      &::Messages::_Script_default_instance_);
}
inline ::Messages::Script* Script::release_before() {
  // @@protoc_insertion_point(field_release:Messages.Script.before)
  
  ::Messages::Script* temp = before_;
  before_ = nullptr;
  return temp;
}
inline ::Messages::Script* Script::mutable_before() {
  
  if (before_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Script>(GetArenaNoVirtual());
    before_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Script.before)
  return before_;
}
inline void Script::set_allocated_before(::Messages::Script* before) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete before_;
  }
  if (before) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      before = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, before, submessage_arena);
    }
    
  } else {
    
  }
  before_ = before;
  // @@protoc_insertion_point(field_set_allocated:Messages.Script.before)
}

// .Messages.Script after = 15;
inline bool Script::has_after() const {
  return this != internal_default_instance() && after_ != nullptr;
}
inline void Script::clear_after() {
  if (GetArenaNoVirtual() == nullptr && after_ != nullptr) {
    delete after_;
  }
  after_ = nullptr;
}
inline const ::Messages::Script& Script::after() const {
  const ::Messages::Script* p = after_;
  // @@protoc_insertion_point(field_get:Messages.Script.after)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Script*>(
      &::Messages::_Script_default_instance_);
}
inline ::Messages::Script* Script::release_after() {
  // @@protoc_insertion_point(field_release:Messages.Script.after)
  
  ::Messages::Script* temp = after_;
  after_ = nullptr;
  return temp;
}
inline ::Messages::Script* Script::mutable_after() {
  
  if (after_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Script>(GetArenaNoVirtual());
    after_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.Script.after)
  return after_;
}
inline void Script::set_allocated_after(::Messages::Script* after) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete after_;
  }
  if (after) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      after = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, after, submessage_arena);
    }
    
  } else {
    
  }
  after_ = after;
  // @@protoc_insertion_point(field_set_allocated:Messages.Script.after)
}

// -------------------------------------------------------------------

// Rule

// string pk = 1;
inline void Rule::clear_pk() {
  pk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Rule::pk() const {
  // @@protoc_insertion_point(field_get:Messages.Rule.pk)
  return pk_.GetNoArena();
}
inline void Rule::set_pk(const std::string& value) {
  
  pk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Rule.pk)
}
inline void Rule::set_pk(std::string&& value) {
  
  pk_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Rule.pk)
}
inline void Rule::set_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Rule.pk)
}
inline void Rule::set_pk(const char* value, size_t size) {
  
  pk_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Rule.pk)
}
inline std::string* Rule::mutable_pk() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Rule.pk)
  return pk_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Rule::release_pk() {
  // @@protoc_insertion_point(field_release:Messages.Rule.pk)
  
  return pk_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Rule::set_allocated_pk(std::string* pk) {
  if (pk != nullptr) {
    
  } else {
    
  }
  pk_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pk);
  // @@protoc_insertion_point(field_set_allocated:Messages.Rule.pk)
}

// repeated string algorithms = 2;
inline int Rule::algorithms_size() const {
  return algorithms_.size();
}
inline void Rule::clear_algorithms() {
  algorithms_.Clear();
}
inline const std::string& Rule::algorithms(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Rule.algorithms)
  return algorithms_.Get(index);
}
inline std::string* Rule::mutable_algorithms(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Rule.algorithms)
  return algorithms_.Mutable(index);
}
inline void Rule::set_algorithms(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Rule.algorithms)
  algorithms_.Mutable(index)->assign(value);
}
inline void Rule::set_algorithms(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Rule.algorithms)
  algorithms_.Mutable(index)->assign(std::move(value));
}
inline void Rule::set_algorithms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  algorithms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Rule.algorithms)
}
inline void Rule::set_algorithms(int index, const char* value, size_t size) {
  algorithms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Rule.algorithms)
}
inline std::string* Rule::add_algorithms() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Rule.algorithms)
  return algorithms_.Add();
}
inline void Rule::add_algorithms(const std::string& value) {
  algorithms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Rule.algorithms)
}
inline void Rule::add_algorithms(std::string&& value) {
  algorithms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Rule.algorithms)
}
inline void Rule::add_algorithms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  algorithms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Rule.algorithms)
}
inline void Rule::add_algorithms(const char* value, size_t size) {
  algorithms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Rule.algorithms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Rule::algorithms() const {
  // @@protoc_insertion_point(field_list:Messages.Rule.algorithms)
  return algorithms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Rule::mutable_algorithms() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Rule.algorithms)
  return &algorithms_;
}

// repeated int32 priority = 3;
inline int Rule::priority_size() const {
  return priority_.size();
}
inline void Rule::clear_priority() {
  priority_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rule::priority(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Rule.priority)
  return priority_.Get(index);
}
inline void Rule::set_priority(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  priority_.Set(index, value);
  // @@protoc_insertion_point(field_set:Messages.Rule.priority)
}
inline void Rule::add_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  priority_.Add(value);
  // @@protoc_insertion_point(field_add:Messages.Rule.priority)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Rule::priority() const {
  // @@protoc_insertion_point(field_list:Messages.Rule.priority)
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Rule::mutable_priority() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Rule.priority)
  return &priority_;
}

// -------------------------------------------------------------------

// Model

// string name = 1;
inline void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:Messages.Model.name)
  return name_.GetNoArena();
}
inline void Model::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.Model.name)
}
inline void Model::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.Model.name)
}
inline void Model::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.Model.name)
}
inline void Model::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.Model.name)
}
inline std::string* Model::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Messages.Model.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:Messages.Model.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Messages.Model.name)
}

// repeated string dofs = 3;
inline int Model::dofs_size() const {
  return dofs_.size();
}
inline void Model::clear_dofs() {
  dofs_.Clear();
}
inline const std::string& Model::dofs(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.dofs)
  return dofs_.Get(index);
}
inline std::string* Model::mutable_dofs(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.dofs)
  return dofs_.Mutable(index);
}
inline void Model::set_dofs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.dofs)
  dofs_.Mutable(index)->assign(value);
}
inline void Model::set_dofs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.dofs)
  dofs_.Mutable(index)->assign(std::move(value));
}
inline void Model::set_dofs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dofs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Model.dofs)
}
inline void Model::set_dofs(int index, const char* value, size_t size) {
  dofs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Model.dofs)
}
inline std::string* Model::add_dofs() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Model.dofs)
  return dofs_.Add();
}
inline void Model::add_dofs(const std::string& value) {
  dofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Model.dofs)
}
inline void Model::add_dofs(std::string&& value) {
  dofs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Model.dofs)
}
inline void Model::add_dofs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dofs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Model.dofs)
}
inline void Model::add_dofs(const char* value, size_t size) {
  dofs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Model.dofs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Model::dofs() const {
  // @@protoc_insertion_point(field_list:Messages.Model.dofs)
  return dofs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Model::mutable_dofs() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.dofs)
  return &dofs_;
}

// repeated string algorithms = 4;
inline int Model::algorithms_size() const {
  return algorithms_.size();
}
inline void Model::clear_algorithms() {
  algorithms_.Clear();
}
inline const std::string& Model::algorithms(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.algorithms)
  return algorithms_.Get(index);
}
inline std::string* Model::mutable_algorithms(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.algorithms)
  return algorithms_.Mutable(index);
}
inline void Model::set_algorithms(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.algorithms)
  algorithms_.Mutable(index)->assign(value);
}
inline void Model::set_algorithms(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.algorithms)
  algorithms_.Mutable(index)->assign(std::move(value));
}
inline void Model::set_algorithms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  algorithms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Model.algorithms)
}
inline void Model::set_algorithms(int index, const char* value, size_t size) {
  algorithms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Model.algorithms)
}
inline std::string* Model::add_algorithms() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Model.algorithms)
  return algorithms_.Add();
}
inline void Model::add_algorithms(const std::string& value) {
  algorithms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Model.algorithms)
}
inline void Model::add_algorithms(std::string&& value) {
  algorithms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Model.algorithms)
}
inline void Model::add_algorithms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  algorithms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Model.algorithms)
}
inline void Model::add_algorithms(const char* value, size_t size) {
  algorithms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Model.algorithms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Model::algorithms() const {
  // @@protoc_insertion_point(field_list:Messages.Model.algorithms)
  return algorithms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Model::mutable_algorithms() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.algorithms)
  return &algorithms_;
}

// repeated string available_outputs = 5;
inline int Model::available_outputs_size() const {
  return available_outputs_.size();
}
inline void Model::clear_available_outputs() {
  available_outputs_.Clear();
}
inline const std::string& Model::available_outputs(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.available_outputs)
  return available_outputs_.Get(index);
}
inline std::string* Model::mutable_available_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.available_outputs)
  return available_outputs_.Mutable(index);
}
inline void Model::set_available_outputs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.available_outputs)
  available_outputs_.Mutable(index)->assign(value);
}
inline void Model::set_available_outputs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.available_outputs)
  available_outputs_.Mutable(index)->assign(std::move(value));
}
inline void Model::set_available_outputs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  available_outputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Model.available_outputs)
}
inline void Model::set_available_outputs(int index, const char* value, size_t size) {
  available_outputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Model.available_outputs)
}
inline std::string* Model::add_available_outputs() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Model.available_outputs)
  return available_outputs_.Add();
}
inline void Model::add_available_outputs(const std::string& value) {
  available_outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Model.available_outputs)
}
inline void Model::add_available_outputs(std::string&& value) {
  available_outputs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Model.available_outputs)
}
inline void Model::add_available_outputs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  available_outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Model.available_outputs)
}
inline void Model::add_available_outputs(const char* value, size_t size) {
  available_outputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Model.available_outputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Model::available_outputs() const {
  // @@protoc_insertion_point(field_list:Messages.Model.available_outputs)
  return available_outputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Model::mutable_available_outputs() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.available_outputs)
  return &available_outputs_;
}

// repeated string extra_properties = 6;
inline int Model::extra_properties_size() const {
  return extra_properties_.size();
}
inline void Model::clear_extra_properties() {
  extra_properties_.Clear();
}
inline const std::string& Model::extra_properties(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.extra_properties)
  return extra_properties_.Get(index);
}
inline std::string* Model::mutable_extra_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.extra_properties)
  return extra_properties_.Mutable(index);
}
inline void Model::set_extra_properties(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.extra_properties)
  extra_properties_.Mutable(index)->assign(value);
}
inline void Model::set_extra_properties(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.extra_properties)
  extra_properties_.Mutable(index)->assign(std::move(value));
}
inline void Model::set_extra_properties(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Model.extra_properties)
}
inline void Model::set_extra_properties(int index, const char* value, size_t size) {
  extra_properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Model.extra_properties)
}
inline std::string* Model::add_extra_properties() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Model.extra_properties)
  return extra_properties_.Add();
}
inline void Model::add_extra_properties(const std::string& value) {
  extra_properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Model.extra_properties)
}
inline void Model::add_extra_properties(std::string&& value) {
  extra_properties_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Model.extra_properties)
}
inline void Model::add_extra_properties(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Model.extra_properties)
}
inline void Model::add_extra_properties(const char* value, size_t size) {
  extra_properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Model.extra_properties)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Model::extra_properties() const {
  // @@protoc_insertion_point(field_list:Messages.Model.extra_properties)
  return extra_properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Model::mutable_extra_properties() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.extra_properties)
  return &extra_properties_;
}

// repeated string compatible_conditions = 7;
inline int Model::compatible_conditions_size() const {
  return compatible_conditions_.size();
}
inline void Model::clear_compatible_conditions() {
  compatible_conditions_.Clear();
}
inline const std::string& Model::compatible_conditions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.compatible_conditions)
  return compatible_conditions_.Get(index);
}
inline std::string* Model::mutable_compatible_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.compatible_conditions)
  return compatible_conditions_.Mutable(index);
}
inline void Model::set_compatible_conditions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.compatible_conditions)
  compatible_conditions_.Mutable(index)->assign(value);
}
inline void Model::set_compatible_conditions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.compatible_conditions)
  compatible_conditions_.Mutable(index)->assign(std::move(value));
}
inline void Model::set_compatible_conditions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  compatible_conditions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Model.compatible_conditions)
}
inline void Model::set_compatible_conditions(int index, const char* value, size_t size) {
  compatible_conditions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Model.compatible_conditions)
}
inline std::string* Model::add_compatible_conditions() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Model.compatible_conditions)
  return compatible_conditions_.Add();
}
inline void Model::add_compatible_conditions(const std::string& value) {
  compatible_conditions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Model.compatible_conditions)
}
inline void Model::add_compatible_conditions(std::string&& value) {
  compatible_conditions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Model.compatible_conditions)
}
inline void Model::add_compatible_conditions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  compatible_conditions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Model.compatible_conditions)
}
inline void Model::add_compatible_conditions(const char* value, size_t size) {
  compatible_conditions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Model.compatible_conditions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Model::compatible_conditions() const {
  // @@protoc_insertion_point(field_list:Messages.Model.compatible_conditions)
  return compatible_conditions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Model::mutable_compatible_conditions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.compatible_conditions)
  return &compatible_conditions_;
}

// repeated string compatible_scripts = 8;
inline int Model::compatible_scripts_size() const {
  return compatible_scripts_.size();
}
inline void Model::clear_compatible_scripts() {
  compatible_scripts_.Clear();
}
inline const std::string& Model::compatible_scripts(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.compatible_scripts)
  return compatible_scripts_.Get(index);
}
inline std::string* Model::mutable_compatible_scripts(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.compatible_scripts)
  return compatible_scripts_.Mutable(index);
}
inline void Model::set_compatible_scripts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.compatible_scripts)
  compatible_scripts_.Mutable(index)->assign(value);
}
inline void Model::set_compatible_scripts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.Model.compatible_scripts)
  compatible_scripts_.Mutable(index)->assign(std::move(value));
}
inline void Model::set_compatible_scripts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  compatible_scripts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.Model.compatible_scripts)
}
inline void Model::set_compatible_scripts(int index, const char* value, size_t size) {
  compatible_scripts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.Model.compatible_scripts)
}
inline std::string* Model::add_compatible_scripts() {
  // @@protoc_insertion_point(field_add_mutable:Messages.Model.compatible_scripts)
  return compatible_scripts_.Add();
}
inline void Model::add_compatible_scripts(const std::string& value) {
  compatible_scripts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.Model.compatible_scripts)
}
inline void Model::add_compatible_scripts(std::string&& value) {
  compatible_scripts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.Model.compatible_scripts)
}
inline void Model::add_compatible_scripts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  compatible_scripts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.Model.compatible_scripts)
}
inline void Model::add_compatible_scripts(const char* value, size_t size) {
  compatible_scripts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.Model.compatible_scripts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Model::compatible_scripts() const {
  // @@protoc_insertion_point(field_list:Messages.Model.compatible_scripts)
  return compatible_scripts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Model::mutable_compatible_scripts() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.compatible_scripts)
  return &compatible_scripts_;
}

// repeated .Messages.Model sub_models = 9;
inline int Model::sub_models_size() const {
  return sub_models_.size();
}
inline void Model::clear_sub_models() {
  sub_models_.Clear();
}
inline ::Messages::Model* Model::mutable_sub_models(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.sub_models)
  return sub_models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model >*
Model::mutable_sub_models() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.sub_models)
  return &sub_models_;
}
inline const ::Messages::Model& Model::sub_models(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.sub_models)
  return sub_models_.Get(index);
}
inline ::Messages::Model* Model::add_sub_models() {
  // @@protoc_insertion_point(field_add:Messages.Model.sub_models)
  return sub_models_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model >&
Model::sub_models() const {
  // @@protoc_insertion_point(field_list:Messages.Model.sub_models)
  return sub_models_;
}

// repeated .Messages.Vector64 data = 10;
inline int Model::data_size() const {
  return data_.size();
}
inline ::Messages::Vector64* Model::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
Model::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.data)
  return &data_;
}
inline const ::Messages::Vector64& Model::data(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.data)
  return data_.Get(index);
}
inline ::Messages::Vector64* Model::add_data() {
  // @@protoc_insertion_point(field_add:Messages.Model.data)
  return data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
Model::data() const {
  // @@protoc_insertion_point(field_list:Messages.Model.data)
  return data_;
}

// repeated .Messages.Rule rules = 11;
inline int Model::rules_size() const {
  return rules_.size();
}
inline void Model::clear_rules() {
  rules_.Clear();
}
inline ::Messages::Rule* Model::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule >*
Model::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.rules)
  return &rules_;
}
inline const ::Messages::Rule& Model::rules(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.rules)
  return rules_.Get(index);
}
inline ::Messages::Rule* Model::add_rules() {
  // @@protoc_insertion_point(field_add:Messages.Model.rules)
  return rules_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule >&
Model::rules() const {
  // @@protoc_insertion_point(field_list:Messages.Model.rules)
  return rules_;
}

// repeated .Messages.Rule mutex_stack = 12;
inline int Model::mutex_stack_size() const {
  return mutex_stack_.size();
}
inline void Model::clear_mutex_stack() {
  mutex_stack_.Clear();
}
inline ::Messages::Rule* Model::mutable_mutex_stack(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.Model.mutex_stack)
  return mutex_stack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule >*
Model::mutable_mutex_stack() {
  // @@protoc_insertion_point(field_mutable_list:Messages.Model.mutex_stack)
  return &mutex_stack_;
}
inline const ::Messages::Rule& Model::mutex_stack(int index) const {
  // @@protoc_insertion_point(field_get:Messages.Model.mutex_stack)
  return mutex_stack_.Get(index);
}
inline ::Messages::Rule* Model::add_mutex_stack() {
  // @@protoc_insertion_point(field_add:Messages.Model.mutex_stack)
  return mutex_stack_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Rule >&
Model::mutex_stack() const {
  // @@protoc_insertion_point(field_list:Messages.Model.mutex_stack)
  return mutex_stack_;
}

// -------------------------------------------------------------------

// System

// .Messages.Meta meta = 1;
inline bool System::has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline const ::Messages::Meta& System::meta() const {
  const ::Messages::Meta* p = meta_;
  // @@protoc_insertion_point(field_get:Messages.System.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Meta*>(
      &::Messages::_Meta_default_instance_);
}
inline ::Messages::Meta* System::release_meta() {
  // @@protoc_insertion_point(field_release:Messages.System.meta)
  
  ::Messages::Meta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::Messages::Meta* System::mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Meta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.System.meta)
  return meta_;
}
inline void System::set_allocated_meta(::Messages::Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:Messages.System.meta)
}

// .Messages.Script script = 2;
inline bool System::has_script() const {
  return this != internal_default_instance() && script_ != nullptr;
}
inline void System::clear_script() {
  if (GetArenaNoVirtual() == nullptr && script_ != nullptr) {
    delete script_;
  }
  script_ = nullptr;
}
inline const ::Messages::Script& System::script() const {
  const ::Messages::Script* p = script_;
  // @@protoc_insertion_point(field_get:Messages.System.script)
  return p != nullptr ? *p : *reinterpret_cast<const ::Messages::Script*>(
      &::Messages::_Script_default_instance_);
}
inline ::Messages::Script* System::release_script() {
  // @@protoc_insertion_point(field_release:Messages.System.script)
  
  ::Messages::Script* temp = script_;
  script_ = nullptr;
  return temp;
}
inline ::Messages::Script* System::mutable_script() {
  
  if (script_ == nullptr) {
    auto* p = CreateMaybeMessage<::Messages::Script>(GetArenaNoVirtual());
    script_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Messages.System.script)
  return script_;
}
inline void System::set_allocated_script(::Messages::Script* script) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete script_;
  }
  if (script) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      script = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, script, submessage_arena);
    }
    
  } else {
    
  }
  script_ = script;
  // @@protoc_insertion_point(field_set_allocated:Messages.System.script)
}

// string geometry = 8;
inline void System::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& System::geometry() const {
  // @@protoc_insertion_point(field_get:Messages.System.geometry)
  return geometry_.GetNoArena();
}
inline void System::set_geometry(const std::string& value) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Messages.System.geometry)
}
inline void System::set_geometry(std::string&& value) {
  
  geometry_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Messages.System.geometry)
}
inline void System::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Messages.System.geometry)
}
inline void System::set_geometry(const char* value, size_t size) {
  
  geometry_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Messages.System.geometry)
}
inline std::string* System::mutable_geometry() {
  
  // @@protoc_insertion_point(field_mutable:Messages.System.geometry)
  return geometry_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* System::release_geometry() {
  // @@protoc_insertion_point(field_release:Messages.System.geometry)
  
  return geometry_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void System::set_allocated_geometry(std::string* geometry) {
  if (geometry != nullptr) {
    
  } else {
    
  }
  geometry_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:Messages.System.geometry)
}

// repeated .Messages.Model models = 10;
inline int System::models_size() const {
  return models_.size();
}
inline void System::clear_models() {
  models_.Clear();
}
inline ::Messages::Model* System::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.System.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model >*
System::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:Messages.System.models)
  return &models_;
}
inline const ::Messages::Model& System::models(int index) const {
  // @@protoc_insertion_point(field_get:Messages.System.models)
  return models_.Get(index);
}
inline ::Messages::Model* System::add_models() {
  // @@protoc_insertion_point(field_add:Messages.System.models)
  return models_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Model >&
System::models() const {
  // @@protoc_insertion_point(field_list:Messages.System.models)
  return models_;
}

// repeated .Messages.Vector64 constants = 11;
inline int System::constants_size() const {
  return constants_.size();
}
inline ::Messages::Vector64* System::mutable_constants(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.System.constants)
  return constants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >*
System::mutable_constants() {
  // @@protoc_insertion_point(field_mutable_list:Messages.System.constants)
  return &constants_;
}
inline const ::Messages::Vector64& System::constants(int index) const {
  // @@protoc_insertion_point(field_get:Messages.System.constants)
  return constants_.Get(index);
}
inline ::Messages::Vector64* System::add_constants() {
  // @@protoc_insertion_point(field_add:Messages.System.constants)
  return constants_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Vector64 >&
System::constants() const {
  // @@protoc_insertion_point(field_list:Messages.System.constants)
  return constants_;
}

// repeated .Messages.Command conditions = 12;
inline int System::conditions_size() const {
  return conditions_.size();
}
inline void System::clear_conditions() {
  conditions_.Clear();
}
inline ::Messages::Command* System::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.System.conditions)
  return conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >*
System::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:Messages.System.conditions)
  return &conditions_;
}
inline const ::Messages::Command& System::conditions(int index) const {
  // @@protoc_insertion_point(field_get:Messages.System.conditions)
  return conditions_.Get(index);
}
inline ::Messages::Command* System::add_conditions() {
  // @@protoc_insertion_point(field_add:Messages.System.conditions)
  return conditions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Messages::Command >&
System::conditions() const {
  // @@protoc_insertion_point(field_list:Messages.System.conditions)
  return conditions_;
}

// repeated string children = 13;
inline int System::children_size() const {
  return children_.size();
}
inline void System::clear_children() {
  children_.Clear();
}
inline const std::string& System::children(int index) const {
  // @@protoc_insertion_point(field_get:Messages.System.children)
  return children_.Get(index);
}
inline std::string* System::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.System.children)
  return children_.Mutable(index);
}
inline void System::set_children(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.System.children)
  children_.Mutable(index)->assign(value);
}
inline void System::set_children(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.System.children)
  children_.Mutable(index)->assign(std::move(value));
}
inline void System::set_children(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  children_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.System.children)
}
inline void System::set_children(int index, const char* value, size_t size) {
  children_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.System.children)
}
inline std::string* System::add_children() {
  // @@protoc_insertion_point(field_add_mutable:Messages.System.children)
  return children_.Add();
}
inline void System::add_children(const std::string& value) {
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.System.children)
}
inline void System::add_children(std::string&& value) {
  children_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.System.children)
}
inline void System::add_children(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  children_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.System.children)
}
inline void System::add_children(const char* value, size_t size) {
  children_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.System.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
System::children() const {
  // @@protoc_insertion_point(field_list:Messages.System.children)
  return children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
System::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:Messages.System.children)
  return &children_;
}

// repeated string references = 14;
inline int System::references_size() const {
  return references_.size();
}
inline void System::clear_references() {
  references_.Clear();
}
inline const std::string& System::references(int index) const {
  // @@protoc_insertion_point(field_get:Messages.System.references)
  return references_.Get(index);
}
inline std::string* System::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.System.references)
  return references_.Mutable(index);
}
inline void System::set_references(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.System.references)
  references_.Mutable(index)->assign(value);
}
inline void System::set_references(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.System.references)
  references_.Mutable(index)->assign(std::move(value));
}
inline void System::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.System.references)
}
inline void System::set_references(int index, const char* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.System.references)
}
inline std::string* System::add_references() {
  // @@protoc_insertion_point(field_add_mutable:Messages.System.references)
  return references_.Add();
}
inline void System::add_references(const std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.System.references)
}
inline void System::add_references(std::string&& value) {
  references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.System.references)
}
inline void System::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.System.references)
}
inline void System::add_references(const char* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.System.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
System::references() const {
  // @@protoc_insertion_point(field_list:Messages.System.references)
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
System::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:Messages.System.references)
  return &references_;
}

// repeated string attachments = 15;
inline int System::attachments_size() const {
  return attachments_.size();
}
inline void System::clear_attachments() {
  attachments_.Clear();
}
inline const std::string& System::attachments(int index) const {
  // @@protoc_insertion_point(field_get:Messages.System.attachments)
  return attachments_.Get(index);
}
inline std::string* System::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:Messages.System.attachments)
  return attachments_.Mutable(index);
}
inline void System::set_attachments(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Messages.System.attachments)
  attachments_.Mutable(index)->assign(value);
}
inline void System::set_attachments(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Messages.System.attachments)
  attachments_.Mutable(index)->assign(std::move(value));
}
inline void System::set_attachments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attachments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Messages.System.attachments)
}
inline void System::set_attachments(int index, const char* value, size_t size) {
  attachments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Messages.System.attachments)
}
inline std::string* System::add_attachments() {
  // @@protoc_insertion_point(field_add_mutable:Messages.System.attachments)
  return attachments_.Add();
}
inline void System::add_attachments(const std::string& value) {
  attachments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Messages.System.attachments)
}
inline void System::add_attachments(std::string&& value) {
  attachments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Messages.System.attachments)
}
inline void System::add_attachments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attachments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Messages.System.attachments)
}
inline void System::add_attachments(const char* value, size_t size) {
  attachments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Messages.System.attachments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
System::attachments() const {
  // @@protoc_insertion_point(field_list:Messages.System.attachments)
  return attachments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
System::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:Messages.System.attachments)
  return &attachments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_system_2eproto
